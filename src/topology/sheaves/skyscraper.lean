/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import algebraic_geometry.sheafed_space
import topology.sheaves.sheaf_condition.unique_gluing
import topology.sheaves.stalks
import category_theory.preadditive.injective
import algebra.category.Group.abelian

/-!
# Skyscraper (pre)sheaves

A skyscraper (pre)sheaf is a (pre)sheaf supported at a single point: if `p‚ÇÄ ‚àà X` is a specified
point, then the skyscraper (pre)sheaf `ùìï` with value `A` is defined by `U ‚Ü¶ A` if `p‚ÇÄ ‚àà U` and
`U ‚Ü¶ *` if `p‚ÇÄ ‚àâ A` where `*` is some terminal object.

## Main definitions

* `skyscraper_presheaf`: the skyscraper presheaf, to define a skyscraper presheaf at point `p‚ÇÄ` with
  value `A`, use `skypscraper_presheaf p‚ÇÄ A t` where `t` is a proof that `*` is a terminal object.
* `skyscraper_sheaf`: the skyscraper presheaf satisfies the sheaf condition.

## Main statements

* `skyscraper_stalk_of_mem_closure‚ÇÄ`: if `y ‚àà closure {p‚ÇÄ}` then the stalk of
  `skyscraper_presheaf p‚ÇÄ S t` at `y` is `S`.
* `skyscraper_stalk_of_not_mem_closure‚ÇÄ`: if `y ‚àâ closure {p‚ÇÄ}` then the stalk of
  `skyscraper_presheaf p‚ÇÄ S t` at `y` is `*`.

-/


section

open topological_space
open category_theory category_theory.limits
open Top
open opposite

universes u v w

variables {X : Top.{u}} (p‚ÇÄ : X) {C : Type v} [category.{w} C] (S : C)
variables {star : C} (ts : is_terminal star)
variable [Œ† (U : opens X), decidable (p‚ÇÄ ‚àà U)]

/-
A skyscraper presheaf is a presheaf supported at a single point: if `p‚ÇÄ ‚àà X` is a specified
point, then the skyscraper presheaf `ùìï` with value `A` is defined by `U ‚Ü¶ A` if `p‚ÇÄ ‚àà U` and
`U ‚Ü¶ *` if `p‚ÇÄ ‚àâ A` where `*` is some terminal object.
-/
@[simps]
def skyscraper_presheaf : presheaf C X :=
{ obj := Œª U, ite (p‚ÇÄ ‚àà unop U) S star,
  map := Œª U V i, dite (p‚ÇÄ ‚àà unop V)
    (Œª h, eq_to_hom (if_pos (le_of_hom i.unop h)) ‚â´ ùüô S ‚â´ eq_to_hom (if_pos h).symm)
    (Œª h, ts.from _ ‚â´ eq_to_hom (if_neg h).symm),
  map_id' := Œª U,
  begin
    split_ifs,
    { simp, },
    { rw eq_comp_eq_to_hom,
      exact ts.hom_ext _ _, },
  end,
  map_comp' := Œª U V W iVU iWV,
  begin
    by_cases hW : p‚ÇÄ ‚àà unop W,
    { have hV : p‚ÇÄ ‚àà unop V := le_of_hom iWV.unop hW,
      have hU : p‚ÇÄ ‚àà unop U := le_of_hom iVU.unop hV,
      split_ifs,
      simp },
    { split_ifs;
      rw eq_comp_eq_to_hom;
      exact ts.hom_ext _ _, }
  end }

section

variables {p‚ÇÄ}

lemma skyscraper_presheaf_obj_of_mem {U : opens X} (h : p‚ÇÄ ‚àà U) :
  (skyscraper_presheaf p‚ÇÄ S ts).obj (op U) = S :=
if_pos h

lemma skyscraper_presheaf_obj_of_not_mem {U : opens X} (h : p‚ÇÄ ‚àâ U) :
  (skyscraper_presheaf p‚ÇÄ S ts).obj (op U) = star :=
if_neg h

end

/-
A skyscraper sheaf is a sheaf supported at a single point: if `p‚ÇÄ ‚àà X` is a specified
point, then the skyscraper sheaf `ùìï` with value `A` is defined by `U ‚Ü¶ A` if `p‚ÇÄ ‚àà U` and
`U ‚Ü¶ *` if `p‚ÇÄ ‚àâ A` where `*` is some terminal object.
-/
def skyscraper_sheaf : sheaf C X :=
‚ü®skyscraper_presheaf p‚ÇÄ S ts, Œª c U s hs x hx,
  ‚ü®dite (p‚ÇÄ ‚àà U)
    (Œª h, x (hs p‚ÇÄ h).some_spec.some (hs p‚ÇÄ h).some_spec.some_spec.1 ‚â´
        eq_to_hom ((skyscraper_presheaf_obj_of_mem S ts (hs p‚ÇÄ h).some_spec.some_spec.2).trans
          (skyscraper_presheaf_obj_of_mem S ts h).symm))
    (Œª h, ts.from c ‚â´ (eq_to_hom (skyscraper_presheaf_obj_of_not_mem S ts h).symm)),
    Œª V inc h,
    begin
      by_cases hV : p‚ÇÄ ‚àà V,
      { have hU : p‚ÇÄ ‚àà U := le_of_hom inc hV,
        split_ifs,
        generalize_proofs h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
        dsimp,
        split_ifs,
        rw [category.id_comp, eq_to_hom_trans, category.assoc, eq_to_hom_trans],
        generalize_proofs h‚ÇÖ,
        have := hx (hom_of_le inf_le_left) (hom_of_le inf_le_right) h‚ÇÇ.some_spec.1 h rfl,
        dsimp at this,
        have hV' : p‚ÇÄ ‚àà h‚ÇÅ.some ‚äì V := ‚ü®h‚ÇÇ.some_spec.2, hV‚ü©,
        split_ifs at this;
        rw [category.id_comp, eq_to_hom_trans, eq_to_hom_trans, eq_comp_eq_to_hom,
          category.assoc, eq_to_hom_trans] at this;
        generalize_proofs h‚ÇÜ at this;
        rw [this, category.assoc, eq_to_hom_trans, eq_to_hom_refl, category.comp_id] },
      { dsimp,
        split_ifs,
        rw [‚Üêcategory.assoc, eq_comp_eq_to_hom],
        exact ts.hom_ext _ _, }
    end,
    Œª y (hy : x.is_amalgamation y),
    begin
      split_ifs,
      { generalize_proofs h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
        have := hy h‚ÇÇ.some h‚ÇÇ.some_spec.1,
        dsimp at this,
        split_ifs at this with H,
        { rw [category.id_comp, eq_to_hom_trans, eq_comp_eq_to_hom] at this,
          rw [this, eq_comp_eq_to_hom, category.assoc, eq_to_hom_trans, eq_to_hom_refl,
            category.comp_id], },
        { exfalso,
          exact H h‚ÇÇ.some_spec.2, }, },
      { rw [‚Üêeq_comp_eq_to_hom],
        exact (ts.hom_ext _ _), }
    end‚ü©‚ü©

end

section

-- In this section, we calculate the stalks for skyscraper presheaves. We need to restrict universe
-- level.

open topological_space
open category_theory category_theory.limits
open Top
open opposite

universes u v

variables {X : Top.{u}} (p‚ÇÄ : X) {C : Type v} [category.{u} C] (S : C)
variables {star : C} (ts : is_terminal star)
variable [Œ† (U : opens X), decidable (p‚ÇÄ ‚àà U)]
variable [has_colimits C]

lemma mem_nhds_of_not_mem_closure_singleton {y : X} (h : ¬¨p‚ÇÄ ‚§≥ y) :
  ‚àÉ (U : open_nhds y), p‚ÇÄ ‚àâ U.1 :=
begin
  have := (not_iff_not.mpr specializes_iff_forall_open).mp h,
  push_neg at this,
  rcases this with ‚ü®s, o, h‚ÇÅ, h‚ÇÇ‚ü©,
  exact ‚ü®‚ü®‚ü®s, o‚ü©, h‚ÇÅ‚ü©, h‚ÇÇ‚ü©,
end

/--
The cocone at `S` for the salk functor of `skyscraper_presheaf p‚ÇÄ S t` when `y ‚àà closure {p‚ÇÄ}`
-/
@[simps] def skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ {y : X} (h : p‚ÇÄ ‚§≥ y) :
  cocone ((open_nhds.inclusion y).op ‚ãô skyscraper_presheaf p‚ÇÄ S ts) :=
{ X := S,
  Œπ :=
  { app := Œª U, eq_to_hom
      begin
        dsimp,
        rw if_pos,
        exact h.mem_open U.unop.1.2 U.unop.2,
      end ‚â´ ùüô S,
    naturality' := Œª U V inc,
    begin
      simp only [functor.op_obj, unop_op, functor.comp_map, functor.op_map, skyscraper_presheaf_map,
        category.id_comp, eq_to_hom_trans, functor.const_obj_map, category.assoc],
      by_cases hV : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj V.unop,
      { have hU : p‚ÇÄ ‚àà unop ((open_nhds.inclusion y).op.obj U) := le_of_hom inc.unop hV,
        split_ifs,
        erw [category.comp_id, category.comp_id, category.comp_id, eq_to_hom_trans],
        refl },
      { split_ifs with hU;
        erw [category.comp_id, category.comp_id, category.comp_id, eq_comp_eq_to_hom,
          eq_comp_eq_to_hom];
        exact ts.hom_ext _ _, },
    end } }

/--
The canonical map `S ‚ü∂ (skyscraper_presheaf p‚ÇÄ S t).stalk y` when `y ‚àà closure {p‚ÇÄ}`
-/
noncomputable def skyscraper_presheaf_of_mem_closure‚ÇÄ_from {y : X} (h : p‚ÇÄ ‚§≥ y) :
  S ‚ü∂ (skyscraper_presheaf p‚ÇÄ S ts).stalk y :=
eq_to_hom (skyscraper_presheaf_obj_of_mem S ts (by tauto : p‚ÇÄ ‚àà ‚ä§)).symm ‚â´
  (skyscraper_presheaf p‚ÇÄ S ts).germ (‚ü®y, trivial‚ü© : (‚ä§ : opens X))

noncomputable lemma skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_is_colimit {y : X} (h : p‚ÇÄ ‚§≥ y) :
  is_colimit (skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ p‚ÇÄ S ts h) :=
{ desc := Œª c, (skyscraper_presheaf_of_mem_closure‚ÇÄ_from p‚ÇÄ S ts h ‚â´ colimit.desc _ _ : S ‚ü∂ c.X),
  fac' := Œª c U,
  begin
    dsimp,
    simp only [skyscraper_presheaf_of_mem_closure‚ÇÄ_from, presheaf.germ, category.comp_id,
      category.assoc, colimit.Œπ_desc, eq_to_hom_trans_assoc],
    have := c.Œπ.naturality (hom_of_le $ (le_top : unop U ‚â§ _)).op,
    dsimp at this,
    have h' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U) := h.mem_open U.unop.1.2 U.unop.2,
    have h'' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§ := trivial,
    split_ifs at this,
    rw [category.comp_id, category.id_comp, eq_to_hom_trans, eq_eq_to_hom_comp] at this,
    rw [this, eq_eq_to_hom_comp, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl,
      category.id_comp],
    congr,
  end,
  uniq' := Œª c f h,
  begin
    simp only [skyscraper_presheaf_of_mem_closure‚ÇÄ_from, presheaf.germ, category.assoc],
    erw [colimit.Œπ_desc],
    specialize h (op ‚ü®‚ä§, trivial‚ü©),
    erw [‚Üêh],
    simp only [skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_Œπ_app, category.assoc,
      eq_to_hom_trans_assoc, eq_to_hom_refl, category.id_comp],
    exact (category.id_comp _).symm,
  end }

/--
If `y ‚àà closure {p‚ÇÄ}`, then the stalk of `skyscraper_presheaf p‚ÇÄ S t` at `y` is `S`
-/
@[reducible]
noncomputable def skyscraper_presheaf_stalk_of_mem_closure‚ÇÄ {y : X} (h : p‚ÇÄ ‚§≥ y) :
  (skyscraper_presheaf p‚ÇÄ S ts).stalk y ‚âÖ S :=
colimit.iso_colimit_cocone ‚ü®_, (skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_is_colimit p‚ÇÄ S ts h)‚ü©

/--
The cocone at `*` for the salk functor of `skyscraper_presheaf p‚ÇÄ S t` when `y ‚àâ closure {p‚ÇÄ}`
-/
@[simps] def skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ
  {y : X} (h : ¬¨p‚ÇÄ ‚§≥ y) :
  cocone ((open_nhds.inclusion y).op ‚ãô skyscraper_presheaf p‚ÇÄ S ts) :=
{ X := star,
  Œπ :=
  { app := Œª U, ts.from _,
    naturality' := Œª U V inc, ts.hom_ext _ _ } }

/--
The canonical map `* ‚ü∂ (skyscraper_presheaf p‚ÇÄ S t).stalk y` when `y ‚àâ closure {p‚ÇÄ}`
-/
noncomputable def skyscraper_presheaf_of_not_mem_closure‚ÇÄ_from
  {y : X} (h : ¬¨p‚ÇÄ ‚§≥ y) :
  star ‚ü∂ (skyscraper_presheaf p‚ÇÄ S ts).stalk y :=
eq_to_hom (skyscraper_presheaf_obj_of_not_mem S ts $
  (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec).symm ‚â´
  (skyscraper_presheaf p‚ÇÄ S ts).germ (‚ü®y, (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.2‚ü© :
    (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.1)

noncomputable lemma skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_is_colimit
  {y : X} (h : ¬¨p‚ÇÄ ‚§≥ y) :
  is_colimit (skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ p‚ÇÄ S ts h) :=
{ desc := Œª c, ((eq_to_hom ((skyscraper_presheaf_obj_of_not_mem _ _
      (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec).symm)) ‚â´
    presheaf.germ (skyscraper_presheaf p‚ÇÄ S ts)
      ‚ü®y, (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.2‚ü© ‚â´ colimit.desc _ _ : star ‚ü∂ _),
  fac' := Œª c U,
  begin
    simp only [presheaf.germ, skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_Œπ_app],
    erw [colimit.Œπ_desc],
    dsimp,
    by_cases h' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U),
    { have eq1 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U)) S star) =
          eq_to_hom (if_pos h') ‚â´ ts.from _ := ts.hom_ext _ _,
      rw [eq1, category.assoc, eq_eq_to_hom_comp],
      have := c.Œπ.naturality (hom_of_le (le_top : U.unop ‚â§ ‚ä§)).op,
      dsimp at this,
      have h'' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§ := trivial,
      split_ifs at this,
      rw [category.comp_id, category.id_comp, eq_to_hom_trans, eq_eq_to_hom_comp] at this,
      rw this,
      clear this,
      have := c.Œπ.naturality
        (hom_of_le (le_top : (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some ‚â§ ‚ä§)).op,
      dsimp at this,
      have h''' : p‚ÇÄ ‚àâ (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.1 :=
        (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec,
      split_ifs at this,
      have eq2 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§) S star) =
        eq_to_hom (if_pos h'') ‚â´ ts.from _ := ts.hom_ext _ _,
      rw [category.comp_id, eq2] at this,
      simp only [‚Üêthis, ‚Üêcategory.assoc],
      convert eq_whisker _ _,
      { ext, refl, },
      { rw [eq_comp_eq_to_hom],
        exact ts.hom_ext _ _ } },
    { have eq1 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U)) S star) =
        eq_to_hom (if_neg h') ‚â´ ùüô star := ts.hom_ext _ _,
      have eq2 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§) S star) =
        eq_to_hom (if_pos trivial) ‚â´ ts.from _ := ts.hom_ext _ _,
      have eq3 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some) S star) =
        eq_to_hom (if_neg (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec) ‚â´ ùüô star :=
      ts.hom_ext _ _,
      rw [eq1, category.comp_id, ‚Üêcategory.assoc, eq_to_hom_trans],
      have := c.Œπ.naturality (hom_of_le (inf_le_left :
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some ‚äì unop U ‚â§
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some)).op,
      dsimp at this,
      rw [dite_comp, category.comp_id] at this,
      simp_rw [category.id_comp, eq_to_hom_trans, eq3, category.comp_id, eq_to_hom_trans] at this,


      generalize_proofs h‚ÇÅ h‚ÇÇ h‚ÇÉ,
      have eq_coe : c.Œπ.app (op ‚ü®‚Üë(h‚ÇÅ.some), h‚ÇÉ‚ü©) =
        eq_to_hom (by { congr, ext, refl }) ‚â´ c.Œπ.app (op h‚ÇÅ.some) ‚â´
          eq_to_hom (by { congr, ext, refl }),
      { symmetry,
        rw [eq_eq_to_hom_comp],
        have e := c.Œπ.naturality (eq_to_hom (by {ext, refl}) :
          (‚ü®‚Üëh‚ÇÅ.some, h‚ÇÉ‚ü© : open_nhds y) ‚ü∂ h‚ÇÅ.some).op,
        dsimp at e,
        split_ifs at e with temp,
        { exfalso, exact (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec temp },
        rw [show ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj h‚ÇÅ.some) S star) =
          eq_to_hom (if_neg temp) ‚â´ ùüô star, from ts.hom_ext _ _, category.comp_id,
          category.comp_id, eq_to_hom_trans] at e,
        rw [‚Üêe, category.assoc, eq_eq_to_hom_comp, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl,
          eq_to_hom_refl, category.comp_id, category.id_comp], },
      rw [eq_coe, ‚Üêthis, ‚Üêcategory.assoc, eq_to_hom_trans, eq_eq_to_hom_comp, dite_comp],
      have h‚ÇÖ : p‚ÇÄ ‚àâ (open_nhds.inclusion y).obj h‚ÇÅ.some := h‚ÇÅ.some_spec,
      have h‚ÇÜ : p‚ÇÄ ‚àâ (open_nhds.inclusion y).obj (h‚ÇÅ.some ‚äì unop U) := Œª ‚ü®r, _‚ü©, h‚ÇÖ r,
      clear this,
      split_ifs,
      { exfalso, exact h‚ÇÖ (by assumption) },
      { exfalso, exact h‚ÇÜ (by assumption) },
      { exfalso, exact h‚ÇÖ (by assumption) },
      rw [eq_comp_eq_to_hom, eq_eq_to_hom_comp, ‚Üêcategory.assoc, ‚Üêcategory.assoc, eq_to_hom_trans,
        eq_to_hom_refl, category.comp_id],
      have := c.Œπ.naturality (hom_of_le (inf_le_right :
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some ‚äì unop U ‚â§ unop U)).op,
      dsimp at this,
      rw [dite_comp, category.comp_id] at this,
      rw [‚Üêthis, comp_dite],
      clear this,
      split_ifs,
      rw [eq1, category.comp_id, eq_to_hom_trans, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl,
        category.id_comp] }
  end,
  uniq' := Œª c f H,
  begin
    erw [colimit.Œπ_desc, ‚ÜêH],
    simp only [skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_Œπ_app],
    dsimp,
    have : ts.from (ite (p‚ÇÄ ‚àà (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.1) S star) =
      eq_to_hom (if_neg (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec) ‚â´ ùüô star :=
    ts.hom_ext _ _,
    erw [this, category.comp_id, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl, category.id_comp]
  end }

/--
If `y ‚àâ closure {p‚ÇÄ}`, then the stalk of `skyscraper_presheaf p‚ÇÄ S t` at `y` is `*`
-/
@[reducible]
noncomputable def skyscraper_presheaf_stalk_of_not_mem_closure‚ÇÄ
  {y : X} (h : ¬¨p‚ÇÄ ‚§≥ y) :
  (skyscraper_presheaf p‚ÇÄ S ts).stalk y ‚âÖ star :=
colimit.iso_colimit_cocone ‚ü®_, (skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_is_colimit _ S _ h)‚ü©

end

section

/-!
Skyscraper sheaf alternatively can be defined as the pushforward of a sheaf on a single point space
`{p‚ÇÄ}` defined by `‚àÖ ‚Ü¶ *` and `{p‚ÇÄ} ‚Ü¶ S` under the inclusion `{p‚ÇÄ} ‚Ü™ X`.
-/

open topological_space
open category_theory category_theory.limits
open Top
open opposite
open_locale classical

universes u v w

variables {X : Top.{u}} (p‚ÇÄ : X) {C : Type v} [category.{w} C] (S : C)
variables {star : C} (ts : is_terminal star)

/--The topological space with on a point `{p‚ÇÄ}`. Hence the only open sets are ‚àÖ and ‚ä§.-/
def single_point_space : Top := ‚ü®({p‚ÇÄ} : set X), infer_instance‚ü©

instance : inhabited (single_point_space p‚ÇÄ) := ‚ü®‚ü®p‚ÇÄ, rfl‚ü©‚ü©
instance : unique (single_point_space p‚ÇÄ) := unique.subtype_eq p‚ÇÄ

/--
The presheaf on a single point space `{p‚ÇÄ}` defined by `‚àÖ ‚Ü¶ *` and `{p‚ÇÄ} ‚Ü¶ S`
-/
@[simps]
noncomputable def single_point_presheaf : presheaf C (single_point_space p‚ÇÄ) :=
{ obj := Œª U, if U.unop ‚â† ‚ä• then S else star,
  map := Œª U V inc, if h : V.unop ‚â† ‚ä•
    then eq_to_hom (if_pos $ Œª r, h $ le_bot_iff.mp $ r ‚ñ∏ le_of_hom inc.unop) ‚â´
      ùüô S ‚â´ eq_to_hom (if_pos h).symm
    else ts.from _ ‚â´ ùüô star ‚â´ eq_to_hom (if_neg h).symm,
  map_id' := Œª U,
  begin
    split_ifs,
    { rw [category.id_comp, eq_to_hom_trans, eq_to_hom_refl] },
    { rw [category.id_comp, eq_comp_eq_to_hom, category.id_comp],
      exact ts.hom_ext _ _, },
  end,
  map_comp' := Œª U V W inc1 inc2,
  begin
    rw comp_dite,
    by_cases hW : W.unop ‚â† ‚ä•,
    { have hV : V.unop ‚â† ‚ä•,
      { intros r,
        refine hW (eq_bot_iff.mpr (r ‚ñ∏ le_of_hom inc2.unop)), },
      have hU : U.unop ‚â† ‚ä•,
      { intros r,
        refine hW (eq_bot_iff.mpr (r ‚ñ∏ le_of_hom (inc1 ‚â´ inc2).unop)) },
      split_ifs,
      simp only [category.id_comp, eq_to_hom_trans], },
    { split_ifs;
      rw [category.id_comp, eq_comp_eq_to_hom, category.assoc, category.assoc, eq_to_hom_trans,
        eq_to_hom_refl, category.comp_id];
      exact ts.hom_ext _ _, },
  end }

/--
The trivial inclusion `{p‚ÇÄ} ‚Ü™ X`.
-/
@[simps] def single_point_inclusion : single_point_space p‚ÇÄ ‚ü∂ X :=
{ to_fun := Œª p, p.1,
  continuous_to_fun := by continuity }

/--
The morphism from skyscraper presheaf to pushforward sheaf
-/
@[simps] noncomputable def skyscraper_presheaf_to_pushforward :
  skyscraper_presheaf p‚ÇÄ S ts ‚ü∂ (single_point_inclusion p‚ÇÄ) _* (single_point_presheaf p‚ÇÄ S ts) :=
{ app := Œª U, if h : p‚ÇÄ ‚àà U.unop
    then eq_to_hom (skyscraper_presheaf_obj_of_mem _ _ h) ‚â´ ùüô S ‚â´ eq_to_hom
    begin
      dsimp,
      rw if_pos,
      erw opens.map_obj _ _ U.unop.2,
      change _ ‚â† ‚ä•,
      rw opens.ne_bot_iff_nonempty,
      refine ‚ü®‚ü®p‚ÇÄ, rfl‚ü©, _‚ü©,
      erw set.mem_preimage,
      exact h,
    end
    else ts.from _ ‚â´ eq_to_hom
    begin
      dsimp,
      rw if_neg,
      push_neg,
      rw ‚Üêopens.not_nonempty_iff_eq_bot,
      rintros ‚ü®‚ü®x, hx‚ÇÅ‚ü©, hx‚ÇÇ‚ü©,
      rw set.mem_singleton_iff at hx‚ÇÅ,
      subst hx‚ÇÅ,
      erw set.mem_preimage at hx‚ÇÇ,
      exact h hx‚ÇÇ,
    end,
  naturality' := Œª U V inc,
  begin
    by_cases hV : p‚ÇÄ ‚àà V.unop,
    { have hU : p‚ÇÄ ‚àà U.unop := le_of_hom inc.unop hV,
      have hV' : ¬¨(opens.map (single_point_inclusion p‚ÇÄ)).obj (unop V) = ‚ä•,
      { change _ ‚â† ‚ä•,
        rw opens.ne_bot_iff_nonempty,
        refine ‚ü®‚ü®p‚ÇÄ, rfl‚ü©, _‚ü©,
        erw set.mem_preimage,
        exact hV, },
      rw [comp_dite, dite_comp],
      split_ifs,
      { exfalso, exact hV' h, },
      { dsimp,
        split_ifs,
        simp only [eq_to_hom_trans, category.id_comp], }, },
    { split_ifs;
      rw [‚Üêcategory.assoc, eq_comp_eq_to_hom];
      exact ts.hom_ext _ _ },
  end }

/--
The morphism from pushforward sheaf to skyscraper presheaf
-/
@[simps] noncomputable def pushforward_to_skyscraper_presheaf :
  (single_point_inclusion p‚ÇÄ) _* (single_point_presheaf p‚ÇÄ S ts) ‚ü∂
  skyscraper_presheaf p‚ÇÄ S ts :=
{ app := Œª U, if h : p‚ÇÄ ‚àà unop U
    then eq_to_hom
    begin
      dsimp,
      rw if_pos,
      erw opens.map_obj _ _ U.unop.2,
      change _ ‚â† ‚ä•,
      rw opens.ne_bot_iff_nonempty,
      refine ‚ü®‚ü®p‚ÇÄ, rfl‚ü©, _‚ü©,
      erw set.mem_preimage,
      exact h,
    end ‚â´ ùüô S ‚â´ eq_to_hom (skyscraper_presheaf_obj_of_mem _ _ h).symm
    else ts.from _ ‚â´ eq_to_hom (skyscraper_presheaf_obj_of_not_mem _ _ h).symm,
  naturality' := Œª U V inc,
  begin
    rw [comp_dite, dite_comp],
    by_cases hV : p‚ÇÄ ‚àà V.unop,
    { have hU : p‚ÇÄ ‚àà U.unop := le_of_hom inc.unop hV,
      have hV' : ¬¨(opens.map (single_point_inclusion p‚ÇÄ)).obj (unop V) = ‚ä•,
      { change _ ‚â† ‚ä•,
        rw opens.ne_bot_iff_nonempty,
        refine ‚ü®‚ü®p‚ÇÄ, rfl‚ü©, _‚ü©,
        erw set.mem_preimage,
        exact hV, },
      split_ifs,
      { exfalso, exact hV' h, },
      { dsimp,
        split_ifs;
        rw [category.id_comp, eq_to_hom_trans, category.id_comp, eq_to_hom_trans, eq_to_hom_trans,
          category.id_comp, eq_to_hom_trans, eq_to_hom_trans, eq_to_hom_trans], }, },
    { split_ifs;
      rw [‚Üêcategory.assoc, eq_comp_eq_to_hom];
      exact ts.hom_ext _ _ },
  end }

/--
Skyscraper presheaf is isomorphic to pushforward of sheaf on single point.
-/
noncomputable def skyscraper_presheaf_as_pushforward :
  skyscraper_presheaf p‚ÇÄ S ts ‚âÖ (single_point_inclusion p‚ÇÄ) _* (single_point_presheaf p‚ÇÄ S ts) :=
{ hom := skyscraper_presheaf_to_pushforward p‚ÇÄ S ts,
  inv := pushforward_to_skyscraper_presheaf p‚ÇÄ S ts,
  hom_inv_id' :=
  begin
    ext U,
    dsimp,
    split_ifs,
    { rw [category.id_comp, eq_to_hom_trans, category.id_comp, eq_to_hom_trans, eq_to_hom_trans,
        eq_to_hom_refl], },
    { rw [‚Üêcategory.assoc, eq_comp_eq_to_hom],
      exact ts.hom_ext _ _, },
  end,
  inv_hom_id' :=
  begin
    ext U,
    dsimp,
    by_cases hU : p‚ÇÄ ‚àà U.unop,
    { split_ifs;
      rw [category.id_comp, eq_to_hom_trans, category.id_comp, eq_to_hom_trans, eq_to_hom_trans,
          eq_to_hom_refl], },
    { split_ifs;
      rw [‚Üêcategory.assoc, eq_comp_eq_to_hom];
      exact ts.hom_ext _ _, },
  end }

end

section adjoints

open topological_space
open category_theory category_theory.limits
open Top
open opposite

universes u v

variables {X : Top.{u}} (p‚ÇÄ : X) {C : Type v} [category.{u} C]
variables {star : C} (ts : is_terminal star)
variable [Œ† (U : opens X), decidable (p‚ÇÄ ‚àà U)]

@[simps]
def skyscraper_presheaf_functor : C ‚•§ presheaf C X :=
{ obj := Œª S, skyscraper_presheaf p‚ÇÄ S ts,
  map := Œª x y f,
  { app := Œª U, if h : p‚ÇÄ ‚àà U.unop
    then eq_to_hom (skyscraper_presheaf_obj_of_mem _ _ h) ‚â´ f ‚â´
      eq_to_hom (skyscraper_presheaf_obj_of_mem _ _ h).symm
    else ts.from _ ‚â´ eq_to_hom (skyscraper_presheaf_obj_of_not_mem _ _ h).symm,
    naturality' := Œª U V inc,
    begin
      dsimp,
      simp_rw [category.id_comp, eq_to_hom_trans],
      by_cases hV : p‚ÇÄ ‚àà V.unop,
      { have hU : p‚ÇÄ ‚àà U.unop := le_of_hom inc.unop hV,
        split_ifs,
        rw [‚Üêcategory.assoc, eq_to_hom_trans, category.assoc, category.assoc, eq_to_hom_trans],
        refl, },
      { split_ifs;
        rw [‚Üêcategory.assoc, eq_comp_eq_to_hom];
        exact ts.hom_ext _ _ }
    end },
  map_id' := Œª c,
  begin
    ext U,
    dsimp,
    split_ifs,
    { simp, },
    { rw [eq_comp_eq_to_hom],
      exact ts.hom_ext _ _ },
  end,
  map_comp' := Œª x y z f g,
  begin
    ext U,
    dsimp,
    split_ifs,
    { simp },
    { rw [eq_comp_eq_to_hom],
      exact ts.hom_ext _ _ },
  end }

example : true := trivial

@[simps]
def skyscraper_sheaf_functor : C ‚•§ sheaf C X :=
{ obj := Œª S, skyscraper_sheaf p‚ÇÄ S ts,
  map := Œª x y f, ‚ü®(skyscraper_presheaf_functor p‚ÇÄ ts).map f‚ü©,
  map_id' := Œª c,
  begin
    ext1,
    exact (skyscraper_presheaf_functor p‚ÇÄ ts).map_id c,
  end,
  map_comp' := Œª x y z f g,
  begin
    ext1,
    exact (skyscraper_presheaf_functor p‚ÇÄ ts).map_comp f g,
  end }

variable [has_colimits C]

@[simps]
noncomputable def from_stalk_to_to_skyscraper_presheaf {ùìï : presheaf C X} {c : C}
  (f : ùìï.stalk p‚ÇÄ ‚ü∂ c) : ùìï ‚ü∂ skyscraper_presheaf p‚ÇÄ c ts :=
{ app := Œª U, if h : p‚ÇÄ ‚àà U.unop
  then ùìï.germ ‚ü®p‚ÇÄ, h‚ü© ‚â´ f ‚â´ eq_to_hom (skyscraper_presheaf_obj_of_mem _ _ h).symm
  else ts.from _ ‚â´ eq_to_hom (skyscraper_presheaf_obj_of_not_mem _ _ h).symm,
  naturality' := Œª U V inc,
  begin
    dsimp,
    by_cases hV : p‚ÇÄ ‚àà V.unop,
    { have hU : p‚ÇÄ ‚àà U.unop := le_of_hom inc.unop hV,
      split_ifs,
      erw [‚Üêcategory.assoc, ùìï.germ_res inc.unop, category.id_comp, eq_to_hom_trans,
        category.assoc, category.assoc, eq_to_hom_trans],
      refl, },
    { split_ifs,
      rw [‚Üêcategory.assoc, eq_comp_eq_to_hom, category.assoc, category.assoc, eq_to_hom_trans,
        eq_to_hom_refl, category.comp_id],
      exact ts.hom_ext _ _ },
  end }

@[reducible]
noncomputable def to_skyscraper_presheaf_to_from_stalk {ùìï : presheaf C X} {c : C}
  (f : ùìï ‚ü∂ skyscraper_presheaf p‚ÇÄ c ts) : ùìï.stalk p‚ÇÄ ‚ü∂ c :=
let CC : cocone ((open_nhds.inclusion p‚ÇÄ).op ‚ãô ùìï) :=
{ X := c,
  Œπ :=
  { app := Œª U, f.app (op U.unop.1) ‚â´ eq_to_hom
    begin
      dsimp,
      rw if_pos,
      exact U.unop.2,
    end,
    naturality' := Œª U V inc,
    begin
      dsimp,
      rw [category.comp_id, ‚Üêcategory.assoc, eq_comp_eq_to_hom, category.assoc, eq_to_hom_trans],
      generalize_proofs h,
      erw f.naturality,
      dsimp,
      have hV : p‚ÇÄ ‚àà (open_nhds.inclusion p‚ÇÄ).obj V.unop := V.unop.2,
      split_ifs,
      rw [category.id_comp, eq_to_hom_trans, eq_comp_eq_to_hom, category.assoc, eq_to_hom_trans,
        eq_to_hom_refl, category.comp_id],
      refl,
    end} } in
colimit.desc _ CC

lemma from_stalk_to_to_skyscraper_presheaf_to_skyscraper_presheaf_to_from_stalk
  {ùìï : presheaf C X} {c : C} (f : ùìï.stalk p‚ÇÄ ‚ü∂ c) :
to_skyscraper_presheaf_to_from_stalk p‚ÇÄ ts (from_stalk_to_to_skyscraper_presheaf p‚ÇÄ ts f) = f :=
begin
  ext U,
  dsimp,
  simp only [subtype.val_eq_coe, unop_op, colimit.Œπ_desc, from_stalk_to_to_skyscraper_presheaf_app],
  split_ifs,
  { rw [category.assoc, category.assoc, eq_to_hom_trans, eq_to_hom_refl, category.comp_id],
    congr,
    dunfold presheaf.germ,
    dsimp,
    congr,
    convert op_unop _,
    ext,
    refl, },
  { exfalso, exact h U.unop.2,  }
end

lemma to_skyscraper_presheaf_to_from_stalk_from_stalk_to_to_skyscraper_presheaf
  {ùìï : presheaf C X} {c : C} (f : ùìï ‚ü∂ skyscraper_presheaf p‚ÇÄ c ts) :
from_stalk_to_to_skyscraper_presheaf p‚ÇÄ ts (to_skyscraper_presheaf_to_from_stalk p‚ÇÄ ts f) = f :=
begin
  ext U,
  dsimp,
  split_ifs,
  { rw [to_skyscraper_presheaf_to_from_stalk],
    dsimp,
    dunfold presheaf.germ,
    rw [‚Üêcategory.assoc, colimit.Œπ_desc],
    dsimp,
    rw [category.assoc, eq_to_hom_trans, eq_to_hom_refl, category.comp_id], },
  { rw [eq_comp_eq_to_hom],
    exact ts.hom_ext _ _ , }
end

@[simps]
noncomputable def stalk_skyscraper_presheaf_adj_unit :
  ùü≠ (presheaf C X) ‚ü∂ presheaf.stalk_functor C p‚ÇÄ ‚ãô skyscraper_presheaf_functor p‚ÇÄ ts :=
{ app := Œª ùìï,
  { app := Œª U, if h : p‚ÇÄ ‚àà U.unop
    then ùìï.germ ‚ü®p‚ÇÄ, h‚ü© ‚â´ eq_to_hom (if_pos h).symm
    else ts.from _ ‚â´ eq_to_hom (if_neg h).symm,
    naturality' := Œª U V inc,
    begin
      dsimp,
      by_cases hV : p‚ÇÄ ‚àà V.unop,
      { have hU : p‚ÇÄ ‚àà U.unop := le_of_hom inc.unop hV,
        split_ifs,
        erw [‚Üêcategory.assoc, ùìï.germ_res inc.unop, category.id_comp, eq_to_hom_trans,
          category.assoc, eq_to_hom_trans],
        congr, },
      { split_ifs,
        rw [‚Üêcategory.assoc, eq_comp_eq_to_hom],
        exact ts.hom_ext _ _, },
    end },
  naturality' := Œª ùìï ùìñ f,
  begin
    ext U,
    dsimp,
    split_ifs,
    { rw [‚Üêcategory.assoc, eq_comp_eq_to_hom],
      simp only [category.assoc, eq_to_hom_trans, eq_to_hom_refl, category.comp_id],
      rw [‚Üêcategory.assoc _ _ ((presheaf.stalk_functor C p‚ÇÄ).map f), eq_to_hom_trans,
        eq_to_hom_refl, category.id_comp],
      erw [colimit.Œπ_map],
      congr, },
    { rw [‚Üêcategory.assoc, eq_comp_eq_to_hom],
      exact ts.hom_ext _ _ },
  end }

@[simps]
noncomputable def stalk_skyscraper_presheaf_adj_counit :
  skyscraper_presheaf_functor p‚ÇÄ ts ‚ãô presheaf.stalk_functor C p‚ÇÄ ‚ü∂ ùü≠ C :=
{ app := Œª c, (skyscraper_presheaf_stalk_of_mem_closure‚ÇÄ p‚ÇÄ c ts (specializes_rfl : p‚ÇÄ ‚§≥ p‚ÇÄ)).hom,
  naturality' := Œª x y f,
  begin
    ext U,
    dsimp,
    simp only [colimit.iso_colimit_cocone_Œπ_hom_assoc,
      skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_Œπ_app, category.assoc],
    erw [category.id_comp, ‚Üêcategory.assoc, colimit.Œπ_map],
    dsimp,
    split_ifs,
    { rw [category.assoc, skyscraper_presheaf_stalk_of_mem_closure‚ÇÄ,
        colimit.iso_colimit_cocone_Œπ_hom],
      dsimp,
      simpa, },
    { exfalso, exact h U.unop.2 }
  end }

noncomputable def stalk_skyscraper_presheaf_adj :
  presheaf.stalk_functor C p‚ÇÄ ‚ä£ skyscraper_presheaf_functor p‚ÇÄ ts :=
{ hom_equiv := Œª ùìï c, ‚ü®from_stalk_to_to_skyscraper_presheaf p‚ÇÄ ts,
    to_skyscraper_presheaf_to_from_stalk p‚ÇÄ ts,
    from_stalk_to_to_skyscraper_presheaf_to_skyscraper_presheaf_to_from_stalk p‚ÇÄ ts,
    to_skyscraper_presheaf_to_from_stalk_from_stalk_to_to_skyscraper_presheaf p‚ÇÄ ts‚ü©,
  unit := stalk_skyscraper_presheaf_adj_unit p‚ÇÄ ts,
  counit := stalk_skyscraper_presheaf_adj_counit p‚ÇÄ ts,
  hom_equiv_unit' := Œª ùìï ùìñ f,
  begin
    ext U,
    dsimp,
    split_ifs,
    { simp, },
    { rw [eq_comp_eq_to_hom],
      exact ts.hom_ext _ _ },
  end,
  hom_equiv_counit' := Œª ùìï c g,
  begin
    ext U,
    dsimp,
    erw [colimit.Œπ_desc, ‚Üêcategory.assoc, colimit.Œπ_map, category.assoc,
      colimit.iso_colimit_cocone_Œπ_hom],
    dsimp,
    rw [category.comp_id],
    refl,
  end }

example : true := trivial

noncomputable def stalk_skyscraper_sheaf_adj :
  sheaf.forget C X ‚ãô presheaf.stalk_functor _ p‚ÇÄ ‚ä£ skyscraper_sheaf_functor p‚ÇÄ ts :=
{ hom_equiv := Œª ùìï c,
  ‚ü®Œª f, ‚ü®from_stalk_to_to_skyscraper_presheaf p‚ÇÄ ts f‚ü©,
   Œª g, to_skyscraper_presheaf_to_from_stalk p‚ÇÄ ts g.1,
   Œª f, from_stalk_to_to_skyscraper_presheaf_to_skyscraper_presheaf_to_from_stalk
     p‚ÇÄ ts f,
   begin
     intros g,
     ext1,
     exact to_skyscraper_presheaf_to_from_stalk_from_stalk_to_to_skyscraper_presheaf p‚ÇÄ ts g.1,
   end‚ü©,
  unit :=
  { app := Œª ùìï, ‚ü®(stalk_skyscraper_presheaf_adj_unit p‚ÇÄ ts).app ùìï.1‚ü©,
    naturality' := Œª ùìê ùìë ‚ü®f‚ü©,
    begin
      ext1,
      dsimp,
      exact (stalk_skyscraper_presheaf_adj_unit p‚ÇÄ ts).naturality f,
    end },
  counit := stalk_skyscraper_presheaf_adj_counit p‚ÇÄ ts,
  hom_equiv_unit' :=
  begin
    intros ùìê c f,
    ext1,
    exact (stalk_skyscraper_presheaf_adj p‚ÇÄ ts).hom_equiv_unit,
  end,
  hom_equiv_counit' := Œª ùìê c f, (stalk_skyscraper_presheaf_adj p‚ÇÄ ts).hom_equiv_counit }

end adjoints

section injective

open_locale zero_object
open topological_space
open category_theory category_theory.limits
open Top
open opposite

universe u
variables {X : Top.{u}} (p‚ÇÄ : X) [Œ† (U : opens X), decidable (p‚ÇÄ ‚àà U)]

lemma skyscraper_presheaf_in_Ab_injective (S : Ab.{u}) [injective S] :
  injective (skyscraper_sheaf p‚ÇÄ S (is_zero.is_terminal (is_zero_zero _) : is_terminal (0 : Ab))) :=
injective.injective_of_adjoint
    (stalk_skyscraper_sheaf_adj p‚ÇÄ (is_zero.is_terminal (is_zero_zero _) : is_terminal (0 : Ab)))

end injective
