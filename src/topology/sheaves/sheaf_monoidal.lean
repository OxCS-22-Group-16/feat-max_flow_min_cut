import topology.sheaves.presheaf_monoidal
import topology.sheaves.sheaf_condition.unique_gluing

noncomputable theory

namespace Top.sheaf

open Top Top.presheaf topological_space
open category_theory category_theory.monoidal_category category_theory.limits

universe u

variables {X : Top.{u}}

alias presheaf.monoidal.ihom_obj ‚Üê presheaf.ihom_obj

lemma restrict_is_sheaf {F : Top.presheaf AddCommGroup.{u} X} (hF : is_sheaf F) (U : opens X) :
  is_sheaf (F.restrict U) :=
sorry

lemma ihom_obj_is_sheaf_of_is_sheaf {F G : Top.presheaf AddCommGroup.{u} X}
  (hF : is_sheaf F) (hG : is_sheaf G) : is_sheaf (presheaf.ihom_obj F G) :=
sorry -- probably harder


instance : monoidal_category ((opens X)·µí·µñ ‚•§ AddCommGroup.{u}) :=
presheaf.monoidal.monoidal_presheaf_AddCommGroup

instance : preserves_limits (category_theory.forget AddCommGroup.{u}) :=
AddCommGroup.forget_preserves_limits.{u u}

instance (U : opens X) : preserves_colimits_of_shape ((opens.grothendieck_topology X).cover U)·µí·µñ
  (category_theory.forget AddCommGroup.{u}) :=
begin
  haveI := AddCommGroup.filtered_colimits.forget_preserves_filtered_colimits.{u},
  apply_instance
end

@[simps] def sheaf_iso_mk {F G : sheaf AddCommGroup.{u} X} (Œπ : F.val ‚âÖ G.val) : F ‚âÖ G :=
{ hom := ‚ü®Œπ.hom‚ü©,
  inv := ‚ü®Œπ.inv‚ü©,
  hom_inv_id' := Sheaf.hom.ext _ _ $ Œπ.hom_inv_id,
  inv_hom_id' := Sheaf.hom.ext _ _ $ Œπ.inv_hom_id }

@[simps] def presheaf_to_Sheaf_map_iso {F G : Top.presheaf AddCommGroup.{u} X} (Œπ : F ‚âÖ G) :
  (presheaf_to_Sheaf _ _).obj F ‚âÖ (presheaf_to_Sheaf _ _).obj G :=
sheaf_iso_mk
{ hom := ((presheaf_to_Sheaf _ _).map Œπ.hom).val,
  inv := ((presheaf_to_Sheaf _ _).map Œπ.inv).val,
  hom_inv_id' :=
  begin
    ext U x,
    change ((presheaf_to_Sheaf _ _).map Œπ.hom ‚â´ (presheaf_to_Sheaf _ _).map _).val.app U x = x,
    rw [‚Üê(presheaf_to_Sheaf _ _).map_comp, Œπ.hom_inv_id, (presheaf_to_Sheaf _ _).map_id],
    refl,
  end,
  inv_hom_id' :=
  begin
    ext U x,
    change ((presheaf_to_Sheaf _ _).map Œπ.inv ‚â´ (presheaf_to_Sheaf _ _).map _).val.app U x = x,
    rw [‚Üê(presheaf_to_Sheaf _ _).map_comp, Œπ.inv_hom_id, (presheaf_to_Sheaf _ _).map_id],
    refl,
  end, }

namespace constructions

@[simps] def tensor_obj' (F G : sheaf AddCommGroup.{u} X) : sheaf AddCommGroup.{u} X :=
(presheaf_to_Sheaf _ _).obj $ F.val ‚äó G.val

local infixr (name := tensor_obj') `‚äô`:50 := tensor_obj'

@[simps] def tensor_obj'_swap (F G : sheaf AddCommGroup.{u} X) :
  F ‚äô G ‚âÖ G ‚äô F :=
presheaf_to_Sheaf_map_iso $ nat_iso.of_components (Œª U,
{ hom := (tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (F.val.obj U) _ _ $
    AddCommGroup.monoidal.curry $ ùüô _).to_add_monoid_hom,
  inv := (tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (G.val.obj U) _ _ $
    AddCommGroup.monoidal.curry $ ùüô _).to_add_monoid_hom,
  hom_inv_id' :=
  begin
    ext x,
    induction x using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero] },
    { simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
        AddCommGroup.monoidal.curry_apply_apply, id_apply] },
    { rw [map_add, ha, hb, map_add] },
  end,
  inv_hom_id' :=
  begin
    ext x,
    induction x using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero] },
    { simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
        AddCommGroup.monoidal.curry_apply_apply, id_apply] },
    { rw [map_add, ha, hb, map_add] },
  end }) $ Œª U V inc,
begin
  ext x,
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
      AddCommGroup.monoidal.curry_apply_apply, id_apply, monoidal.tensor_obj_map,
      AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul], },
  { rw [map_add, ha, hb, map_add] },
end

open category_theory.grothendieck_topology

@[simps] def tensor_hom' {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : sheaf AddCommGroup.{u} X}
  (Œ± : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (Œ≤ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) : (X‚ÇÅ ‚äô X‚ÇÇ ‚ü∂ Y‚ÇÅ ‚äô Y‚ÇÇ) :=
‚ü®sheafify_map _ $ Œ±.val ‚äó Œ≤.val‚ü©

local infixr (name := tensor_hom') `‚äô`:81 := tensor_hom'

lemma tensor_id' (F G : sheaf AddCommGroup.{u} X) : (ùüô F) ‚äô (ùüô G) = ùüô (tensor_obj' F G) :=
Sheaf.hom.ext _ _ $ by simpa

lemma tensor_comp' {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : sheaf AddCommGroup.{u} X}
  (Œ±‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (Œ±‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (Œ≤‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (Œ≤‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) :
  (Œ±‚ÇÅ ‚â´ Œ≤‚ÇÅ) ‚äô (Œ±‚ÇÇ ‚â´ Œ≤‚ÇÇ) = Œ±‚ÇÅ ‚äô Œ±‚ÇÇ ‚â´ Œ≤‚ÇÅ ‚äô Œ≤‚ÇÇ :=
Sheaf.hom.ext _ _ $ by simp

@[simps] def tensor_unit' : sheaf AddCommGroup.{u} X :=
(presheaf_to_Sheaf _ AddCommGroup).obj (ùüô_ _)

@[simps] def tensor_left' (F : sheaf AddCommGroup.{u} X) :
  sheaf AddCommGroup.{u} X ‚•§ sheaf AddCommGroup.{u} X :=
{ obj := Œª G, tensor_obj' F G,
  map := Œª _ _ Œ±, tensor_hom' (ùüô F) Œ±,
  map_id' := Œª G, Sheaf.hom.ext _ _ $ by simpa,
  map_comp' := Œª _ _ _ Œ± Œ≤, Sheaf.hom.ext _ _ $ by simp }

@[simps] def ihom_obj' (F G : sheaf AddCommGroup.{u} X) : sheaf AddCommGroup.{u} X :=
{ val := presheaf.monoidal.ihom_obj F.val G.val,
  cond := ihom_obj_is_sheaf_of_is_sheaf F.cond G.cond }

local notation `‚ü¶` F, G `‚üß` := ihom_obj' F G

@[simps] def ihom' (F : sheaf AddCommGroup.{u} X) :
  sheaf AddCommGroup.{u} X ‚•§ sheaf AddCommGroup.{u} X :=
{ obj := ihom_obj' F,
  map := Œª G‚ÇÅ G‚ÇÇ Œ±, ‚ü®presheaf.monoidal.ihom_map _ _ _ Œ±.val‚ü©,
  map_id' := Œª G,
  begin
    ext U x y z,
    simp only [Sheaf.category_theory.category_id_val, presheaf.monoidal.ihom_map_app_2,
      presheaf.monoidal.ihom_map_app_apply_app, presheaf.monoidal.ihom_map'_app_apply,
      nat_trans.id_app, id_apply],
    simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.val.map_comp],
    congr' 1,
    convert category.comp_id _,
    convert G.val.map_id _,
  end,
  map_comp' := Œª G‚ÇÅ G‚ÇÇ G‚ÇÉ Œ± Œ≤,
  begin
    ext U x y z,
    simp only [Sheaf.category_theory.category_comp_val, presheaf.monoidal.ihom_map_app_2,
      presheaf.monoidal.ihom_map_app_apply_app, presheaf.monoidal.ihom_map'_app_apply,
      nat_trans.comp_app, comp_apply],
    simp only [‚Üêcomp_apply, category.assoc],
    rw [‚Üêcategory.assoc (G‚ÇÇ.val.map _), ‚ÜêG‚ÇÇ.val.map_comp],
    congr' 4,
    erw ‚ÜêŒ≤.val.naturality,
    rw [‚Üêcategory.assoc, ‚ÜêG‚ÇÇ.val.map_comp],
    refl,
  end }

namespace tensor_left'_ihom'_adj

variables (F : sheaf AddCommGroup.{u} X)

local notation (name := local_adj) `adj` :=
  adjunction.comp (presheaf.monoidal.tensor_ihom_adj F.val)
    (sheafification_adjunction (opens.grothendieck_topology X) _)

@[simps] def hom_equiv'.from_tensor (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X) (Œ± : (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  G‚ÇÅ ‚ü∂ ‚ü¶F, G‚ÇÇ‚üß :=
Sheaf.hom.mk $ (adj .hom_equiv _ G‚ÇÇ Œ±)

@[simps] def hom_equiv'.to_tensor (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X) (Œ± : G‚ÇÅ ‚ü∂ ‚ü¶F, G‚ÇÇ‚üß) :
  (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ :=
Sheaf.hom.mk $ sheafify_lift _
  (((presheaf.monoidal.tensor_ihom_adj F.val).hom_equiv G‚ÇÅ.val G‚ÇÇ.val).symm Œ±.val) G‚ÇÇ.cond

lemma hom_equiv'.left_inv_aux (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X)
  (Œ± : (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : (opens X)·µí·µñ)
  (x : (F.val ‚äó G‚ÇÅ.val).obj U) :
  (((opens.grothendieck_topology X).to_sheafify (F.val ‚äó G‚ÇÅ.val) ‚â´ Œ±.val).app U) x =
  (((((monoidal.tensor_ihom_adj F.val).hom_equiv G‚ÇÅ.val G‚ÇÇ.val).symm)
      (hom_equiv'.from_tensor F G‚ÇÅ G‚ÇÇ Œ±).val).app U) x:=
begin
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { simp only [nat_trans.comp_app, comp_apply, monoidal.tensor_ihom_adj_hom_equiv,
      hom_equiv'.from_tensor_val, adjunction.hom_equiv_unit, functor.comp_map,
      monoidal.ihom_map_2, monoidal.tensor_ihom_adj.hom_equiv'_symm_apply,
      monoidal.tensor_ihom_adj.hom_equiv'.to_tensor_app, linear_map.coe_mk,
      monoidal.tensor_ihom_adj.hom_equiv'.to_tensor_app_apply_apply, restrict_top_apply,
      monoidal.ihom_map_app_2, category.assoc, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
      AddCommGroup.monoidal.curry_apply_apply, AddCommGroup.monoidal.uncurry'_apply,
      restrict_top_add_monoid_hom_apply, Sheaf_to_presheaf_map, adjunction.comp,
      equiv.trans_apply, monoidal.tensor_ihom_adj.hom_equiv'_apply,
      monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_2,
      monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_app,
      sheafification_adjunction_unit_app],
    simp only [‚Üêcomp_apply, category.assoc],
    erw ‚ÜêŒ±.val.naturality,
    simp only [comp_apply],
    congr' 1,
    simp only [‚Üêcomp_apply],
    erw ‚Üê((opens.grothendieck_topology X).to_sheafify (F.val ‚äó G‚ÇÅ.val)).naturality,
    congr' 1,
    simp only [monoidal.tensor_obj_map, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
      AddCommGroup.to_int_linear_map_apply],
    simp only [‚Üêcomp_apply, ‚Üêcategory_theory.functor.map_comp],
    congr' 1; symmetry; convert id_apply _; convert category_theory.functor.map_id _ _; congr, },
  { rw [map_add, ha, hb, map_add] }
end

@[simps] def hom_equiv' (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X) :
  ((tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) ‚âÉ (G‚ÇÅ ‚ü∂ (ihom' F).obj G‚ÇÇ) :=
{ to_fun := hom_equiv'.from_tensor _ _ _,
  inv_fun := hom_equiv'.to_tensor _ _ _,
  left_inv := Œª Œ±,
  begin
    ext1,
    change sheafify_lift _ _ _ = _,
    refine (sheafify_lift_unique _ _ _ _ _).symm,
    ext U x,
    apply hom_equiv'.left_inv_aux,
  end,
  right_inv := Œª Œ±,
  begin
    ext U x : 4,
    dsimp,
    simp only [adjunction.comp, equiv.trans_apply, presheaf.monoidal.tensor_ihom_adj,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'_apply,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_2],
    ext V y : 3,
    simp only [presheaf.monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_app,
      AddCommGroup.monoidal.curry_apply_apply, adjunction.hom_equiv_unit,
      sheafification_adjunction_unit_app, Sheaf_to_presheaf_map, hom_equiv'.to_tensor_val,
      to_sheafify_sheafify_lift, presheaf.monoidal.tensor_ihom_adj_hom_equiv,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'_symm_apply],
    dsimp,
    simp only [tensor_product.lift.tmul, AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply,
      add_monoid_hom.to_fun_eq_coe, AddCommGroup.monoidal.curry_apply_apply,
      AddCommGroup.monoidal.uncurry'_apply, linear_map.coe_mk, comp_apply,
      restrict_top_add_monoid_hom_apply, restrict_top_apply],
    simp only [‚Üêcomp_apply],
    erw [Œ±.val.naturality],
    dsimp,
    simp only [comp_apply, monoidal.ihom_obj_map_apply, quiver.hom.unop_op,
      restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
    simp only [‚Üêcomp_apply, ‚ÜêF.val.map_comp],
    simp only [category.assoc, ‚ÜêG‚ÇÇ.val.map_comp],
    erw [‚Üê(Œ±.val.app _ _).naturality],
    swap,
    { change _ ‚ü∂ opposite.op V.unop,
      refine quiver.hom.op (hom_of_le _),
      intros x hx,
      refine ‚ü®‚ü®_, ‚ü®x, hx, rfl‚ü©‚ü©, ‚ü®‚ü©, _‚ü©,
      ext, refl, },
    erw [‚Üêcategory.assoc, ‚ÜêF.val.map_comp, F.val.map_id, category.id_comp],
  end }

end tensor_left'_ihom'_adj

@[simps] def tensor_left'_ihom'_adj (F : sheaf AddCommGroup.{u} X) : tensor_left' F ‚ä£ ihom' F :=
{ hom_equiv := tensor_left'_ihom'_adj.hom_equiv' F,
  unit := sorry,
  counit := sorry,
  hom_equiv_unit' := sorry,
  hom_equiv_counit' := sorry }

end constructions

end Top.sheaf
