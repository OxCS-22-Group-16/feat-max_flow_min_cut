import category_theory.monoidal.internal.functor_category
import algebra.category.Group.monoidal
import category_theory.functor.equivalence
import category_theory.sites.sheafification
import category_theory.closed.functor_category
import category_theory.preadditive.functor_category
import topology.sheaves.presheaf

noncomputable theory

open category_theory category_theory.monoidal category_theory.limits

section Ab

namespace presheaf

namespace monoidal

section

universes w u‚ÇÅ v‚ÇÅ
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]


local attribute [instance] AddCommGroup.monoidal.tensor_monoidal_category

@[simps] def Mon_presheaf_Ab_equiv_presheaf_ring :
  Mon_ (C·µí·µñ ‚•§ AddCommGroup.{w}) ‚âå (C·µí·µñ ‚•§ Ring.{w}) :=
(Mon_functor_category_equivalence C·µí·µñ AddCommGroup).trans $
  category_theory.functor.equivalence_of_target_equivalence _ _ _ $
    AddCommGroup.monoidal.Mon_equiv_Ring

end

section

universes u v

variables {X : Top.{u}}

open topological_space Top opposite

@[simps] def emb (U : opens X) : Top.of U ‚ü∂ X :=
{ to_fun := (coe : U ‚Üí X),
  continuous_to_fun := continuous_subtype_val }

def emb.to_global_subset {U : opens X} (V : opens (Top.of U)) : opens X :=
‚ü®subtype.val '' V.1, (is_open.open_embedding_subtype_coe U.2).is_open_map _ V.2‚ü©

def emb.of_subset {U V : opens X} (inc : U ‚ü∂ V) (W : opens (Top.of U)) : opens (Top.of V) :=
{ val := (Œª p, ‚ü®p.1, le_of_hom inc p.2‚ü© : U ‚Üí V) '' W.1,
  property := let ‚ü®O, hO1, hO2‚ü© := is_open_induced_iff.mp W.2 in
    is_open_induced_iff.mpr ‚ü®subtype.val '' W.1,
    begin
      apply_fun set.image subtype.val at hO2,
      rw ‚ÜêhO2,
      apply (is_open.open_embedding_subtype_coe U.2).is_open_map,
      apply is_open.preimage,
      continuity,
    end, begin
      ext ‚ü®x, hx‚ü©, split,
      { rintros ‚ü®p, hp1, hp2‚ü©,
        rw set.mem_image,
        refine ‚ü®p, hp1, subtype.ext_iff_val.mpr hp2‚ü©, },
      { rintros ‚ü®p, hp1, hp2‚ü©,
        rw [‚Üêhp2, set.mem_preimage, set.mem_image],
        refine ‚ü®p, hp1, rfl‚ü©, },
    end‚ü© }

def emb.of_subset_hom {U V : opens X} (inc : U ‚ü∂ V) {W‚ÇÅ W‚ÇÇ : opens (Top.of U)} (i : W‚ÇÅ ‚ü∂ W‚ÇÇ) :
  emb.of_subset inc W‚ÇÅ ‚ü∂ emb.of_subset inc W‚ÇÇ :=
hom_of_le $ Œª _ ‚ü®q, hq1, hq2‚ü©, ‚ü®q, le_of_hom i hq1, hq2‚ü©

def emb.of_subset_id (U : opens X) (W : opens (Top.of U)) :
  emb.of_subset (ùüô U) W = W :=
begin
  ext x, split,
  { rintros ‚ü®p, hp, rfl‚ü©, dsimp, erw opens.mem_coe at hp, convert hp, ext, refl, },
  { intros h, rw opens.mem_coe at h, refine ‚ü®x, h, _‚ü©, ext, refl, },
end

def emb.of_subset_comp {U V W : opens X} (iUV : U ‚ü∂ V) (iVW : V ‚ü∂ W) (W : opens (Top.of U)) :
  emb.of_subset (iUV ‚â´ iVW) W = emb.of_subset iVW (emb.of_subset iUV W) :=
begin
  ext x, split,
  { rintros ‚ü®p, hp, rfl‚ü©, exact ‚ü®‚ü®p, le_of_hom iUV p.2‚ü©, ‚ü®p, hp, rfl‚ü©, rfl‚ü©, },
  { rintros ‚ü®p, ‚ü®q, hq, rfl‚ü©, rfl‚ü©, exact ‚ü®q, hq, rfl‚ü©, },
end

lemma emb.open_embedding (U : opens X) : open_embedding (emb U) :=
is_open.open_embedding_subtype_coe U.2

@[simps] def restrict (F : presheaf AddCommGroup X) (U : opens X) : presheaf AddCommGroup (Top.of U) :=
(emb.open_embedding U).is_open_map.functor.op ‚ãô F

@[simps] def restrict_functor (U : opens X) : presheaf AddCommGroup X ‚•§ presheaf AddCommGroup (Top.of U) :=
{ obj := Œª F, restrict F U,
  map := Œª F G Œ±,
  { app := Œª V, Œ±.app _,
    naturality' := Œª V W inc,
    begin
      ext x,
      erw [restrict_map, Œ±.naturality, restrict_map, comp_apply],
    end },
  map_id' := Œª F,
  begin
    ext U x,
    simp only [nat_trans.id_app, id_apply],
  end,
  map_comp' := Œª F G H Œ± Œ≤,
  begin
    ext U x,
    simp only [nat_trans.comp_app],
  end }

@[reducible] def restrict_subset_sections (F : presheaf AddCommGroup X) {U V : opens X} (inc : U ‚ü∂ V)
  (W : opens (Top.of U)) :
  (restrict F U).obj (op W) ‚âÖ (restrict F V).obj (op $ emb.of_subset inc W) :=
{ hom := F.map (quiver.hom.op $ hom_of_le
    begin
      rintros p ‚ü®‚ü®q, hq1‚ü©, ‚ü®x, hx1, hx2‚ü©, rfl‚ü©,
      dsimp only at hx2,
      refine ‚ü®x, hx1, _‚ü©,
      rw ‚Üêhx2,
      refl,
    end : op ((emb.open_embedding U).is_open_map.functor.obj W) ‚ü∂
      op ((emb.open_embedding V).is_open_map.functor.obj (emb.of_subset inc W))),
  inv := F.map (quiver.hom.op $ hom_of_le
    begin
      rintros p ‚ü®q, hq, rfl‚ü©,
      refine ‚ü®‚ü®q.1, le_of_hom inc q.2‚ü©, ‚ü®q, hq, rfl‚ü©, rfl‚ü©,
    end : op ((emb.open_embedding V).is_open_map.functor.obj (emb.of_subset inc W)) ‚ü∂
      op ((emb.open_embedding U).is_open_map.functor.obj W)),
  hom_inv_id' := by { rw [‚ÜêF.map_comp, ‚Üêop_comp], convert F.map_id _ },
  inv_hom_id' := by { rw [‚ÜêF.map_comp, ‚Üêop_comp], convert F.map_id _ } }

@[simps] def restrict_subset_sections_map.app {F G : presheaf AddCommGroup X}
  {U V : opens X} (inc : U ‚ü∂ V)
  (Œ± : restrict F V ‚ü∂ restrict G V) (W : opens (Top.of U)):
  (restrict F U).obj (op W) ‚ü∂ (restrict G U).obj (op W) :=
{ to_fun := Œª s, (restrict_subset_sections G inc W).inv $ Œ±.app _ $
      (restrict_subset_sections F inc W).hom s,
  map_zero' := by rw [map_zero, map_zero, map_zero],
  map_add' := Œª x y, by rw [map_add, map_add, map_add] }

lemma restrict_subset_sections_map.naturality {F G : presheaf AddCommGroup X}
  {U V : opens X} (inc : U ‚ü∂ V)
  (Œ± : restrict F V ‚ü∂ restrict G V)
  (W‚ÇÅ W‚ÇÇ : (opens (Top.of U)))
  (i : W‚ÇÅ ‚ü∂ W‚ÇÇ) :
  (restrict F U).map i.op ‚â´ restrict_subset_sections_map.app inc Œ± W‚ÇÅ =
    restrict_subset_sections_map.app inc Œ± W‚ÇÇ ‚â´ (restrict G U).map i.op :=
begin
  ext x,
  simp only [restrict_map, quiver.hom.unop_op, restrict_subset_sections_map.app, comp_apply,
    add_monoid_hom.coe_mk],
  simp only [‚Üêcomp_apply],
  simp only [‚Üêcomp_apply, ‚ÜêF.map_comp, ‚Üêop_comp],
  generalize_proofs h1 h2 h3 h4 h5 h6,
  rw [show hom_of_le h3 ‚â´ h1.functor.map i = h2.functor.map (emb.of_subset_hom inc i) ‚â´
    hom_of_le h5, from rfl, op_comp, F.map_comp, category.assoc _ _ (Œ±.app _)],
  have := Œ±.naturality (emb.of_subset_hom inc i).op,
  dsimp at this,
  erw this,
  simp only [category.assoc],
  congr' 3,
  rw [‚ÜêG.map_comp, ‚ÜêG.map_comp, ‚Üêop_comp, ‚Üêop_comp],
  congr' 1,
end

@[simps] def restrict_subset_sections_map {F G : presheaf AddCommGroup X}
  {U V : opens X} (inc : U ‚ü∂ V)
  (Œ± : restrict F V ‚ü∂ restrict G V) :
  restrict F U ‚ü∂ restrict G U :=
{ app := Œª W, restrict_subset_sections_map.app inc Œ± W.unop,
  naturality' := Œª W‚ÇÅ W‚ÇÇ i, restrict_subset_sections_map.naturality inc Œ± _ _ i.unop }

instance (F G : presheaf AddCommGroup X) (U : opens X) :
  add_comm_group (restrict F U ‚ü∂ restrict G U) :=
begin
  haveI i1 : preadditive (presheaf AddCommGroup (Top.of U)) :=
    category_theory.functor_category_preadditive,
  exactI i1.1 (restrict F U) (restrict G U),
end

lemma restrict_subset_sections_map_zero {F G : presheaf AddCommGroup X}
  {U V : opens X} (inc : U ‚ü∂ V) :
  restrict_subset_sections_map inc (0 : restrict F V ‚ü∂ restrict G V) = 0 :=
by { ext, simp }

lemma restrict_subset_sections_map_add {F G : presheaf AddCommGroup X}
  {U V : opens X} (inc : U ‚ü∂ V) (Œ± Œ≤ : restrict F V ‚ü∂ restrict G V) :
  restrict_subset_sections_map inc (Œ± + Œ≤) = restrict_subset_sections_map inc Œ± +
  restrict_subset_sections_map inc Œ≤ :=
by { ext, simp }

lemma restrict_subset_sections_map_id {F G : presheaf AddCommGroup X} (U : opens X)
  (Œ± : restrict F U ‚ü∂ restrict G U) : restrict_subset_sections_map (ùüô U) Œ± = Œ± :=
begin
  ext W x,
  simp only [restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
  erw [‚Üêcomp_apply, ‚Üêcomp_apply, ‚ÜêŒ±.naturality],
  swap,
  { refine eq_to_hom _,
    rw emb.of_subset_id U W.unop,
    refl, },
  dsimp,
  rw [‚Üêcategory.assoc, ‚ÜêF.map_comp, ‚Üêop_comp],
  congr' 1,
  convert category.id_comp _,
  convert F.map_id _,
end

lemma restrict_subset_sections_map_comp {F G : presheaf AddCommGroup X} {U V W : opens X}
  (iUV : U ‚ü∂ V) (iVW : V ‚ü∂ W) (Œ± : restrict F W ‚ü∂ restrict G W) :
  restrict_subset_sections_map (iUV ‚â´ iVW) Œ± =
  restrict_subset_sections_map iUV (restrict_subset_sections_map iVW Œ±) :=
begin
  ext O x,
  simp only [restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
  simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.map_comp, ‚Üêop_comp],
  rw [‚Üêcategory.assoc _ _ (Œ±.app _ ‚â´ _), ‚ÜêF.map_comp, ‚Üêop_comp],
  congr' 1,
  change _ = _ ‚â´ Œ±.app (op (emb.of_subset iVW (emb.of_subset iUV _))) ‚â´ _,
  generalize_proofs h1 h2 h3 h4 h5 h6 h7 h8 h9,
  rw [show Œ±.app (op (emb.of_subset iVW (emb.of_subset iUV O.unop))) =
    F.map ((emb.open_embedding W).is_open_map.functor.op.map (eq_to_hom _)) ‚â´
      Œ±.app (op (emb.of_subset (iUV ‚â´ iVW) O.unop)) ‚â´
      G.map ((emb.open_embedding W).is_open_map.functor.op.map (eq_to_hom _)),
    from _, category.assoc, category.assoc, ‚ÜêG.map_comp, ‚Üêcategory.assoc (F.map _) (F.map _),
    ‚ÜêF.map_comp],
  congr' 1,
  { rw emb.of_subset_comp, },
  { rw emb.of_subset_comp, },
  { erw [‚Üêcategory.assoc, Œ±.naturality, category.assoc, ‚ÜêG.map_comp],
    symmetry,
    convert category.comp_id _,
    convert G.map_id _, },
end

@[simps] def ihom_obj (F G : presheaf AddCommGroup X) : presheaf AddCommGroup X :=
{ obj := Œª U, AddCommGroup.of (restrict F U.unop ‚ü∂ restrict G U.unop),
  map := Œª U V inc,
  { to_fun := Œª Œ±, restrict_subset_sections_map inc.unop Œ±,
    map_zero' := restrict_subset_sections_map_zero inc.unop,
    map_add' := Œª Œ± Œ≤, restrict_subset_sections_map_add inc.unop Œ± Œ≤ },
  map_id' := Œª U,
  begin
    ext1,
    rw [add_monoid_hom.coe_mk, unop_id, restrict_subset_sections_map_id, id_apply],
  end,
  map_comp' := Œª U V W iUV iVW,
  begin
    ext1 Œ±,
    rw [add_monoid_hom.coe_mk, comp_apply, add_monoid_hom.coe_mk, add_monoid_hom.coe_mk],
    convert restrict_subset_sections_map_comp iVW.unop iUV.unop Œ±,
  end }

@[simps] def ihom_map' (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ)
  (U : opens X) (f : restrict F U ‚ü∂ restrict G‚ÇÅ U) :
  restrict F U ‚ü∂ restrict G‚ÇÇ U :=
f ‚â´ (restrict_subset_sections_map (ùüô U) ((restrict_functor U).map Œ≥))

lemma ihom_map'_zero (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X) :
  ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U 0 = 0 :=
begin
  ext, simp,
end

lemma ihom_map'_add (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X)
  (Œ± Œ≤ : restrict F U ‚ü∂ restrict G‚ÇÅ U) :
  ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U (Œ± + Œ≤) = ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ± + ihom_map' F _ _ Œ≥ U Œ≤ :=
begin
  ext, simp,
end

lemma ihom_map'_naturality (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X)
  (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X) (Œ± : restrict F U ‚ü∂ restrict G‚ÇÅ U)
  {W‚ÇÅ W‚ÇÇ : opens (Top.of U)} (inc : W‚ÇÅ ‚ü∂ W‚ÇÇ) :
  (restrict F U).map inc.op ‚â´ (ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ±).app (op W‚ÇÅ) =
  (ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ±).app (op W‚ÇÇ) ‚â´ (restrict G‚ÇÇ U).map inc.op :=
begin
  ext x,
  simp only [restrict_map, quiver.hom.unop_op, comp_apply, ihom_map'_app_apply],
  simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG‚ÇÇ.map_comp],
  erw [‚ÜêŒ≥.naturality, ‚ÜêŒ≥.naturality, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp,
    ‚Üêcategory.assoc (Œ±.app _), ‚ÜêŒ±.naturality (ùüô _), ‚Üêcategory.assoc, ‚Üêcategory.assoc,
    ‚ÜêF.map_comp, ‚Üêop_comp, Œ±.naturality inc.op, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp,
    ‚Üêop_comp, category.assoc],
end

@[simps] def ihom_map_app (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X) :
  (ihom_obj F G‚ÇÅ).obj (op U) ‚ü∂ (ihom_obj F G‚ÇÇ).obj (op U) :=
{ to_fun := Œª Œ±,
  { app := Œª W, (ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ±).app W,
    naturality' := Œª W‚ÇÅ W‚ÇÇ inc,
    begin
      convert ihom_map'_naturality F G‚ÇÅ G‚ÇÇ Œ≥ U Œ± inc.unop,
    end },
  map_zero' :=
  begin
    ext W x,
    simp_rw ihom_map'_zero F G‚ÇÅ G‚ÇÇ Œ≥ U,
  end,
  map_add' := Œª _ _,
  begin
    ext W x,
    simp_rw ihom_map'_add F G‚ÇÅ G‚ÇÇ Œ≥ U,
    rw [nat_trans.app_add, nat_trans.app_add],
  end }

lemma ihom_map_naturality (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ)
  {U V : opens X} (iUV : U ‚ü∂ V) :
  (ihom_obj F G‚ÇÅ).map iUV.op ‚â´ ihom_map_app F G‚ÇÅ G‚ÇÇ Œ≥ U =
  ihom_map_app F G‚ÇÅ G‚ÇÇ Œ≥ V ‚â´ (ihom_obj F G‚ÇÇ).map iUV.op :=
begin
  ext f W x,
  simp only [comp_apply, ihom_obj_map_apply, quiver.hom.unop_op, ihom_map_app_apply_app,
    ihom_map'_app_apply, restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
  simp only [‚Üêcomp_apply, category.assoc],
  rw [‚ÜêŒ≥.naturality, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp, ‚Üêcategory.assoc (G‚ÇÅ.map _),
    ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp, ‚Üêop_comp, ‚ÜêG‚ÇÇ.map_comp, ‚Üêop_comp, ‚ÜêŒ≥.naturality,
    ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp],
  congr' 1,
end

@[simps] def ihom_map (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  ihom_obj F G‚ÇÅ ‚ü∂ ihom_obj F G‚ÇÇ :=
{ app := Œª U, ihom_map_app F G‚ÇÅ G‚ÇÇ Œ≥ U.unop,
  naturality' := Œª U V iUV, by convert ihom_map_naturality F G‚ÇÅ G‚ÇÇ Œ≥ iUV.unop }

lemma ihom_map_id (F G : presheaf AddCommGroup X) :
  ihom_map F G G (ùüô G) = ùüô _ :=
begin
  ext f U W x,
  simp only [ihom_map_app_2, ihom_map_app_apply_app, ihom_map'_app_apply, nat_trans.id_app,
    id_apply],
  simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.map_comp, ‚Üêop_comp],
  congr' 1,
  convert category.comp_id _,
  convert G.map_id _,
end

lemma ihom_map_comp (F G‚ÇÅ G‚ÇÇ G‚ÇÉ : presheaf AddCommGroup X) (g‚ÇÅ‚ÇÇ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (g‚ÇÇ‚ÇÉ : G‚ÇÇ ‚ü∂ G‚ÇÉ) :
  ihom_map F _ _ (g‚ÇÅ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ) = ihom_map F _ _ g‚ÇÅ‚ÇÇ ‚â´ ihom_map F _ _ g‚ÇÇ‚ÇÉ :=
begin
  ext f U W x,
  simp only [ihom_map_app_2, ihom_map_app_apply_app, ihom_map'_app_apply, nat_trans.comp_app,
    comp_apply],
  simp only [‚Üêcomp_apply, category.assoc],
  congr' 3,
  rw [‚Üêg‚ÇÇ‚ÇÉ.naturality, ‚Üêcategory.assoc (G‚ÇÇ.map _), ‚ÜêG‚ÇÇ.map_comp, ‚Üêcategory.assoc (G‚ÇÇ.map _),
    ‚ÜêG‚ÇÇ.map_comp],
  congr,
end

@[simps] def ihom (F : presheaf AddCommGroup X) :
  presheaf AddCommGroup X ‚•§ presheaf AddCommGroup X :=
{ obj := ihom_obj F,
  map := ihom_map F,
  map_id' := ihom_map_id F,
  map_comp' := Œª _ _ _, ihom_map_comp F _ _ _ }

local attribute [instance] AddCommGroup.monoidal.tensor_monoidal_category

instance : monoidal_category (presheaf AddCommGroup X) :=
category_theory.monoidal.functor_category_monoidal

open category_theory.monoidal_category

@[simps] def tensor_ihom_adj (F : presheaf AddCommGroup X) : tensor_left F ‚ä£ ihom F :=
{ hom_equiv := Œª G‚ÇÅ G‚ÇÇ, _,
  unit := _,
  counit := _,
  hom_equiv_unit' := _,
  hom_equiv_counit' := _ }

instance : monoidal_closed (presheaf AddCommGroup X) :=
{ closed' := Œª F, { is_adj :=
  ‚ü®ihom F, _‚ü© } }

end

end monoidal


end presheaf

end Ab

#exit

namespace Sheaf

section AddCommGroup


end AddCommGroup

-- need sheafification
universes w v u
variables {C : Type u} [category.{v} C] {J : grothendieck_topology C}
variables {D : Type w} [category.{max v u} D]

def iso.mk (X Y : Sheaf J D) (Œ± : X.val ‚âÖ Y.val) : X ‚âÖ Y :=
{ hom := ‚ü®Œ±.hom‚ü©,
  inv := ‚ü®Œ±.inv‚ü©,
  hom_inv_id' := Sheaf.hom.ext _ _ Œ±.hom_inv_id',
  inv_hom_id' := Sheaf.hom.ext _ _ Œ±.inv_hom_id' }

variables
  [monoidal_category D] [monoidal_closed D]

namespace ihom

open category_theory.functor

def ihom_obj'_val (X Y : Sheaf J D) : C·µí·µñ ‚•§ D :=
{ obj := Œª c, begin
    haveI : monoidal_closed (C·µí·µñ ‚•§ D),
    have := @category_theory.functor.monoidal_closed D C·µí·µñ,
  end,
  map := _,
  map_id' := _,
  map_comp' := _ }

end ihom

variables
  [concrete_category.{max v u} D]
  [preserves_limits (forget D)]
  [‚àÄ (P : C·µí·µñ ‚•§ D) (X : C) (S : J.cover X), has_multiequalizer (S.index P)]
  [‚àÄ (X : C), has_colimits_of_shape (J.cover X)·µí·µñ D]
  [‚àÄ (X : C), preserves_colimits_of_shape (J.cover X)·µí·µñ (forget D)]
  [reflects_isomorphisms (forget D)]


namespace monoidal

@[simps] def tensor_obj' (X Y : Sheaf J D) : Sheaf J D :=
(presheaf_to_Sheaf J D).obj (X.val ‚äó Y.val : C·µí·µñ ‚•§ D)

@[simps] def tensor_hom' {X X' Y Y' : Sheaf J D} (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') :
  tensor_obj' X Y ‚ü∂ tensor_obj' X' Y' :=
(presheaf_to_Sheaf J D).map (f.val ‚äó g.val)

@[simps] def tensor_unit' : Sheaf J D :=
(presheaf_to_Sheaf J D).obj
{ obj := Œª c, ùüô_ D,
  map := Œª a b f, ùüô _,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, (category.comp_id _).symm }

instance : monoidal_category (Sheaf J D) :=
{ -- data
  tensor_obj := tensor_obj',
  tensor_hom := Œª _ _ _ _, tensor_hom',
  tensor_unit := tensor_unit',
  associator := _,
  left_unitor := _,
  right_unitor := _,


  tensor_id' := _,
  tensor_comp' := _,

  associator_naturality' := _,

  left_unitor_naturality' := _,
  right_unitor_naturality' := _,

  pentagon' := _,
  triangle' := _ }

end monoidal

end Sheaf
