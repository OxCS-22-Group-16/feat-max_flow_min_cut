import analysis.normed_space.bounded_linear_maps
import topology.new_bundle

open topological_space filter set bundle
open_locale topological_space classical

noncomputable theory

variables {R ùïú B F : Type*} {E : B ‚Üí Type*}

section

variables [semiring R] [topological_space B]

namespace pretrivialization

variables [topological_space F] (e : pretrivialization F (total_space.proj : total_space E ‚Üí B))

section zero
variables [‚àÄ b, has_zero (E b)]

/-- A fiberwise inverse to `e`. This is the function `F ‚Üí E b` that induces a local inverse
`B √ó F ‚Üí total_space E` of `e` on `e.base_set`. It is defined to be `0` outside `e.base_set`. -/
protected def symm (b : B) (y : F) : E b :=
if hb : b ‚àà e.base_set
then cast (congr_arg E (e.proj_symm_apply' hb)) (e.to_local_equiv.symm (b, y)).2
else 0

lemma symm_apply {b : B} (hb : b ‚àà e.base_set) (y : F) :
  e.symm b y = cast (congr_arg E (e.proj_symm_apply' hb)) (e.to_local_equiv.symm (b, y)).2 :=
dif_pos hb

lemma symm_apply_of_not_mem {b : B} (hb : b ‚àâ e.base_set) (y : F) :
  e.symm b y = 0 :=
dif_neg hb

lemma coe_symm_of_not_mem {b : B} (hb : b ‚àâ e.base_set) :
  (e.symm b : F ‚Üí E b) = 0 :=
funext $ Œª y, dif_neg hb

lemma mk_symm {b : B} (hb : b ‚àà e.base_set) (y : F) :
  total_space_mk b (e.symm b y) = e.to_local_equiv.symm (b, y) :=
by rw [e.symm_apply hb, total_space.mk_cast, total_space.eta]

lemma symm_proj_apply (z : total_space E)
  (hz : z.proj ‚àà e.base_set) : e.symm z.proj (e z).2 = z.2 :=
by rw [e.symm_apply hz, cast_eq_iff_heq, e.mk_proj_snd' hz,
  e.symm_apply_apply (e.mem_source.mpr hz)]

lemma symm_apply_apply_mk {b : B} (hb : b ‚àà e.base_set) (y : E b) :
  e.symm b (e (total_space_mk b y)).2 = y :=
e.symm_proj_apply (total_space_mk b y) hb

lemma apply_mk_symm {b : B} (hb : b ‚àà e.base_set) (y : F) :
  e (total_space_mk b (e.symm b y)) = (b, y) :=
by { rw [e.mk_symm hb, e.apply_symm_apply (e.mem_target.mpr _)], exact hb }

end zero

variables (R) [add_comm_monoid F] [module R F] [‚àÄ b, add_comm_monoid (E b)] [‚àÄ b, module R (E b)]
-- variables {Z : Type*} (proj : Z ‚Üí B) [‚àÄ b, add_comm_monoid (proj ‚Åª¬π' {b})]
--   [‚àÄ b, module R (proj ‚Åª¬π' {b})]

-- class pretrivialization.is_linear' (e : pretrivialization F proj) : Prop :=
-- (is_linear : ‚àÄ x ‚àà e.base_set, is_linear_map R (Œª y : proj ‚Åª¬π' {x}, (e (y : Z)).2))

protected class is_linear (e : pretrivialization F (@total_space.proj B E)) : Prop :=
(linear : ‚àÄ b ‚àà e.base_set, is_linear_map R (Œª x : E b, (e (total_space_mk b x)).2))

variables [e.is_linear R]

lemma linear {b : B} (hb : b ‚àà e.base_set) :
  is_linear_map R (Œª x : E b, (e (total_space_mk b x)).2) :=
pretrivialization.is_linear.linear b hb

include e R
variables (R)

/-- A fiberwise linear inverse to `e`. -/
@[simps] protected def symm‚Çó (b : B) : F ‚Üí‚Çó[R] E b :=
begin
  refine is_linear_map.mk' (e.symm b) _,
  by_cases hb : b ‚àà e.base_set,
  { exact (((e.linear R hb).mk' _).inverse (e.symm b) (e.symm_apply_apply_mk hb)
      (Œª v, congr_arg prod.snd $ e.apply_mk_symm hb v)).is_linear },
  { rw [e.coe_symm_of_not_mem hb], exact (0 : F ‚Üí‚Çó[R] E b).is_linear }
end

/-- A pretrivialization for a topological vector bundle defines linear equivalences between the
fibers and the model space. -/
@[simps {fully_applied := ff}] def linear_equiv_at (b : B)
  (hb : b ‚àà e.base_set) : E b ‚âÉ‚Çó[R] F :=
{ to_fun := Œª y, (e (total_space_mk b y)).2,
  inv_fun := e.symm b,
  left_inv := e.symm_apply_apply_mk hb,
  right_inv := Œª v, by simp_rw [e.apply_mk_symm hb v],
  map_add' := Œª v w, (e.linear R hb).map_add v w,
  map_smul' := Œª c v, (e.linear R hb).map_smul c v }

/-- A fiberwise linear map equal to `e` on `e.base_set`. -/
protected def linear_map_at (b : B) : E b ‚Üí‚Çó[R] F :=
if hb : b ‚àà e.base_set then e.linear_equiv_at R b hb else 0

lemma coe_linear_map_at (b : B) :
  ‚áë(e.linear_map_at R b) = Œª y, if b ‚àà e.base_set then (e (total_space_mk b y)).2 else 0 :=
by { rw [pretrivialization.linear_map_at], split_ifs; refl }

lemma coe_linear_map_at_of_mem {b : B} (hb : b ‚àà e.base_set) :
  ‚áë(e.linear_map_at R b) = Œª y, (e (total_space_mk b y)).2 :=
by simp_rw [coe_linear_map_at, if_pos hb]

lemma linear_map_at_apply {b : B} (y : E b) :
  e.linear_map_at R b y = if b ‚àà e.base_set then (e (total_space_mk b y)).2 else 0 :=
by rw [coe_linear_map_at]

lemma linear_map_at_def_of_mem {b : B} (hb : b ‚àà e.base_set) :
  e.linear_map_at R b = e.linear_equiv_at R b hb :=
dif_pos hb

lemma linear_map_at_def_of_not_mem {b : B} (hb : b ‚àâ e.base_set) :
  e.linear_map_at R b = 0 :=
dif_neg hb

lemma linear_map_at_eq_zero {b : B} (hb : b ‚àâ e.base_set) :
  e.linear_map_at R b = 0 :=
dif_neg hb

lemma symm‚Çó_linear_map_at {b : B} (hb : b ‚àà e.base_set) (y : E b) :
  e.symm‚Çó R b (e.linear_map_at R b y) = y :=
by { rw [e.linear_map_at_def_of_mem R hb], exact (e.linear_equiv_at R b hb).left_inv y }

lemma linear_map_at_symm‚Çó {b : B} (hb : b ‚àà e.base_set) (y : F) :
  e.linear_map_at R b (e.symm‚Çó R b y) = y :=
by { rw [e.linear_map_at_def_of_mem R hb], exact (e.linear_equiv_at R b hb).right_inv y }

end pretrivialization

namespace trivialization

variables [topological_space F] [add_comm_monoid F] [module R F] [‚àÄ b, add_comm_monoid (E b)] [‚àÄ b, module R (E b)]
variables (R) [topological_space (total_space E)]

class is_linear (e : trivialization F (total_space.proj : total_space E ‚Üí B)) : Prop :=
(linear : ‚àÄ x ‚àà e.base_set, is_linear_map R (Œª y : E x, (e (total_space_mk x y)).2))

variables (e e' : trivialization F (total_space.proj : total_space E ‚Üí B))
variables [e.is_linear R] [e'.is_linear R]

lemma linear {b : B} (hb : b ‚àà e.base_set) :
  is_linear_map R (Œª x : E b, (e (total_space_mk b x)).2) :=
trivialization.is_linear.linear b hb

instance to_pretrivialization.is_linear : e.to_pretrivialization.is_linear R :=
{ ..(‚Äπ_‚Ä∫ : e.is_linear R) }

/-- A fiberwise inverse to `e`. The function `F ‚Üí E x` that induces a local inverse
  `B √ó F ‚Üí total_space E` of `e` on `e.base_set`. It is defined to be `0` outside `e.base_set`. -/
protected def symm (b : B) (y : F) : E b :=
e.to_pretrivialization.symm b y

lemma symm_apply {b : B} (hb : b ‚àà e.base_set) (y : F) :
  e.symm b y = cast (congr_arg E (e.proj_symm_apply' hb)) (e.to_local_homeomorph.symm (b, y)).2 :=
dif_pos hb

lemma symm_apply_of_not_mem {b : B} (hb : b ‚àâ e.base_set) (y : F) :
  e.symm b y = 0 :=
dif_neg hb

lemma mk_symm {b : B} (hb : b ‚àà e.base_set) (y : F) :
  total_space_mk b (e.symm b y) = e.to_local_homeomorph.symm (b, y) :=
e.to_pretrivialization.mk_symm hb y

lemma symm_proj_apply (z : total_space E)
  (hz : z.proj ‚àà e.base_set) : e.symm z.proj (e z).2 = z.2 :=
e.to_pretrivialization.symm_proj_apply z hz

lemma symm_apply_apply_mk {b : B} (hb : b ‚àà e.base_set) (y : E b) :
  e.symm b (e (total_space_mk b y)).2 = y :=
e.symm_proj_apply (total_space_mk b y) hb

lemma apply_mk_symm {b : B} (hb : b ‚àà e.base_set) (y : F) :
  e (total_space_mk b (e.symm b y)) = (b, y) :=
e.to_pretrivialization.apply_mk_symm hb y

lemma continuous_on_symm :
  continuous_on (Œª z : B √ó F, total_space_mk z.1 (e.symm z.1 z.2)) (e.base_set √óÀ¢ univ) :=
begin
  have : ‚àÄ (z : B √ó F) (hz : z ‚àà e.base_set √óÀ¢ (univ : set F)),
    total_space_mk z.1 (e.symm z.1 z.2) = e.to_local_homeomorph.symm z,
  { rintro x ‚ü®hx : x.1 ‚àà e.base_set, _‚ü©, simp_rw [e.mk_symm hx, prod.mk.eta] },
  refine continuous_on.congr _ this,
  rw [‚Üê e.target_eq],
  exact e.to_local_homeomorph.continuous_on_symm
end

/-- A trivialization for a topological vector bundle defines linear equivalences between the
fibers and the model space. -/
def linear_equiv_at (b : B) (hb : b ‚àà e.base_set) :
  E b ‚âÉ‚Çó[R] F :=
e.to_pretrivialization.linear_equiv_at R b hb

@[simp]
lemma linear_equiv_at_apply (b : B) (hb : b ‚àà e.base_set) (v : E b) :
  e.linear_equiv_at R b hb v = (e (total_space_mk b v)).2 := rfl

@[simp]
lemma linear_equiv_at_symm_apply (b : B) (hb : b ‚àà e.base_set) (v : F) :
  (e.linear_equiv_at R b hb).symm v = e.symm b v := rfl

/-- A fiberwise linear inverse to `e`. -/
protected def symm‚Çó (b : B) : F ‚Üí‚Çó[R] E b :=
e.to_pretrivialization.symm‚Çó R b

lemma coe_symm‚Çó (b : B) : ‚áë(e.symm‚Çó R b) = e.symm b :=
rfl

/-- A fiberwise linear map equal to `e` on `e.base_set`. -/
protected def linear_map_at (b : B) : E b ‚Üí‚Çó[R] F :=
e.to_pretrivialization.linear_map_at R b

lemma coe_linear_map_at (b : B) :
  ‚áë(e.linear_map_at R b) = Œª y, if b ‚àà e.base_set then (e (total_space_mk b y)).2 else 0 :=
e.to_pretrivialization.coe_linear_map_at R b

lemma coe_linear_map_at_of_mem {b : B} (hb : b ‚àà e.base_set) :
  ‚áë(e.linear_map_at R b) = Œª y, (e (total_space_mk b y)).2 :=
by simp_rw [coe_linear_map_at, if_pos hb]

lemma linear_map_at_apply {b : B} (y : E b) :
  e.linear_map_at R b y = if b ‚àà e.base_set then (e (total_space_mk b y)).2 else 0 :=
by rw [coe_linear_map_at]

lemma linear_map_at_def_of_mem {b : B} (hb : b ‚àà e.base_set) :
  e.linear_map_at R b = e.linear_equiv_at R b hb :=
dif_pos hb

lemma linear_map_at_def_of_not_mem {b : B} (hb : b ‚àâ e.base_set) :
  e.linear_map_at R b = 0 :=
dif_neg hb

lemma symm‚Çó_linear_map_at {b : B} (hb : b ‚àà e.base_set) (y : E b) :
  e.symm‚Çó R b (e.linear_map_at R b y) = y :=
e.to_pretrivialization.symm‚Çó_linear_map_at R hb y

lemma linear_map_at_symm‚Çó {b : B} (hb : b ‚àà e.base_set) (y : F) :
  e.linear_map_at R b (e.symm‚Çó R b y) = y :=
e.to_pretrivialization.linear_map_at_symm‚Çó R hb y

/-- A coordinate change function between two trivializations, as a continuous linear equivalence.
  Defined to be the identity when `b` does not lie in the base set of both trivializations. -/
def coord_change (b : B) : F ‚âÉL[R] F :=
{ continuous_to_fun := begin
    by_cases hb : b ‚àà e.base_set ‚à© e'.base_set,
    { simp_rw [dif_pos hb],
      refine (e'.continuous_on.comp_continuous _ _).snd,
      exact e.continuous_on_symm.comp_continuous (continuous.prod.mk b)
        (Œª y, mk_mem_prod hb.1 (mem_univ y)),
      exact (Œª y, e'.mem_source.mpr hb.2) },
    { rw [dif_neg hb], exact continuous_id }
  end,
  continuous_inv_fun := begin
    by_cases hb : b ‚àà e.base_set ‚à© e'.base_set,
    { simp_rw [dif_pos hb],
      refine (e.continuous_on.comp_continuous _ _).snd,
      exact e'.continuous_on_symm.comp_continuous (continuous.prod.mk b)
        (Œª y, mk_mem_prod hb.2 (mem_univ y)),
      exact (Œª y, e.mem_source.mpr hb.1) },
    { rw [dif_neg hb], exact continuous_id }
  end,
  .. if hb : b ‚àà e.base_set ‚à© e'.base_set then
     (e.linear_equiv_at R b (hb.1 : _)).symm.trans (e'.linear_equiv_at R b hb.2)
    else linear_equiv.refl R F }

lemma coe_coord_change {b : B}
  (hb : b ‚àà e.base_set ‚à© e'.base_set) :
  ‚áë(coord_change R e e' b) =
  (e.linear_equiv_at R b hb.1).symm.trans (e'.linear_equiv_at R b hb.2) :=
congr_arg linear_equiv.to_fun (dif_pos hb)

lemma coord_change_apply {b : B}
  (hb : b ‚àà e.base_set ‚à© e'.base_set) (y : F) :
  coord_change R e e' b y = (e' (total_space_mk b (e.symm b y))).2 :=
congr_arg (Œª f, linear_equiv.to_fun f y) (dif_pos hb)

lemma mk_coord_change {b : B}
  (hb : b ‚àà e.base_set ‚à© e'.base_set) (y : F) :
  (b, coord_change R e e' b y) = e' (total_space_mk b (e.symm b y)) :=
begin
  ext,
  { rw [e.mk_symm hb.1 y, e'.coe_fst', e.proj_symm_apply' hb.1],
    rw [e.proj_symm_apply' hb.1], exact hb.2 },
  { exact e.coord_change_apply R e' hb y }
end

/-- A version of `coord_change_apply` that fully unfolds `coord_change`. The right-hand side is
ugly, but has good definitional properties for specifically defined trivializations. -/
lemma coord_change_apply' {b : B}
  (hb : b ‚àà e.base_set ‚à© e'.base_set) (y : F) :
  coord_change R e e' b y = (e' (e.to_local_homeomorph.symm (b, y))).2 :=
by rw [e.coord_change_apply R e' hb, e.mk_symm hb.1]

lemma coord_change_symm_apply {b : B}
  (hb : b ‚àà e.base_set ‚à© e'.base_set) :
  ‚áë(coord_change R e e' b).symm =
  (e'.linear_equiv_at R b hb.2).symm.trans (e.linear_equiv_at R b hb.1) :=
congr_arg linear_equiv.inv_fun (dif_pos hb)

end trivialization



variables [topological_space (total_space E)]
variables [nontrivially_normed_field ùïú]
variables [normed_add_comm_group F] [‚àÄ b, add_comm_monoid (E b)] [‚àÄ b, topological_space (E b)]
variables [normed_space ùïú F] [‚àÄ b, module ùïú (E b)]
variables (ùïú) (e e' : trivialization F (@total_space.proj B E))

variables (F E) [fiber_bundle F E]

class vector_bundle  : Prop :=
(trivialization_linear : ‚àÄ e [mem_trivialization_atlas e], trivialization.is_linear ùïú e)
(continuous_on_coord_change : ‚àÄ (e e' : trivialization F (@total_space.proj B E))
  [he : mem_trivialization_atlas e]
  [he' : mem_trivialization_atlas e'], by {
  haveI : e.is_linear ùïú := @trivialization_linear e he,
  haveI : e'.is_linear ùïú := @trivialization_linear e' he',
  exactI continuous_on
  (Œª b, trivialization.coord_change ùïú e e' b : B ‚Üí F ‚ÜíL[ùïú] F) (e.base_set ‚à© e'.base_set) })

export vector_bundle (continuous_on_coord_change)
attribute [instance] vector_bundle.trivialization_linear

variables [vector_bundle ùïú F E]

-- instance vector_bundle.trivialization_linear' [mem_trivialization_atlas e] : e.is_linear ùïú :=
-- vector_bundle.trivialization_linear e ‚Äπ_‚Ä∫

example [fiber_bundle F E] [vector_bundle ùïú F E] (e e' : trivialization F (@total_space.proj B E))
  [mem_trivialization_atlas e] [mem_trivialization_atlas e'] :
  continuous_on
  (Œª b, trivialization.coord_change ùïú e e' b : B ‚Üí F ‚ÜíL[ùïú] F) (e.base_set ‚à© e'.base_set) :=
vector_bundle.continuous_on_coord_change e e'


variables {ùïú F E}

namespace trivialization

variables [e.is_linear ùïú] [e'.is_linear ùïú]

variables (ùïú)

/-- Forward map of `continuous_linear_equiv_at` (only propositionally equal),
  defined everywhere (`0` outside domain). -/
@[simps apply {fully_applied := ff}]
def continuous_linear_map_at (b : B) : E b ‚ÜíL[ùïú] F :=
{ to_fun := e.linear_map_at ùïú b, -- given explicitly to help `simps`
  cont := begin
    dsimp,
    rw [e.coe_linear_map_at ùïú b],
    refine continuous_if_const _ (Œª hb, _) (Œª _, continuous_zero),
    exact continuous_snd.comp (e.to_local_homeomorph.continuous_on.comp_continuous
      (total_space_mk_inducing F E b).continuous (Œª x, e.mem_source.mpr hb))
  end,
  .. e.linear_map_at ùïú b }

/-- Backwards map of `continuous_linear_equiv_at`, defined everywhere. -/
@[simps apply {fully_applied := ff}]
def symmL (b : B) : F ‚ÜíL[ùïú] E b :=
{ to_fun := e.symm b, -- given explicitly to help `simps`
  cont := begin
    by_cases hb : b ‚àà e.base_set,
    { rw (total_space_mk_inducing F E b).continuous_iff,
      exact e.continuous_on_symm.comp_continuous (continuous_const.prod_mk continuous_id)
        (Œª x, mk_mem_prod hb (mem_univ x)) },
    { refine continuous_zero.congr (Œª x, (e.symm_apply_of_not_mem hb x).symm) },
  end,
  .. e.symm‚Çó ùïú b }

lemma symmL_continuous_linear_map_at {b : B} (hb : b ‚àà e.base_set)
  (y : E b) :
  e.symmL ùïú b (e.continuous_linear_map_at ùïú b y) = y :=
e.symm‚Çó_linear_map_at ùïú hb y

lemma continuous_linear_map_at_symmL {b : B} (hb : b ‚àà e.base_set)
  (y : F) :
  e.continuous_linear_map_at ùïú b (e.symmL ùïú b y) = y :=
e.linear_map_at_symm‚Çó ùïú hb y

/-- In a topological vector bundle, a trivialization in the fiber (which is a priori only linear)
is in fact a continuous linear equiv between the fibers and the model fiber. -/
@[simps apply symm_apply {fully_applied := ff}]
def continuous_linear_equiv_at (b : B)
  (hb : b ‚àà e.base_set) : E b ‚âÉL[ùïú] F :=
{ to_fun := Œª y, (e (total_space_mk b y)).2, -- given explicitly to help `simps`
  inv_fun := e.symm b, -- given explicitly to help `simps`
  continuous_to_fun := continuous_snd.comp (e.to_local_homeomorph.continuous_on.comp_continuous
    (total_space_mk_inducing F E b).continuous (Œª x, e.mem_source.mpr hb)),
  continuous_inv_fun := (e.symmL ùïú b).continuous,
  .. e.to_pretrivialization.linear_equiv_at ùïú b hb }

lemma coe_continuous_linear_equiv_at_eq {b : B} (hb : b ‚àà e.base_set) :
  (e.continuous_linear_equiv_at ùïú b hb : E b ‚Üí F) = e.continuous_linear_map_at ùïú b :=
(e.coe_linear_map_at_of_mem ùïú hb).symm

lemma symm_continuous_linear_equiv_at_eq {b : B} (hb : b ‚àà e.base_set) :
  ((e.continuous_linear_equiv_at ùïú b hb).symm : F ‚Üí E b) = e.symmL ùïú b :=
rfl

@[simp] lemma continuous_linear_equiv_at_apply'
  (x : total_space E) (hx : x ‚àà e.source) :
  e.continuous_linear_equiv_at ùïú x.proj (e.mem_source.1 hx) x.2 = (e x).2 := by { cases x, refl }

lemma apply_eq_prod_continuous_linear_equiv_at (b : B)
  (hb : b ‚àà e.base_set) (z : E b) :
  e.to_local_homeomorph ‚ü®b, z‚ü© = (b, e.continuous_linear_equiv_at ùïú b hb z) :=
begin
  ext,
  { refine e.coe_fst _,
    rw e.source_eq,
    exact hb },
  { simp only [coe_coe, continuous_linear_equiv_at_apply] }
end

lemma symm_apply_eq_mk_continuous_linear_equiv_at_symm (b : B)
  (hb : b ‚àà e.base_set) (z : F) :
  e.to_local_homeomorph.symm ‚ü®b, z‚ü©
  = total_space_mk b ((e.continuous_linear_equiv_at ùïú b hb).symm z) :=
begin
  have h : (b, z) ‚àà e.to_local_homeomorph.target,
  { rw e.target_eq,
    exact ‚ü®hb, mem_univ _‚ü© },
  apply e.to_local_homeomorph.inj_on (e.to_local_homeomorph.map_target h),
  { simp only [e.source_eq, hb, mem_preimage]},
  simp_rw [e.apply_eq_prod_continuous_linear_equiv_at ùïú b hb, e.to_local_homeomorph.right_inv h,
    continuous_linear_equiv.apply_symm_apply],
end

lemma comp_continuous_linear_equiv_at_eq_coord_change {b : B}
  (hb : b ‚àà e.base_set ‚à© e'.base_set) :
  (e.continuous_linear_equiv_at ùïú b hb.1).symm.trans (e'.continuous_linear_equiv_at ùïú b hb.2)
  = coord_change ùïú e e' b :=
by { ext v, rw [coord_change_apply ùïú e e' hb], refl }

end trivialization

namespace bundle.trivial
variables (ùïú B F)

/-- Local trivialization for trivial bundle. -/
instance trivialization.linear : (trivialization B F).is_linear ùïú :=
{ linear := Œª x hx, ‚ü®Œª y z, rfl, Œª c y, rfl‚ü© }

lemma trivialization.coord_change (b : B) :
  (trivialization B F).coord_change ùïú (trivialization B F) b = continuous_linear_equiv.refl ùïú F :=
begin
  ext v,
  rw [trivialization.coord_change_apply'],
  exacts [rfl, ‚ü®mem_univ _, mem_univ _‚ü©]
end

instance : vector_bundle ùïú F (bundle.trivial B F) :=
{ trivialization_linear := by { introsI e he, rw [eq_trivialization e], apply_instance },
  continuous_on_coord_change := begin
    introsI e e' he he',
    simp_rw [eq_trivialization e, eq_trivialization e'],
    simp_rw [trivialization.coord_change],
    exact continuous_const.continuous_on
  end }

end bundle.trivial

end




open trivialization
namespace bundle

variables (E‚ÇÅ : B ‚Üí Type*) (E‚ÇÇ : B ‚Üí Type*)
variables [topological_space (total_space E‚ÇÅ)] [topological_space (total_space E‚ÇÇ)]

/-- Equip the total space of the fibrewise product of two topological vector bundles `E‚ÇÅ`, `E‚ÇÇ` with
the induced topology from the diagonal embedding into `total_space E‚ÇÅ √ó total_space E‚ÇÇ`. -/
instance prod.topological_space :
  topological_space (total_space (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
topological_space.induced
  (Œª p, ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ)))
  (by apply_instance : topological_space (total_space E‚ÇÅ √ó total_space E‚ÇÇ))

/-- The diagonal map from the total space of the fibrewise product of two topological vector bundles
`E‚ÇÅ`, `E‚ÇÇ` into `total_space E‚ÇÅ √ó total_space E‚ÇÇ` is `inducing`. -/
lemma prod.inducing_diag : inducing
  (Œª p, (‚ü®p.1, p.2.1‚ü©, ‚ü®p.1, p.2.2‚ü©) :
    total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ) :=
‚ü®rfl‚ü©

end bundle
open bundle

variables [nontrivially_normed_field R] [topological_space B]

variables (F‚ÇÅ : Type*) [normed_add_comm_group F‚ÇÅ] [normed_space R F‚ÇÅ]
  (E‚ÇÅ : B ‚Üí Type*) [topological_space (total_space E‚ÇÅ)]
  [Œ† x, add_comm_monoid (E‚ÇÅ x)] [Œ† x, module R (E‚ÇÅ x)]

variables (F‚ÇÇ : Type*) [normed_add_comm_group F‚ÇÇ] [normed_space R F‚ÇÇ]
  (E‚ÇÇ : B ‚Üí Type*) [topological_space (total_space E‚ÇÇ)]
  [Œ† x, add_comm_monoid (E‚ÇÇ x)] [Œ† x, module R (E‚ÇÇ x)]

namespace trivialization
variables (e‚ÇÅ : trivialization F‚ÇÅ (total_space.proj : total_space E‚ÇÅ ‚Üí B))
variables (e‚ÇÇ : trivialization F‚ÇÇ (total_space.proj : total_space E‚ÇÇ ‚Üí B))
variables [e‚ÇÅ.is_linear R] [e‚ÇÇ.is_linear R]

include e‚ÇÅ e‚ÇÇ
variables {R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the forward
function for the construction `topological_vector_bundle.trivialization.prod`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`. -/
def prod.to_fun' : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí B √ó (F‚ÇÅ √ó F‚ÇÇ) :=
Œª p, ‚ü®p.1, (e‚ÇÅ ‚ü®p.1, p.2.1‚ü©).2, (e‚ÇÇ ‚ü®p.1, p.2.2‚ü©).2‚ü©

variables {e‚ÇÅ e‚ÇÇ}

lemma prod.continuous_to_fun : continuous_on (prod.to_fun' e‚ÇÅ e‚ÇÇ)
  (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set)) :=
begin
  let f‚ÇÅ : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ :=
    Œª p, ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ)),
  let f‚ÇÇ : total_space E‚ÇÅ √ó total_space E‚ÇÇ ‚Üí (B √ó F‚ÇÅ) √ó (B √ó F‚ÇÇ) := Œª p, ‚ü®e‚ÇÅ p.1, e‚ÇÇ p.2‚ü©,
  let f‚ÇÉ : (B √ó F‚ÇÅ) √ó (B √ó F‚ÇÇ) ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := Œª p, ‚ü®p.1.1, p.1.2, p.2.2‚ü©,
  have hf‚ÇÅ : continuous f‚ÇÅ := (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous,
  have hf‚ÇÇ : continuous_on f‚ÇÇ (e‚ÇÅ.source √óÀ¢ e‚ÇÇ.source) :=
    e‚ÇÅ.to_local_homeomorph.continuous_on.prod_map e‚ÇÇ.to_local_homeomorph.continuous_on,
  have hf‚ÇÉ : continuous f‚ÇÉ :=
    (continuous_fst.comp continuous_fst).prod_mk (continuous_snd.prod_map continuous_snd),
  refine ((hf‚ÇÉ.comp_continuous_on hf‚ÇÇ).comp hf‚ÇÅ.continuous_on _).congr _,
  { rw [e‚ÇÅ.source_eq, e‚ÇÇ.source_eq],
    exact maps_to_preimage _ _ },
  rintros ‚ü®b, v‚ÇÅ, v‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©,
  simp only [prod.to_fun', prod.mk.inj_iff, eq_self_iff_true, and_true],
  rw e‚ÇÅ.coe_fst,
  rw [e‚ÇÅ.source_eq, mem_preimage],
  exact hb‚ÇÅ,
end

variables (e‚ÇÅ e‚ÇÇ)

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the inverse
function for the construction `topological_vector_bundle.trivialization.prod`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`. -/
def prod.inv_fun' (p : B √ó (F‚ÇÅ √ó F‚ÇÇ)) : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) :=
‚ü®p.1, e‚ÇÅ.symm p.1 p.2.1, e‚ÇÇ.symm p.1 p.2.2‚ü©

variables {e‚ÇÅ e‚ÇÇ}

lemma prod.left_inv {x : total_space (E‚ÇÅ √ó·µá E‚ÇÇ)}
  (h : x ‚àà @total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set)) :
  prod.inv_fun' e‚ÇÅ e‚ÇÇ (prod.to_fun' e‚ÇÅ e‚ÇÇ x) = x :=
begin
  obtain ‚ü®x, v‚ÇÅ, v‚ÇÇ‚ü© := x,
  obtain ‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü© := h,
  simp only [prod.to_fun', prod.inv_fun', symm_apply_apply_mk, h‚ÇÅ, h‚ÇÇ]
end

lemma prod.right_inv {x : B √ó F‚ÇÅ √ó F‚ÇÇ}
  (h : x ‚àà (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ (univ : set (F‚ÇÅ √ó F‚ÇÇ))) :
  prod.to_fun' e‚ÇÅ e‚ÇÇ (prod.inv_fun' e‚ÇÅ e‚ÇÇ x) = x :=
begin
  obtain ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü© := x,
  obtain ‚ü®‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü©, -‚ü© := h,
  simp only [prod.to_fun', prod.inv_fun', apply_mk_symm, h‚ÇÅ, h‚ÇÇ]
end

lemma prod.continuous_inv_fun :
  continuous_on (prod.inv_fun' e‚ÇÅ e‚ÇÇ) ((e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ univ) :=
begin
  rw (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous_on_iff,
  have H‚ÇÅ : continuous (Œª p : B √ó F‚ÇÅ √ó F‚ÇÇ, ((p.1, p.2.1), (p.1, p.2.2))) :=
    (continuous_id.prod_map continuous_fst).prod_mk (continuous_id.prod_map continuous_snd),
  refine (e‚ÇÅ.continuous_on_symm.prod_map e‚ÇÇ.continuous_on_symm).comp H‚ÇÅ.continuous_on _,
  exact Œª x h, ‚ü®‚ü®h.1.1, mem_univ _‚ü©, ‚ü®h.1.2, mem_univ _‚ü©‚ü©
end

variables (e‚ÇÅ e‚ÇÇ)
variables [Œ† x : B, topological_space (E‚ÇÅ x)] [Œ† x : B, topological_space (E‚ÇÇ x)]
  [fiber_bundle F‚ÇÅ E‚ÇÅ] [fiber_bundle F‚ÇÇ E‚ÇÇ]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`, whose base set is `e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set`.
-/
@[nolint unused_arguments]
def prod : trivialization (F‚ÇÅ √ó F‚ÇÇ) (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
{ to_fun := prod.to_fun' e‚ÇÅ e‚ÇÇ,
  inv_fun := prod.inv_fun' e‚ÇÅ e‚ÇÇ,
  source := (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ)) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set),
  target := (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ set.univ,
  map_source' := Œª x h, ‚ü®h, set.mem_univ _‚ü©,
  map_target' := Œª x h, h.1,
  left_inv' := Œª x, prod.left_inv,
  right_inv' := Œª x, prod.right_inv,
  open_source := begin
    refine (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).preimage _,
    exact (continuous_proj F‚ÇÅ E‚ÇÅ).comp (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous.fst,
  end,
  open_target := (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).prod is_open_univ,
  continuous_to_fun := prod.continuous_to_fun,
  continuous_inv_fun := prod.continuous_inv_fun,
  base_set := e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set,
  open_base_set := e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set,
  source_eq := rfl,
  target_eq := rfl,
  proj_to_fun := Œª x h, rfl }

variables [vector_bundle R F‚ÇÅ E‚ÇÅ] [vector_bundle R F‚ÇÇ E‚ÇÇ]

instance prod.is_linear [e‚ÇÅ.is_linear R] [e‚ÇÇ.is_linear R] : (e‚ÇÅ.prod e‚ÇÇ).is_linear R :=
{ linear := Œª x ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, (((e‚ÇÅ.linear R h‚ÇÅ).mk' _).prod_map ((e‚ÇÇ.linear R h‚ÇÇ).mk' _)).is_linear }

@[simp] lemma base_set_prod : (prod e‚ÇÅ e‚ÇÇ).base_set = e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set :=
rfl

variables {e‚ÇÅ e‚ÇÇ}

lemma prod_apply {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.base_set) (hx‚ÇÇ : x ‚àà e‚ÇÇ.base_set) (v‚ÇÅ : E‚ÇÅ x)
  (v‚ÇÇ : E‚ÇÇ x) :
  prod e‚ÇÅ e‚ÇÇ ‚ü®x, (v‚ÇÅ, v‚ÇÇ)‚ü©
  = ‚ü®x, e‚ÇÅ.continuous_linear_equiv_at R x hx‚ÇÅ v‚ÇÅ, e‚ÇÇ.continuous_linear_equiv_at R x hx‚ÇÇ v‚ÇÇ‚ü© :=
rfl

lemma prod_symm_apply (x : B) (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) : (prod e‚ÇÅ e‚ÇÇ).to_local_equiv.symm (x, w‚ÇÅ, w‚ÇÇ)
  = ‚ü®x, e‚ÇÅ.symm x w‚ÇÅ, e‚ÇÇ.symm x w‚ÇÇ‚ü© :=
rfl

end trivialization

open trivialization

variables [Œ† x : B, topological_space (E‚ÇÅ x)] [Œ† x : B, topological_space (E‚ÇÇ x)]
  [fiber_bundle F‚ÇÅ E‚ÇÅ] [fiber_bundle F‚ÇÇ E‚ÇÇ]
  [vector_bundle R F‚ÇÅ E‚ÇÅ] [vector_bundle R F‚ÇÇ E‚ÇÇ]

/-- The product of two vector bundles is a vector bundle. -/
instance _root_.bundle.prod.fiber_bundle : fiber_bundle (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) :=
{ total_space_mk_inducing := Œª b,
  begin
    rw (prod.inducing_diag E‚ÇÅ E‚ÇÇ).inducing_iff,
    exact (total_space_mk_inducing F‚ÇÅ E‚ÇÅ b).prod_mk (total_space_mk_inducing F‚ÇÇ E‚ÇÇ b),
  end,
  trivialization_atlas := (Œª (p : trivialization F‚ÇÅ (@total_space.proj B E‚ÇÅ) √ó trivialization F‚ÇÇ (@total_space.proj B E‚ÇÇ)), p.1.prod p.2) ''
    (trivialization_atlas F‚ÇÅ E‚ÇÅ √óÀ¢ trivialization_atlas F‚ÇÇ E‚ÇÇ),
  trivialization_at := Œª b, (trivialization_at F‚ÇÅ E‚ÇÅ b).prod (trivialization_at F‚ÇÇ E‚ÇÇ b),
  mem_base_set_trivialization_at :=
    Œª b, ‚ü®mem_base_set_trivialization_at F‚ÇÅ E‚ÇÅ b, mem_base_set_trivialization_at F‚ÇÇ E‚ÇÇ b‚ü©,
  trivialization_mem_atlas := Œª b,
    ‚ü®(_, _), ‚ü®trivialization_mem_atlas F‚ÇÅ E‚ÇÅ b, trivialization_mem_atlas F‚ÇÇ E‚ÇÇ b‚ü©, rfl‚ü©}

-- lemma eq_prod (e : _root_.trivialization (F‚ÇÅ √ó F‚ÇÇ) (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ)))
--   [he : mem_trivialization_atlas e] : e = trivialization B F :=
-- mem_singleton_iff.mp he.1

/-- The product of two vector bundles is a vector bundle. -/
instance _root_.bundle.prod.vector_bundle :
  vector_bundle R (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) :=
{ trivialization_linear := sorry,
  continuous_on_coord_change := begin
    rintros _ _ ‚ü®‚ü®e‚ÇÅ, e‚ÇÇ‚ü©, ‚ü®he‚ÇÅ, he‚ÇÇ‚ü©, rfl‚ü© ‚ü®‚ü®e‚ÇÅ', e‚ÇÇ'‚ü©, ‚ü®he‚ÇÅ', he‚ÇÇ'‚ü©, rfl‚ü©,
    dsimp only at *,
    resetI,
    have := continuous_on_coord_change e‚ÇÅ e‚ÇÅ',
    have := continuous_on_coord_change R e‚ÇÇ e‚ÇÇ' he‚ÇÇ he‚ÇÇ',
    refine (((continuous_on_coord_change e‚ÇÅ he‚ÇÅ e‚ÇÅ' he‚ÇÅ').mono _).prod_mapL R
      ((continuous_on_coord_change e‚ÇÇ he‚ÇÇ e‚ÇÇ' he‚ÇÇ').mono _)).congr _;
    dsimp only [base_set_prod] with mfld_simps,
    { mfld_set_tac },
    { mfld_set_tac },
    { rintro b hb,
      rw [continuous_linear_map.ext_iff],
      rintro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©,
      show (e‚ÇÅ.prod e‚ÇÇ).coord_change (e‚ÇÅ'.prod e‚ÇÇ') b (v‚ÇÅ, v‚ÇÇ) =
        (e‚ÇÅ.coord_change e‚ÇÅ' b v‚ÇÅ, e‚ÇÇ.coord_change e‚ÇÇ' b v‚ÇÇ),
      rw [e‚ÇÅ.coord_change_apply e‚ÇÅ', e‚ÇÇ.coord_change_apply e‚ÇÇ', (e‚ÇÅ.prod e‚ÇÇ).coord_change_apply'],
      exacts [rfl, hb, ‚ü®hb.1.2, hb.2.2‚ü©, ‚ü®hb.1.1, hb.2.1‚ü©] }
  end }

variables {R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

@[simp] lemma trivialization.continuous_linear_equiv_at_prod {e‚ÇÅ : trivialization R F‚ÇÅ E‚ÇÅ}
  {e‚ÇÇ : trivialization R F‚ÇÇ E‚ÇÇ} {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.base_set) (hx‚ÇÇ : x ‚àà e‚ÇÇ.base_set) :
  (e‚ÇÅ.prod e‚ÇÇ).continuous_linear_equiv_at x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
  = (e‚ÇÅ.continuous_linear_equiv_at x hx‚ÇÅ).prod (e‚ÇÇ.continuous_linear_equiv_at x hx‚ÇÇ) :=
begin
  ext1,
  funext v,
  obtain ‚ü®v‚ÇÅ, v‚ÇÇ‚ü© := v,
  rw [(e‚ÇÅ.prod e‚ÇÇ).continuous_linear_equiv_at_apply, trivialization.prod],
  exact (congr_arg prod.snd (prod_apply hx‚ÇÅ hx‚ÇÇ v‚ÇÅ v‚ÇÇ) : _)
end

end topological_vector_bundle




end
