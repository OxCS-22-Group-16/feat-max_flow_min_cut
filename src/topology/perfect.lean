/-
Copyright (c) 2022 Felix Weilacher. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Felix Weilacher
-/
import topology.separation
import topology.bases
import topology.metric_space.pi_nat

/-!
# Perfect Sets

In this file we define perfect subsets of a topological space, and prove some basic properties,
including a version of the Cantor-Bendixson Theorem.

## Main Definitions

* `perfect C`: A set `C` is perfect, meaning it is closed and every point of it
  is an accumulation point of itself.
* `set.scheme Œ≤ Œ±`: A `Œ≤`-scheme on `Œ±`, a collection of subsets of `Œ±` indexed by `list Œ≤`.
  Used to construct maps `(Œ≤ ‚Üí ‚Ñï) ‚Üí Œ±` as limiting objects.

## Main Statements

* `perfect.splitting`: A perfect nonempty set contains two disjoint perfect nonempty subsets.
  The main inductive step in the construction of an embedding from the Cantor space to a
  perfect nonempty complete metric space.
* `exists_countable_union_perfect_of_is_closed`: One version of the **Cantor-Bendixson Theorem**:
  A closed set in a second countable space can be written as the union of a countable set and a
  perfect set.
* `exists_nat_bool_injection_of_perfect_nonempty`: A perfect nonempty set in a complete metric space
  admits an embedding from the Cantor space.

## Implementation Notes

We do not require perfect sets to be nonempty.

We define a nonstandard predicate, `preperfect`, which drops the closed-ness requirement
from the definition of perfect. In T1 spaces, this is equivalent to having a perfect closure,
see `preperfect_iff_perfect_closure`.

## References

* [kechris1995] (Chapters 6-7)

## Tags

accumulation point, perfect set, Cantor-Bendixson.

-/

open_locale topological_space filter
open topological_space filter set

section basic

variables {Œ± : Type*} [topological_space Œ±] {C : set Œ±}

/-- If `x` is an accumulation point of a set `C` and `U` is a neighborhood of `x`,
then `x` is an accumulation point of `U ‚à© C`. -/
theorem acc_pt.nhds_inter {x : Œ±} {U : set Œ±} (h_acc : acc_pt x (ùìü C)) (hU : U ‚àà ùìù x) :
  acc_pt x (ùìü (U ‚à© C)) :=
begin
  have : ùìù[‚â†] x ‚â§ ùìü U,
  { rw le_principal_iff,
    exact mem_nhds_within_of_mem_nhds hU, },
  rw [acc_pt, ‚Üê inf_principal, ‚Üê inf_assoc, inf_of_le_left this],
  exact h_acc,
end

/-- A set `C` is preperfect if all of its points are accumulation points of itself.
If `C` is nonempty and `Œ±` is a T1 space, this is equivalent to the closure of `C` being perfect.
See `preperfect_iff_perfect_closure`.-/
def preperfect (C : set Œ±) : Prop := ‚àÄ x ‚àà C, acc_pt x (ùìü C)

/-- A set `C` is called perfect if it is closed and all of its
points are accumulation points of itself.
Note that we do not require `C` to be nonempty.-/
structure perfect (C : set Œ±) : Prop :=
(closed : is_closed C)
(acc : preperfect C)

lemma preperfect_iff_nhds : preperfect C ‚Üî ‚àÄ x ‚àà C, ‚àÄ U ‚àà ùìù x, ‚àÉ y ‚àà U ‚à© C, y ‚â† x :=
by simp only [preperfect, acc_pt_iff_nhds]

/-- The intersection of a preperfect set and an open set is preperfect-/
theorem preperfect.open_inter {U : set Œ±} (hC : preperfect C) (hU : is_open U) :
  preperfect (U ‚à© C) :=
begin
  rintros x ‚ü®xU, xC‚ü©,
  apply (hC _ xC).nhds_inter,
  exact hU.mem_nhds xU,
end

/-- The closure of a preperfect set is perfect.
For a converse, see `preperfect_iff_perfect_closure`-/
theorem preperfect.perfect_closure (hC : preperfect C) : perfect (closure C) :=
begin
  split, { exact is_closed_closure },
  intros x hx,
  by_cases h : x ‚àà C; apply acc_pt.mono _ (principal_mono.mpr subset_closure),
  { exact hC _ h },
  have : {x}·∂ú ‚à© C = C := by simp [h],
  rw [acc_pt, nhds_within, inf_assoc, inf_principal, this],
  rw [closure_eq_cluster_pts] at hx,
  exact hx,
end

/-- In a T1 space, being preperfect is equivalent to having perfect closure.-/
theorem preperfect_iff_perfect_closure [t1_space Œ±] :
  preperfect C ‚Üî perfect (closure C) :=
begin
  split; intro h, { exact h.perfect_closure },
  intros x xC,
  have H : acc_pt x (ùìü (closure C)) := h.acc _ (subset_closure xC),
  rw acc_pt_iff_frequently at *,
  have : ‚àÄ y , y ‚â† x ‚àß y ‚àà closure C ‚Üí ‚àÉ·∂† z in ùìù y, z ‚â† x ‚àß z ‚àà C,
  { rintros y ‚ü®hyx, yC‚ü©,
    simp only [‚Üê mem_compl_singleton_iff, @and_comm _ (_ ‚àà C) , ‚Üê frequently_nhds_within_iff,
      hyx.nhds_within_compl_singleton, ‚Üê mem_closure_iff_frequently],
    exact yC, },
  rw ‚Üê frequently_frequently_nhds,
  exact H.mono this,
end

theorem perfect.closure_nhds_inter {U : set Œ±} (hC : perfect C) (x : Œ±) (xC : x ‚àà C) (xU : x ‚àà U)
  (Uop : is_open U) : perfect (closure (U ‚à© C)) ‚àß (closure (U ‚à© C)).nonempty :=
begin
  split,
  { apply preperfect.perfect_closure,
    exact (hC.acc).open_inter Uop, },
  apply nonempty.closure,
  exact ‚ü®x, ‚ü®xU, xC‚ü©‚ü©,
end

/-- Given a perfect nonempty set in a T2.5 space, we can find two disjoint perfect subsets
This is the main inductive step in the proof of the Cantor-Bendixson Theorem-/
lemma perfect.splitting [t2_5_space Œ±] (hC : perfect C) (hnonempty : C.nonempty) :
  ‚àÉ C‚ÇÄ C‚ÇÅ : set Œ±, (perfect C‚ÇÄ ‚àß C‚ÇÄ.nonempty ‚àß C‚ÇÄ ‚äÜ C) ‚àß
  (perfect C‚ÇÅ ‚àß C‚ÇÅ.nonempty ‚àß C‚ÇÅ ‚äÜ C) ‚àß disjoint C‚ÇÄ C‚ÇÅ :=
begin
  cases hnonempty with y yC,
  obtain ‚ü®x, xC, hxy‚ü© : ‚àÉ x ‚àà C, x ‚â† y,
  { have := hC.acc _ yC,
    rw acc_pt_iff_nhds at this,
    rcases this univ (univ_mem) with ‚ü®x, xC, hxy‚ü©,
    exact ‚ü®x, xC.2, hxy‚ü©, },
  obtain ‚ü®U, xU, Uop, V, yV, Vop, hUV‚ü© := exists_open_nhds_disjoint_closure hxy,
  use [closure (U ‚à© C), closure (V ‚à© C)],
  split; rw ‚Üê and_assoc,
  { refine ‚ü®hC.closure_nhds_inter x xC xU Uop, _‚ü©,
    rw hC.closed.closure_subset_iff,
    exact inter_subset_right _ _, },
  split,
  { refine ‚ü®hC.closure_nhds_inter y yC yV Vop, _‚ü©,
    rw hC.closed.closure_subset_iff,
    exact inter_subset_right _ _, },
  apply disjoint.mono _ _ hUV; apply closure_mono; exact inter_subset_left _ _,
end

section kernel

/-- The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space
can be written as the union of a countable set and a perfect set.-/
theorem exists_countable_union_perfect_of_is_closed [second_countable_topology Œ±]
  (hclosed : is_closed C) :
  ‚àÉ V D : set Œ±, (V.countable) ‚àß (perfect D) ‚àß (C = V ‚à™ D) :=
begin
  obtain ‚ü®b, bct, bnontrivial, bbasis‚ü© := topological_space.exists_countable_basis Œ±,
  let v := {U ‚àà b | (U ‚à© C).countable},
  let V := ‚ãÉ U ‚àà v, U,
  let D := C \ V,
  have Vct : (V ‚à© C).countable,
  { simp only [Union_inter, mem_sep_iff],
    apply countable.bUnion,
    { exact countable.mono (inter_subset_left _ _) bct, },
    { exact inter_subset_right _ _, }, },
  refine ‚ü®V ‚à© C, D, Vct, ‚ü®_, _‚ü©, _‚ü©,
  { refine hclosed.sdiff (is_open_bUnion (Œª U, _)),
    exact Œª ‚ü®Ub, _‚ü©, is_topological_basis.is_open bbasis Ub, },
  { rw preperfect_iff_nhds,
    intros x xD E xE,
    have : ¬¨ (E ‚à© D).countable,
    { intro h,
      obtain ‚ü®U, hUb, xU, hU‚ü© : ‚àÉ U ‚àà b, x ‚àà U ‚àß U ‚äÜ E,
      { exact (is_topological_basis.mem_nhds_iff bbasis).mp xE, },
      have hU_cnt : (U ‚à© C).countable,
      { apply @countable.mono _ _ ((E ‚à© D) ‚à™ (V ‚à© C)),
        { rintros y ‚ü®yU, yC‚ü©,
          by_cases y ‚àà V,
          { exact mem_union_right _ (mem_inter h yC), },
          { exact mem_union_left _ (mem_inter (hU yU) ‚ü®yC, h‚ü©), }, },
        exact countable.union h Vct, },
      have : U ‚àà v := ‚ü®hUb, hU_cnt‚ü©,
      apply xD.2,
      exact mem_bUnion this xU, },
    by_contradiction h,
    push_neg at h,
    exact absurd (countable.mono h (set.countable_singleton _)) this, },
  { rw [inter_comm, inter_union_diff], },
end

/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset.-/
theorem exists_perfect_nonempty_of_is_closed_of_not_countable [second_countable_topology Œ±]
  (hclosed : is_closed C) (hunc : ¬¨ C.countable) :
  ‚àÉ D : set Œ±, perfect D ‚àß D.nonempty ‚àß D ‚äÜ C :=
begin
  rcases exists_countable_union_perfect_of_is_closed hclosed with ‚ü®V, D, Vct, Dperf, VD‚ü©,
  refine ‚ü®D, ‚ü®Dperf, _‚ü©‚ü©,
  split,
  { rw nonempty_iff_ne_empty,
    by_contradiction,
    rw [h, union_empty] at VD,
    rw VD at hunc,
    contradiction, },
  rw VD,
  exact subset_union_right _ _,
end

end kernel
end basic

section scheme

/-- A `Œ≤`-scheme on `Œ±` is a function from `list Œ≤` to `set Œ±`.
We typically think of this as a "tree" of subsets of `Œ±`, and use the appropriate terminology
(branch, children, etc.).
The usefulness of such a scheme is that a map `(‚Ñï ‚Üí Œ≤) ‚Üí Œ±` can often be thought of as
a sort of "limiting object" of a `Œ≤`-scheme on `Œ±`. -/
def set.scheme (Œ≤ Œ± : Type*) := list Œ≤ ‚Üí set Œ±

namespace set.scheme
open list metric function
open_locale classical

variables {Œ≤ Œ± : Type*} (A : set.scheme Œ≤ Œ±)

/-- `res x n`, or the restriction of `x` to `n`,
is the list of length `n` whose `m`-th entry is `x m`.-/
def res (x : ‚Ñï ‚Üí Œ≤) : ‚Ñï ‚Üí list Œ≤
  | 0            := nil
  | (nat.succ n) := (res n).concat (x n)

@[simp] lemma res_zero (x : ‚Ñï ‚Üí Œ±) : res x 0 = @nil Œ± := rfl
@[simp] lemma res_succ (x : ‚Ñï ‚Üí Œ±) (n : ‚Ñï) : res x n.succ = (res x n).concat (x n) := rfl

@[simp] lemma res_length (x : ‚Ñï ‚Üí Œ±) (n : ‚Ñï) : (res x n).length = n :=
begin
  induction n with n ih,
  { refl },
  simp[ih],
end

/-- The restrictions of `x` and `y` to `n` are equal if and only if `x m = y m` for all `m < n`.-/
lemma res_eq_iff (x y : ‚Ñï ‚Üí Œ±) (n : ‚Ñï) : res x n = res y n ‚Üî ‚àÄ m < n, x m = y m :=
begin
  split; intro h; induction n with n ih, { simp },
  { intros m hm,
    rw nat.lt_succ_iff_lt_or_eq at hm,
    rw [‚Üê reverse_inj] at h,
    simp only [res_succ, concat_eq_append, reverse_append, reverse_singleton,
      singleton_append, reverse_inj] at h,
    cases hm with hm hm,
    { exact ih h.2 _ hm },
    rw hm,
    exact h.1, },
  { simp },
  simp only [res_succ],
  rw [ih _, h _ (nat.lt_succ_self _)],
  intros m hmn,
  exact h m (hmn.trans (nat.lt_succ_self _)),
end

/-- Two infinite sequences are equal if and only if all their restrictions are.-/
theorem eq_iff_res_eq (x y : ‚Ñï ‚Üí Œ±) : (‚àÄ n, res x n = res y n) ‚Üî x = y :=
begin
  split; intro h,
  { ext n,
    specialize h n.succ,
    rw res_eq_iff at h,
    exact h _ (nat.lt_succ_self _), },
  rw h,
  simp,
end

/-- `cylinder x n` is equal to the set of sequences `y` with the same restriction to `n` as `x`.-/
theorem cylinder_eq_res (x : ‚Ñï ‚Üí Œ±) (n : ‚Ñï) : pi_nat.cylinder x n = {y | res y n = res x n} :=
begin
  ext y,
  dsimp[pi_nat.cylinder],
  rw res_eq_iff,
end

/-- From a `Œ≤`-scheme on `Œ±` `A`, we define a partial function from `(‚Ñï ‚Üí Œ≤)` to `Œ±`
which sends each infinite sequence `x` to an element of the intersection along the
branch corresponding to `x`, if it exists.
We call this the map induced by the scheme. -/
noncomputable def map : Œ£ s : set (‚Ñï ‚Üí Œ≤), s ‚Üí Œ± :=
‚ü®Œª x, set.nonempty ‚ãÇ n : ‚Ñï, A (res x n), Œª ‚ü®x, hx‚ü©, hx.some‚ü©

/-- A scheme is antitone if each set contains its children.  -/
def antitone : Prop := ‚àÄ l : list Œ≤, ‚àÄ a : Œ≤, A (l.concat a) ‚äÜ A l

/-- A useful strengthening of being antitone is to require that each set contains
the closure of each of its children. -/
def closure_antitone [topological_space Œ±] : Prop :=
‚àÄ l : list Œ≤, ‚àÄ a : Œ≤, closure(A (l.concat a)) ‚äÜ A l

/-- A scheme is disjoint if the children of each set of pairwise disjoint. -/
def disjoint : Prop := ‚àÄ l : list Œ≤, ‚àÄ a b : Œ≤, a ‚â† b ‚Üí
  disjoint (A (l.concat a)) (A (l.concat b))

/-- A scheme on a metric space has vanishing diameter if diameter approaches 0 along each branch. -/
def vanishing_diam [pseudo_metric_space Œ±] : Prop :=
‚àÄ x : ‚Ñï ‚Üí Œ≤, tendsto (Œª n : ‚Ñï, emetric.diam (A (res x n))) at_top (ùìù 0)

variable {A}

/-- If `x` is in the domain of the induced map of a scheme `A`,
its image under this map is in each set along the corresponding branch. -/
lemma map_mem {x : ‚Ñï ‚Üí Œ≤} (hx : x ‚àà A.map.1) (n : ‚Ñï) : A.map.2 ‚ü®x, hx‚ü© ‚àà A (res x n) :=
begin
  have := hx.some_mem,
  rw mem_Inter at this,
  exact this n,
end

lemma antitone_of_closure_antitoine [topological_space Œ±] (hA : closure_antitone A) : antitone A :=
Œª l a, subset_closure.trans (hA l a)

lemma closure_antitone_of_antitone_of_is_closed [topological_space Œ±] (hanti : antitone A)
  (hclosed : ‚àÄ l, is_closed (A l)) : closure_antitone A :=
begin
  intros l a,
  rw (hclosed _).closure_eq,
  apply hanti,
end

lemma small_dist_of_vanishing_diam [pseudo_metric_space Œ±] (hA : vanishing_diam A)
  (Œµ : ‚Ñù) (Œµ_pos : Œµ > 0) (x : ‚Ñï ‚Üí Œ≤) :
  ‚àÉ n : ‚Ñï, ‚àÄ y z ‚àà A (res x n), dist y z < Œµ :=
begin
  specialize hA x,
  rw ennreal.tendsto_at_top_zero at hA,
  cases hA (ennreal.of_real (Œµ / 2))
    (by { simp only [gt_iff_lt, ennreal.of_real_pos], linarith }) with n hn,
  use n,
  intros y hy z hz,
  rw [‚Üê ennreal.of_real_lt_of_real_iff Œµ_pos, ‚Üê edist_dist],
  apply lt_of_le_of_lt (emetric.edist_le_diam_of_mem hy hz),
  apply lt_of_le_of_lt (hn _ (le_refl _)),
  rw ennreal.of_real_lt_of_real_iff Œµ_pos,
  linarith,
end

/-- A scheme with vanishing diameter along each branch induces a continuous map. -/
theorem map_continuous_of_vanishing_diam [pseudo_metric_space Œ±] [topological_space Œ≤]
  [discrete_topology Œ≤] (hA : vanishing_diam A) : continuous A.map.2 :=
begin
  rw metric.continuous_iff',
  rintros ‚ü®x, hx‚ü© Œµ Œµ_pos,
  cases small_dist_of_vanishing_diam hA _ Œµ_pos x with n hn,
  rw _root_.eventually_nhds_iff,
  refine ‚ü®coe ‚Åª¬π' (pi_nat.cylinder x n), _, _, by simp‚ü©,
  { rintros ‚ü®y, hy‚ü© hyx,
    rw [mem_preimage, subtype.coe_mk, cylinder_eq_res, mem_set_of] at hyx,
    apply hn,
    { rw ‚Üê hyx,
      apply map_mem, },
    apply map_mem, },
  apply continuous_subtype_coe.is_open_preimage,
  apply pi_nat.is_open_cylinder,
end

/-- A scheme with vanishing diameter such that each set contains the closure of its children
induces a total map. -/
theorem map_total_of_vanishing_diam_of_closure_antitone [pseudo_metric_space Œ±] [complete_space Œ±]
  (hdiam : vanishing_diam A) (hanti : closure_antitone A) (hnonempty : ‚àÄ l, (A l).nonempty ) :
  A.map.1 = univ :=
begin
  rw eq_univ_iff_forall,
  intro x,
  have : ‚àÄ n : ‚Ñï, (A (res x n)).nonempty := Œª n, hnonempty _,
  choose u hu using this,
  have umem : ‚àÄ n m : ‚Ñï, n ‚â§ m ‚Üí u m ‚àà A (res x n),
  { have : _root_.antitone (Œª n : ‚Ñï, A (res x n)),
    { refine antitone_nat_of_succ_le _,
      intro n,
      rw res_succ,
      apply antitone_of_closure_antitoine hanti, },
    intros n m hnm,
    exact this hnm (hu _), },
  have : cauchy_seq u,
  { rw metric.cauchy_seq_iff,
    intros Œµ Œµ_pos,
    cases small_dist_of_vanishing_diam hdiam _ Œµ_pos x with n hn,
    use n,
    intros m‚ÇÄ hm‚ÇÄ m‚ÇÅ hm‚ÇÅ,
    apply hn; apply umem; assumption, },
  cases cauchy_seq_tendsto_of_complete this with y hy,
  use y,
  rw mem_Inter,
  intro n,
  apply hanti _ (x n),
  apply mem_closure_of_tendsto hy,
  rw [‚Üê res_succ, eventually_at_top],
  use n.succ,
  intros m hm,
  exact umem _ _ hm,
end

/-- A scheme where the children of each set are pairwise disjoint induces an injective map. -/
theorem map_injective_of_disjoint (hA : disjoint A) : injective A.map.2 :=
begin
  rintros ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© hxy,
  rw [‚Üê subtype.val_inj, ‚Üê eq_iff_res_eq],
  intro n,
  induction n with n ih, { simp },
  simp only [res_succ],
  suffices : x n = y n, { rw [ih, this] },
  contrapose hA,
  simp only [disjoint, ne.def, not_forall, exists_prop],
  refine ‚ü®res x n, _, _, hA, _‚ü©,
  rw not_disjoint_iff,
  use A.map.2 ‚ü®x, hx‚ü©,
  split,
  { rw ‚Üê res_succ,
    apply map_mem, },
  rw [hxy, ih, ‚Üê res_succ],
  apply map_mem,
end

end set.scheme
end scheme

section cantor_inj

open function
variables {Œ± : Type*} [metric_space Œ±] {C : set Œ±} (hC : perfect C)
include hC

lemma perfect.small_diam_aux (Œµ : ennreal) (Œµ_pos : Œµ > 0) {x : Œ±} (xC : x ‚àà C) :
  let D := closure (emetric.ball x (Œµ / 2) ‚à© C) in
  perfect D ‚àß D.nonempty ‚àß D ‚äÜ C ‚àß emetric.diam D ‚â§ Œµ :=
begin
  have : x ‚àà (emetric.ball x (Œµ / 2)),
  { apply emetric.mem_ball_self,
    rw ennreal.div_pos_iff,
    exact ‚ü®ne_of_gt Œµ_pos, by norm_num‚ü©, },
  have := hC.closure_nhds_inter x xC this emetric.is_open_ball,
  refine ‚ü®this.1, this.2, _, _‚ü©,
  { rw is_closed.closure_subset_iff hC.closed,
    apply inter_subset_right, },
  rw emetric.diam_closure,
  apply le_trans (emetric.diam_mono (inter_subset_left _ _)),
  convert emetric.diam_ball,
  rw [mul_comm, ennreal.div_mul_cancel]; norm_num,
end

variable (hnonempty : C.nonempty)
include hnonempty

/-- A refinement of `perfect.splitting` for metric spaces, where we also control
the diameter of the new perfect sets. -/
lemma perfect.small_diam_splitting (Œµ : ennreal) (Œµ_pos : Œµ > 0) : ‚àÉ C‚ÇÄ C‚ÇÅ : set Œ±,
  (perfect C‚ÇÄ ‚àß C‚ÇÄ.nonempty ‚àß C‚ÇÄ ‚äÜ C ‚àß emetric.diam C‚ÇÄ ‚â§ Œµ) ‚àß
  (perfect C‚ÇÅ ‚àß C‚ÇÅ.nonempty ‚àß C‚ÇÅ ‚äÜ C ‚àß emetric.diam C‚ÇÅ ‚â§ Œµ) ‚àß disjoint C‚ÇÄ C‚ÇÅ :=
begin
  rcases hC.splitting hnonempty with ‚ü®D‚ÇÄ, D‚ÇÅ, ‚ü®perf0, non0, sub0‚ü©, ‚ü®perf1, non1, sub1‚ü©, hdisj‚ü©,
  cases non0 with x‚ÇÄ hx‚ÇÄ,
  cases non1 with x‚ÇÅ hx‚ÇÅ,
  rcases perf0.small_diam_aux _ Œµ_pos hx‚ÇÄ with ‚ü®perf0', non0', sub0', diam0‚ü©,
  rcases perf1.small_diam_aux _ Œµ_pos hx‚ÇÅ with ‚ü®perf1', non1', sub1', diam1‚ü©,
  refine ‚ü®closure (emetric.ball x‚ÇÄ (Œµ / 2) ‚à© D‚ÇÄ), closure (emetric.ball x‚ÇÅ (Œµ / 2) ‚à© D‚ÇÅ),
    ‚ü®perf0', non0', sub0'.trans sub0, diam0‚ü©, ‚ü®perf1', non1', sub1'.trans sub1, diam1‚ü©, _‚ü©,
  apply disjoint.mono _ _ hdisj; assumption,
end

open set.scheme

/-- Any nonempty perfect set in a complete metric space admits a continuous injection
from the cantor space, `‚Ñï ‚Üí bool`. -/
theorem exists_nat_bool_injection_of_perfect_nonempty [complete_space Œ±]
  (hC : perfect C) (hnonempty : C.nonempty) :
  ‚àÉ f : (‚Ñï ‚Üí bool) ‚Üí Œ±, (range f) ‚äÜ C ‚àß continuous f ‚àß injective f :=
begin
  let u : ‚Ñï ‚Üí ennreal := Œª n, n‚Åª¬π,
  have upos : ‚àÄ n, 0 < (u n) := Œª n, by simp,
  let P := subtype (Œª E : set Œ±, perfect E ‚àß E.nonempty),
  choose C0 C1 h0 h1 hdisj using @perfect.small_diam_splitting Œ± infer_instance,
  change ‚àÄ {C} {hC : perfect C} {hnonempty : C.nonempty} {Œµ : ennreal} {Œµ_pos : Œµ > 0}, _ at h0,
  change ‚àÄ {C} {hC : perfect C} {hnonempty : C.nonempty} {Œµ : ennreal} {Œµ_pos : Œµ > 0}, _ at h1,
  change ‚àÄ {C} {hC : perfect C} {hnonempty : C.nonempty} {Œµ : ennreal} {Œµ_pos : Œµ > 0}, _ at hdisj,
  let DP : list bool ‚Üí P := Œª l,
  begin
    induction l using list.reverse_rec_on with l a ih, { exact ‚ü®C, ‚ü®hC, hnonempty‚ü©‚ü© },
    cases a,
    { use C0 ih.property.1 ih.property.2 (u l.length.succ) (upos _),
      exact ‚ü®h0.1, h0.2.1‚ü©, },
    use C1 ih.property.1 ih.property.2 (u l.length.succ) (upos _),
    exact ‚ü®h1.1, h1.2.1‚ü©,
  end,
  let D : set.scheme bool Œ± := Œª l, (DP l).val,
  have Ddef : ‚àÄ l : list bool, ‚àÄ a : bool, D (l.concat a) = bool.rec --this is terrible
    (C0 (DP l).property.1 (DP l).property.2 (u l.length.succ) (upos l.length.succ))
    (C1 (DP l).property.1 (DP l).property.2 (u l.length.succ) (upos l.length.succ)) a,
  { intros l a,
    dsimp[D, DP, list.reverse_rec_on],
    rw list.reverse_concat,
    dsimp,
    rw list.reverse_reverse,
    cases a; refl, },
  have hanti : closure_antitone D,
  { refine closure_antitone_of_antitone_of_is_closed _ (Œª l, (DP l).property.1.closed),
    intros l a,
    rw Ddef,
    cases a,
    { exact h0.2.2.1, },
    exact h1.2.2.1, },
  have hdiam : vanishing_diam D,
  { intro x,
    apply tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds
      ennreal.tendsto_inv_nat_nhds_zero; intro n,
    { exact zero_le' },
    cases n, { simp },
    dsimp,
    rw [Ddef, res_length],
    cases (x n),
    { exact h0.2.2.2, },
    exact h1.2.2.2, },
  have hdisj : disjoint D,
  { intros l a b hab,
    cases a; cases b; try { contradiction }; rw[Ddef, Ddef],
    { exact hdisj, },
    exact hdisj.symm,  },
  have hdom : ‚àÄ {x : ‚Ñï ‚Üí bool}, x ‚àà D.map.1 := Œª x,
    by simp[map_total_of_vanishing_diam_of_closure_antitone hdiam hanti (Œª l, (DP l).property.2)],
  refine ‚ü®Œª x, D.map.2 ‚ü®x, hdom‚ü©, _, _, _‚ü©,
  { rintros y ‚ü®x, rfl‚ü©,
    convert map_mem hdom 0,
    dsimp[D, DP, list.reverse_rec_on],
    refl, },
  { continuity,
    exact map_continuous_of_vanishing_diam hdiam, },
  intros x y hxy,
  have := map_injective_of_disjoint hdisj hxy,
  rwa ‚Üê subtype.val_inj at this,
end

end cantor_inj
