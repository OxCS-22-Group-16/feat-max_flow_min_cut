/-
Copyright (c) 2022 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import algebra.order.upper_lower
import analysis.normed.field.basic

/-!
# Topological facts about upper/lower/order-connected sets

The topological closure and interior of an upper/lower/order-connected set is an
upper/lower/order-connected set (with the notable exception of the closure of an order-connected
set).

We also prove lemmas specific to `‚Ñù‚Åø`. Those are helpful to prove that order-connected sets in `‚Ñù‚Åø`
are measurable.
-/
-- move `real.norm_of_nonneg`

section
variables {Œ± : Type*} [topological_space Œ±] [linear_order Œ±]

open filter set topological_space
open_locale topological_space

lemma exists_seq_strict_anti_tendsto_nhds_within [order_topology Œ±] [densely_ordered Œ±]
  [no_max_order Œ±] [first_countable_topology Œ±] (x : Œ±) :
  ‚àÉ u : ‚Ñï ‚Üí Œ±, strict_anti u ‚àß (‚àÄ n, x < u n) ‚àß tendsto u at_top (ùìù[>] x) :=
let ‚ü®u, hu, hx, h‚ü© := exists_seq_strict_anti_tendsto x in ‚ü®u, hu, hx,
  tendsto_nhds_within_mono_right (range_subset_iff.2 hx) $ tendsto_nhds_within_range.2 h‚ü©

end

namespace tactic
open positivity

private lemma ennreal_of_real_pos {r : ‚Ñù} : 0 < r ‚Üí 0 < ennreal.of_real r := ennreal.of_real_pos.2

/-- Extension for the `positivity` tactic: `ennreal.of_real` is positive if its input is. -/
@[positivity]
meta def positivity_ennreal_of_real : expr ‚Üí tactic strictness
| `(ennreal.of_real %%r) := do
    positive p ‚Üê core r,
    positive <$> mk_app ``ennreal_of_real_pos [p]
| e := pp e >>= fail ‚àò format.bracket "The expression `" "` is not of the form `ennreal.of_real r`"

end tactic

namespace ennreal
open_locale ennreal

variables {a b c : ‚Ñù‚â•0‚àû}

protected lemma div_le_div_left (h : a ‚â§ b) (c : ‚Ñù‚â•0‚àû) : c / b ‚â§ c / a :=
ennreal.div_le_div le_rfl h

protected lemma div_le_div_right (h : a ‚â§ b) (c : ‚Ñù‚â•0‚àû) : a / c ‚â§ b / c :=
ennreal.div_le_div h le_rfl

protected lemma sub_div (h : 0 < b ‚Üí b < a ‚Üí c ‚â† 0) : (a - b) / c = a / c - b / c :=
by { simp_rw div_eq_mul_inv, exact ennreal.sub_mul (by simpa using h) }

end ennreal

section
variables {Œπ Œ± : Type*} [fintype Œπ] [pseudo_emetric_space Œ±]

lemma edist_pi_const_le (a b : Œ±) : edist (Œª _ : Œπ, a) (Œª _, b) ‚â§ edist a b :=
edist_pi_le_iff.2 $ Œª _, le_rfl

end

section
variables {Œπ Œ± : Type*} [fintype Œπ] [pseudo_metric_space Œ±]

lemma dist_pi_const_le (a b : Œ±) : dist (Œª _ : Œπ, a) (Œª _, b) ‚â§ dist a b :=
(dist_pi_le_iff dist_nonneg).2 $ Œª _, le_rfl

lemma nndist_pi_const_le (a b : Œ±) : nndist (Œª _ : Œπ, a) (Œª _, b) ‚â§ nndist a b :=
nndist_pi_le_iff.2 $ Œª _, le_rfl

end

section
variables {Œ≤ : Type*} {œÄ : Œ≤ ‚Üí Type*} [nonempty Œ≤] [fintype Œ≤] [Œ† b, pseudo_metric_space (œÄ b)]
  {f g : Œ† b, œÄ b} {r : ‚Ñù}

lemma dist_pi_le_iff' : dist f g ‚â§ r ‚Üî ‚àÄ b, dist (f b) (g b) ‚â§ r :=
begin
  by_cases hr : 0 ‚â§ r,
  { exact dist_pi_le_iff hr },
  { exact iff_of_false (Œª h, hr $ dist_nonneg.trans h)
      (Œª h, hr $ dist_nonneg.trans $ h $ classical.arbitrary _) }
end

end

section
variables {Œ≤ : Type*} {œÄ : Œ≤ ‚Üí Type*} [nonempty Œ≤] [fintype Œ≤]
  [Œ† b, seminormed_add_comm_group (œÄ b)] {f : Œ† b, œÄ b} {r : ‚Ñù}

lemma pi_norm_le_iff'' : ‚à•f‚à• ‚â§ r ‚Üî ‚àÄ b, ‚à•f b‚à• ‚â§ r :=
begin
  by_cases hr : 0 ‚â§ r,
  { exact pi_norm_le_iff hr },
  { exact iff_of_false (Œª h, hr $ (norm_nonneg _).trans h)
      (Œª h, hr $ (norm_nonneg _).trans $ h $ classical.arbitrary _) }
end

end

section
variables {Œπ E : Type*} [fintype Œπ] [seminormed_add_comm_group E]

lemma pi_norm_const_le (a : E) : ‚à•(Œª _ : Œπ, a)‚à• ‚â§ ‚à•a‚à• :=
(pi_norm_le_iff $ norm_nonneg _).2 $ Œª _, le_rfl

end

section
variables {Œ± Œ≤ : Type*}

@[to_additive] instance order_dual.has_smul' [h : has_smul Œ± Œ≤] : has_smul Œ±·µí·µà Œ≤ := h
@[to_additive order_dual.has_smul']
instance order_dual.has_pow' [h : has_pow Œ± Œ≤] : has_pow Œ± Œ≤·µí·µà := h

instance [topological_space Œ≤] [has_vadd Œ± Œ≤] [has_continuous_const_vadd Œ± Œ≤] :
  has_continuous_const_vadd Œ± Œ≤·µí·µà :=
‚Äπhas_continuous_const_vadd Œ± Œ≤‚Ä∫

@[to_additive] instance [topological_space Œ≤] [has_smul Œ± Œ≤] [has_continuous_const_smul Œ± Œ≤] :
  has_continuous_const_smul Œ± Œ≤·µí·µà :=
‚Äπhas_continuous_const_smul Œ± Œ≤‚Ä∫

@[to_additive] instance order_dual.has_continuous_const_smul' [topological_space Œ≤] [has_smul Œ± Œ≤]
  [has_continuous_const_smul Œ± Œ≤] :
  has_continuous_const_smul Œ±·µí·µà Œ≤ :=
‚Äπhas_continuous_const_smul Œ± Œ≤‚Ä∫

end

open function  metric set
open_locale pointwise

variables {Œ± Œπ : Type*}

section
variables [topological_space Œ±] [ordered_comm_group Œ±] [has_continuous_const_smul Œ± Œ±]
  {s : set Œ±}

@[to_additive is_upper_set.closure]
protected lemma is_upper_set.closure' (h : is_upper_set s) : is_upper_set (closure s) :=
Œª x y hxy hx, closure_mono (h.smul_subset $ one_le_div'.2 hxy) $
  by { rw closure_smul, exact ‚ü®x, hx, div_mul_cancel' _ _‚ü© }

@[to_additive is_lower_set.closure]
protected lemma is_lower_set.closure' (h : is_lower_set s) : is_lower_set (closure s) :=
h.of_dual.closure'

/-
Note: ` s.ord_connected` does not imply `(closure s).ord_connected`, as we can see by taking
`s := Ioo 0 1 √ó Ioo 1 2 ‚à™ Ioo 2 3 √ó Ioo 0 1` because then
`closure s = Icc 0 1 √ó Icc 1 2 ‚à™ Icc 2 3 √ó Icc 0 1` is not order-connected as
`(1, 1) ‚àà closure s`, `(2, 1) ‚àà closure s` but `Icc (1, 1) (2, 1) ‚äà closure s`.

`s` looks like
```
xxooooo
xxooooo
oooooxx
oooooxx
```
-/

@[to_additive is_upper_set.interior]
protected lemma is_upper_set.interior' (h : is_upper_set s) : is_upper_set (interior s) :=
by { rw [‚Üêis_lower_set_compl, ‚Üêclosure_compl], exact h.compl.closure' }

@[to_additive is_lower_set.interior]
protected lemma is_lower_set.interior' (h : is_lower_set s) : is_lower_set (interior s) :=
h.of_dual.interior'

@[to_additive set.ord_connected.interior]
protected lemma set.ord_connected.interior' (h : s.ord_connected) : (interior s).ord_connected :=
begin
  rw [‚Üêh.upper_closure_inter_lower_closure, interior_inter],
  exact (upper_closure s).upper.interior'.ord_connected.inter
    (lower_closure s).lower.interior'.ord_connected,
end

end

/-! ### `‚Ñù‚Åø` -/

section finite
variables [finite Œπ] {s : set (Œπ ‚Üí ‚Ñù)} {x y : Œπ ‚Üí ‚Ñù} {Œ¥ : ‚Ñù}

lemma is_upper_set.mem_interior_of_forall_lt (hs : is_upper_set s) (hx : x ‚àà closure s)
  (h : ‚àÄ i, x i < y i) :
  y ‚àà interior s :=
begin
  casesI nonempty_fintype Œπ,
  obtain ‚ü®Œµ, hŒµ, hxy‚ü© := pi.exists_forall_pos_add_lt h,
  obtain ‚ü®z, hz, hxz‚ü© := metric.mem_closure_iff.1 hx _ hŒµ,
  rw dist_pi_lt_iff hŒµ at hxz,
  have hyz : ‚àÄ i, z i < y i,
  { refine Œª i, (hxy _).trans_le' (sub_le_iff_le_add'.1 $ (le_abs_self _).trans _),
    rw [‚Üêreal.norm_eq_abs, ‚Üêdist_eq_norm'],
    exact (hxz _).le },
  obtain ‚ü®Œ¥, hŒ¥, hyz‚ü© := pi.exists_forall_pos_add_lt hyz,
  refine mem_interior.2 ‚ü®ball y Œ¥, _, is_open_ball, mem_ball_self hŒ¥‚ü©,
  rintro w hw,
  refine hs (Œª i, _) hz,
  simp_rw [ball_pi _ hŒ¥, real.ball_eq_Ioo] at hw,
  exact ((lt_sub_iff_add_lt.2 $ hyz _).trans (hw _ $ mem_univ _).1).le,
end

lemma is_lower_set.mem_interior_of_forall_lt (hs : is_lower_set s) (hx : x ‚àà closure s)
  (h : ‚àÄ i, y i < x i) :
  y ‚àà interior s :=
begin
  casesI nonempty_fintype Œπ,
  obtain ‚ü®Œµ, hŒµ, hxy‚ü© := pi.exists_forall_pos_add_lt h,
  obtain ‚ü®z, hz, hxz‚ü© := metric.mem_closure_iff.1 hx _ hŒµ,
  rw dist_pi_lt_iff hŒµ at hxz,
  have hyz : ‚àÄ i, y i < z i,
  { refine Œª i, (lt_sub_iff_add_lt.2 $ hxy _).trans_le (_root_.sub_le.1 $ (le_abs_self _).trans _),
    rw [‚Üêreal.norm_eq_abs, ‚Üêdist_eq_norm],
    exact (hxz _).le },
  obtain ‚ü®Œ¥, hŒ¥, hyz‚ü© := pi.exists_forall_pos_add_lt hyz,
  refine mem_interior.2 ‚ü®ball y Œ¥, _, is_open_ball, mem_ball_self hŒ¥‚ü©,
  rintro w hw,
  refine hs (Œª i, _) hz,
  simp_rw [ball_pi _ hŒ¥, real.ball_eq_Ioo] at hw,
  exact ((hw _ $ mem_univ _).2.trans $ hyz _).le,
end

end finite

section fintype
variables [fintype Œπ] {s : set (Œπ ‚Üí ‚Ñù)} {x y : Œπ ‚Üí ‚Ñù} {Œ¥ : ‚Ñù}

lemma is_upper_set.exists_subset_ball (hs : is_upper_set s) (hx : x ‚àà closure s) (hŒ¥ : 0 < Œ¥) :
  ‚àÉ y, closed_ball y (Œ¥/4) ‚äÜ closed_ball x Œ¥ ‚àß closed_ball y (Œ¥/4) ‚äÜ interior s :=
begin
  refine ‚ü®x + const _ (3/4*Œ¥), closed_ball_subset_closed_ball' _, _‚ü©,
  { rw dist_self_add_left,
    refine (add_le_add_left (pi_norm_const_le _) _).trans_eq _,
    simp [real.norm_of_nonneg, hŒ¥.le, zero_le_three],
    ring_nf },
  obtain ‚ü®y, hy, hxy‚ü© := metric.mem_closure_iff.1 hx _ (div_pos hŒ¥ zero_lt_four),
  refine Œª z hz, hs.mem_interior_of_forall_lt (subset_closure hy) (Œª i, _),
  rw [mem_closed_ball, dist_eq_norm'] at hz,
  rw dist_eq_norm at hxy,
  replace hxy := (norm_le_pi_norm _ i).trans hxy.le,
  replace hz := (norm_le_pi_norm _ i).trans hz,
  dsimp at hxy hz,
  rw abs_sub_le_iff at hxy hz,
  linarith,
end

lemma is_lower_set.exists_subset_ball (hs : is_lower_set s) (hx : x ‚àà closure s) (hŒ¥ : 0 < Œ¥) :
  ‚àÉ y, closed_ball y (Œ¥/4) ‚äÜ closed_ball x Œ¥ ‚àß closed_ball y (Œ¥/4) ‚äÜ interior s :=
begin
  refine ‚ü®x - const _ (3/4*Œ¥), closed_ball_subset_closed_ball' _, _‚ü©,
  { rw dist_self_sub_left,
    refine (add_le_add_left (pi_norm_const_le _) _).trans_eq _,
    simp [real.norm_of_nonneg, hŒ¥.le, zero_le_three],
    ring_nf },
  obtain ‚ü®y, hy, hxy‚ü© := metric.mem_closure_iff.1 hx _ (div_pos hŒ¥ zero_lt_four),
  refine Œª z hz, hs.mem_interior_of_forall_lt (subset_closure hy) (Œª i, _),
  rw [mem_closed_ball, dist_eq_norm'] at hz,
  rw dist_eq_norm at hxy,
  replace hxy := (norm_le_pi_norm _ i).trans hxy.le,
  replace hz := (norm_le_pi_norm _ i).trans hz,
  dsimp at hxy hz,
  rw abs_sub_le_iff at hxy hz,
  linarith,
end

end fintype
