import topology.metric_space.emetric_space
import analysis.bounded_variation
import topology.path_connected

noncomputable theory

open_locale nnreal ennreal big_operators

private abbreviation ùïÄ := unit_interval

set_option profiler true

lemma half_nonneg {Œ± : Type*} [linear_ordered_semifield Œ±] {a : Œ±} (h : 0 ‚â§ a) :
  0 ‚â§ a / 2 := sorry

section real_line_map

variables (a b : ‚Ñù)

lemma continuous_line_map : continuous (Œª x, a + (b-a)*x) := sorry

lemma surj_on_unit_interval_line_map_of_le (h : a ‚â§ b) :
  set.surj_on (Œª x, a + (b-a)*x) unit_interval (set.Icc a b) := sorry
lemma maps_to_unit_interval_line_map_of_le (h : a ‚â§ b) :
  set.maps_to (Œª x, a + (b-a)*x) unit_interval (set.Icc a b) := sorry
lemma monotone_line_map_of_le (h : a ‚â§ b) :
  monotone (Œª x, a + (b-a)*x) := sorry

lemma surj_on_unit_interval_line_map_of_ge (h : b ‚â§ a) :
  set.surj_on (Œª x, a + (b-a)*x) unit_interval (set.Icc b a) := sorry
lemma maps_to_unit_interval_line_map_of_ge (h : b ‚â§ a) :
  set.maps_to (Œª x, a + (b-a)*x) unit_interval (set.Icc b a) := sorry
lemma antitone_line_map_of_ge (h : b ‚â§ a) :
  antitone (Œª x, a + (b-a)*x) := sorry

end real_line_map

namespace evariation_on

lemma sum_on_Icc_le {Œ± E : Type*} [linear_order Œ±] [pseudo_emetric_space E]
  (f : Œ± ‚Üí E) {s : set Œ±} (n : ‚Ñï) {u : ‚Ñï ‚Üí Œ±} (hu : monotone u) (us : ‚àÄ i, i ‚â§ n ‚Üí u i ‚àà s) :
  ‚àë i in finset.range n, evariation_on f (set.Icc (u i) (u i.succ) ‚à© s) ‚â§ evariation_on f s :=
begin
  revert s,
  induction n,
  { rintro s us, simp only [finset.range_zero, finset.sum_empty, zero_le'], },
  { rintro s us,
    specialize @n_ih {x | x ‚àà s ‚àß x ‚â§ u n_n} (Œª i hi,  ‚ü®us i (hi.trans (nat.le_succ _)), hu hi‚ü©),
    rw finset.sum_range_succ,
    have : ‚àë (i : ‚Ñï) in finset.range n_n, evariation_on f (set.Icc (u i) (u i.succ) ‚à©
                                                           {x : Œ± | x ‚àà s ‚àß x ‚â§ u n_n})
         = ‚àë (i : ‚Ñï) in finset.range n_n, evariation_on f (set.Icc (u i) (u i.succ) ‚à© s), by
    { refine finset.sum_congr rfl (Œª i hi, _),
      congr' 1 with x : 1,
      refine ‚ü®Œª h, ‚ü®h.1,h.2.1‚ü©, Œª h, ‚ü®h.1, ‚ü®h.2, h.1.2.trans (hu (nat.succ_le_of_lt _))‚ü©‚ü©‚ü©,
      rw finset.mem_range at hi,
      exact hi, },
    rw this at n_ih,
    refine (add_le_add_right n_ih _).trans ((add_le_union f _).trans (mono f _)),
    { rintros x ‚ü®_,hx‚ü© y ‚ü®‚ü®hy,_‚ü©,_‚ü©, exact hx.trans hy, },
    { rintros x (‚ü®h,_‚ü©|‚ü®_,h‚ü©); exact h, }, },
end

end evariation_on

namespace unit_interval

lemma half_mem : (1:‚Ñù) / 2 ‚àà unit_interval := div_mem zero_le_one zero_le_two one_le_two

/-- The midpoint of the unit interval -/
abbreviation half : unit_interval := ‚ü®_, half_mem‚ü©

end unit_interval

namespace path

lemma extend_symm
  {X : Type*} [topological_space X] {x y : X} (Œ≥ : path x y) :
  Œ≥.symm.extend = Œ≥.extend ‚àò (Œª x, 1 - x) := sorry

lemma extend_trans_on_bot_half
  {X : Type*} [topological_space X] {x y z : X} (Œ≥ : path x y) (Œ≥' : path y z) :
  (set.Icc (0:‚Ñù) ((1:‚Ñù)/2)).eq_on (Œ≥.trans Œ≥').extend (Œ≥.extend ‚àò (Œª t, 2*t)) := sorry

lemma extend_trans_on_top_half
  {X : Type*} [topological_space X] {x y z : X} (Œ≥ : path x y) (Œ≥' : path y z) :
  (set.Icc ((1:‚Ñù)/2) 1).eq_on (Œ≥.trans Œ≥').extend (Œ≥'.extend ‚àò (Œª t, 2*t - 1)) := sorry

/- This is surely somewhere since it's needed for functoriality of the fundamental group -/
def comp
  {X : Type*} [topological_space X] {x y : X} (Œ≥ : path x y)
  {Y : Type*} [topological_space Y] (œÜ : X ‚Üí Y) (œÜc : continuous œÜ ) : path (œÜ x) (œÜ y) := sorry

lemma extend_comp
  {X : Type*} [topological_space X] {x y : X} (Œ≥ : path x y)
  {Y : Type*} [topological_space Y] (œÜ : X ‚Üí Y) (œÜc : continuous œÜ ) :
  (Œ≥.comp œÜ œÜc).extend = œÜ ‚àò Œ≥.extend := sorry

-- Maybe the scaling+translating should be done separately?
lemma of_continuous_on
  {X : Type*} [topological_space X] {x y : X} {s t : ‚Ñù} (st : s ‚â§ t) {f : ‚Ñù ‚Üí X}
  (fsx : f s = x) (fty : f t = y)(fc : continuous_on f (set.Icc s t)) : path x y :=
{ to_fun := f ‚àò (Œª (u : ‚Ñù), s + (t-s)*u) ‚àò (coe : ùïÄ ‚Üí ‚Ñù),
  continuous_to_fun := sorry,
  source' := sorry,
  target' := sorry }

lemma eq_on_extend_of_continuous_on_self
  {X : Type*} [topological_space X] {x y : X} {s t : ‚Ñù} (st : s ‚â§ t) {f : ‚Ñù ‚Üí X}
  (fsx : f s = x) (fty : f t = y) (fc : continuous_on f (set.Icc s t)) :
  ùïÄ.eq_on (path.of_continuous_on st fsx fty fc).extend (f ‚àò (Œª (u : ‚Ñù), s + (t-s)*u)) := sorry

end path

namespace path
variables {E : Type*} [pseudo_emetric_space E]

@[reducible]
def length {x y : E} (p : path x y) : ennreal := evariation_on p.extend ùïÄ

lemma length_ge (x y : E) (p : path x y) : edist x y ‚â§ p.length :=
begin
  dsimp only [path.length],
  simp_rw  [‚Üêp.extend_one, ‚Üêp.extend_zero],
  apply evariation_on.edist_le _ unit_interval.zero_mem unit_interval.one_mem,
end

lemma length_refl (x : E) : (path.refl x).length = 0 :=
begin
  apply evariation_on.constant_on,
  simp only [refl_extend, set.nonempty.image_const, set.nonempty_Icc, zero_le_one,
             set.subsingleton_singleton],
end

lemma length_symm {x y : E} (p : path x y) : p.symm.length = p.length :=
begin
  dsimp [path.length],
  rw path.extend_symm,
  apply evariation_on.comp_eq_of_antitone_on,
  { rintro s hs t ht st, simp only [st, sub_le_sub_iff_left], },
  { rintro s hs, rw ‚Üêunit_interval.mem_iff_one_sub_mem, exact hs, },
  { rintro s hs, refine ‚ü®1-s,_,_‚ü©, rw ‚Üêunit_interval.mem_iff_one_sub_mem, exact hs, simp, },
end

lemma length_trans {x y z : E} (p : path x y) (q : path y z) :
  (p.trans q).length = p.length + q.length :=
begin
  dsimp only [path.length],
  nth_rewrite_lhs 0 ‚Üêset.inter_self ùïÄ,
  rw ‚Üêevariation_on.Icc_add_Icc (p.trans q).extend
    unit_interval.half_mem.left unit_interval.half_mem.right unit_interval.half_mem,
  congr' 1,
  { rw set.inter_eq_self_of_subset_right (set.Icc_subset_Icc_right (unit_interval.half_mem.right)),
    rw ‚Üêevariation_on.comp_eq_of_monotone_on (p.extend) (Œª (t : ‚Ñù), 0 + (2 - 0)*t),
    { apply evariation_on.eq_of_eq_on,
      simp only [tsub_zero, zero_add, path.extend_trans_on_bot_half], },
    sorry, sorry, sorry,
  },
  { rw set.inter_eq_self_of_subset_right (set.Icc_subset_Icc_left (unit_interval.half_mem.left)),
    rw ‚Üêevariation_on.comp_eq_of_monotone_on (q.extend) (Œª (t : ‚Ñù), -1 + (3-1)*t),
    { apply evariation_on.eq_of_eq_on,
      simp_rw [neg_add_eq_sub, (sorry : (3:‚Ñù)-1 = 2)],
      apply path.extend_trans_on_top_half, },
    sorry, sorry, sorry, },
end

end path

def path_emetric (E : Type*) [pseudo_emetric_space E] := E

namespace path_emetric

variables {E : Type*} [pseudo_emetric_space E]

def to_path_emetric : E ‚Üí path_emetric E := id
def from_path_emetric : path_emetric E ‚Üí E := id

lemma from_to_path_emetric (x : E) : from_path_emetric (to_path_emetric x) = x := rfl
lemma to_from_path_emetric (x : path_emetric E) : to_path_emetric (from_path_emetric x) = x := rfl

@[protected]
abbreviation of : E ‚Üí path_emetric E := to_path_emetric
@[protected]
abbreviation fo : path_emetric E ‚Üí E := from_path_emetric

instance : pseudo_emetric_space (path_emetric E) :=
{ edist := Œª x y, infi (Œª (p : path (fo x) (fo y)), p.length),
  edist_self := Œª x, by
  { refine le_antisymm _ zero_le',
    rw ‚Üê(path.length_refl $ fo x),
    refine infi_le _ _, },
  edist_comm := Œª x y, by
  { apply le_antisymm;
    { refine le_infi (Œª p, _),
      rw ‚Üêpath.length_symm,
      refine infi_le _ _, }, },
  edist_triangle := Œª x y z, by
  { simp_rw [ennreal.infi_add, ennreal.add_infi],
    apply le_infi‚ÇÇ (Œª p q, _),
    rw ‚Üêpath.length_trans p q,
    exact infi_le _ (p.trans q), } }

lemma from_length_emetric_nonexpanding :
  lipschitz_with 1 (from_path_emetric : path_emetric E ‚Üí E) :=
begin
  rintro x y,
  simp only [edist, ennreal.coe_one, one_mul, le_infi_iff],
  apply path.length_ge,
end

lemma edist_le {x y : E} {p : ‚Ñù ‚Üí E} {s t : ‚Ñù} (st : s ‚â§ t)
  (ps : p s = x) (pt : p t = y) (pc : continuous_on p (set.Icc s t)) :
  edist (of x) (of y) ‚â§ evariation_on p (set.Icc s t) :=
begin
  have : evariation_on p (set.Icc s t) = (evariation_on (p ‚àò (Œª u, s + (t-s)*u)) ùïÄ), by
  { symmetry, apply evariation_on.comp_eq_of_monotone_on,
    exact (monotone_line_map_of_le _ _ st).monotone_on _,
    exact (maps_to_unit_interval_line_map_of_le _ _ st),
    exact (surj_on_unit_interval_line_map_of_le _ _ st), },
  rw [this, ‚Üêevariation_on.eq_of_eq_on (path.eq_on_extend_of_continuous_on_self st ps pt pc)],
  exact infi_le (Œª p, evariation_on p.extend ùïÄ) (path.of_continuous_on st ps pt pc),
end

lemma continuous_for_path_metric_of_bounded_variation_of_continuous {f : ‚Ñù ‚Üí E}
  {s : set ‚Ñù} (hs : ‚àÄ (x z ‚àà s) (y : ‚Ñù), x ‚â§ y ‚Üí y ‚â§ z ‚Üí y ‚àà s)
  (fc : continuous_on f s) (fb : has_locally_bounded_variation_on f s) :
  continuous_on (of ‚àò f) s := sorry

lemma sum_for_path_metric_le_evariation_on_of_bounded_variation {f : ‚Ñù ‚Üí E}
  {s : set ‚Ñù} (hs : ‚àÄ (x z ‚àà s) (y : ‚Ñù), x ‚â§ y ‚Üí y ‚â§ z ‚Üí y ‚àà s)
  (fb : has_locally_bounded_variation_on f s) (fc : continuous_on f s)
  (n : ‚Ñï) {u : ‚Ñï ‚Üí ‚Ñù} (us : ‚àÄ i, u i ‚àà s) (um : monotone u) :
  ‚àë i in finset.range n, edist ((of ‚àò f) (u (i + 1))) ((of ‚àò f) (u i)) ‚â§ evariation_on f s :=
begin
  calc ‚àë i in finset.range n, edist ((of ‚àò f) (u (i + 1))) ((of ‚àò f) (u i))
     ‚â§ ‚àë i in finset.range n, evariation_on f (set.Icc (u i) (u i.succ)) : by
  begin
    refine finset.sum_le_sum (Œª i hi, _),
    rw edist_comm,
    refine edist_le (um (i.le_succ)) rfl rfl (fc.mono $ Œª x ‚ü®xl,xr‚ü©, hs _ (us i) _ (us i.succ) x xl xr ),
  end
  ...= ‚àë i in finset.range n, evariation_on f (set.Icc (u i) (u i.succ) ‚à© s) : by
  { congr' 1 with i : 1, congr, symmetry,
    apply set.inter_eq_self_of_subset_left,
    exact Œª t ht, hs (u i) (us i) (u i.succ) (us i.succ) t ht.left ht.right, }
  ...‚â§ evariation_on f s : evariation_on.sum_on_Icc_le f n um (Œª i hi, us i)
end

lemma evariation_on_for_path_metric_le_evariation_on_of_bounded_variation {f : ‚Ñù ‚Üí E}
  {s : set ‚Ñù} (hs : ‚àÄ (x z ‚àà s) (y : ‚Ñù), x ‚â§ y ‚Üí y ‚â§ z ‚Üí y ‚àà s)
  (fb : has_locally_bounded_variation_on f s)  (fc : continuous_on f s) :
  evariation_on (of ‚àò f) s ‚â§ evariation_on f s :=
begin
  dsimp only [evariation_on],
  refine supr_le _,
  rintro ‚ü®n, ‚ü®u, um, us‚ü©‚ü©,
  apply sum_for_path_metric_le_evariation_on_of_bounded_variation hs fb fc n us um,
end

lemma path_metric_idempotent : isometry (of : path_emetric E ‚Üí path_emetric (path_emetric E)) :=
begin
  rintro x y,
  dsimp only [edist, from_path_emetric, path.length],
  apply le_antisymm; simp only [le_infi_iff],
  { rintro p,
    by_cases h : evariation_on p.extend ùïÄ ‚â† ‚ä§,
    { have ofpx : (of ‚àò p.extend) 0 = of x.fo, by
        simp only [function.comp_app, set.left_mem_Icc, zero_le_one, path.extend_extends, set.Icc.mk_zero, path.source],
      have ofpy : (of ‚àò p.extend) 1 = of y.fo, by
        simp only [function.comp_app, set.right_mem_Icc, zero_le_one, path.extend_extends, set.Icc.mk_one, path.target],
      have ofpc : continuous_on (of ‚àò p.extend) ùïÄ, by
      { apply continuous_for_path_metric_of_bounded_variation_of_continuous,
        exacts [Œª x hx z hz y yl yr, ‚ü®hx.left.trans yl, yr.trans hz.right‚ü©,
                (p.continuous_extend).continuous_on,
                has_bounded_variation_on.has_locally_bounded_variation_on h], },
      calc infi path.length
         ‚â§ evariation_on (path.of_continuous_on zero_le_one ofpx ofpy ofpc).extend ùïÄ : infi_le _ _
      ...= evariation_on (path_emetric.of ‚àò p.extend) ùïÄ : by
      begin
        refine evariation_on.eq_of_eq_on (Œª u hu,_),
        simp only [function.comp_app, path.eq_on_extend_of_continuous_on_self _ _ _ _ hu,
                   tsub_zero, one_mul, zero_add],
      end
      ...‚â§ p.length : by
      begin
        apply evariation_on_for_path_metric_le_evariation_on_of_bounded_variation,
        exacts [Œª x ‚ü®zx,xo‚ü© y ‚ü®zy,yo‚ü© u xu uy, ‚ü®zx.trans xu, uy.trans yo‚ü©,
                has_bounded_variation_on.has_locally_bounded_variation_on h,
                p.continuous_extend.continuous_on],
      end },
    { simp only [not_not] at h,
      simp only [path.length, h, le_top], }, },
  { rintro p',
    calc infi path.length
       ‚â§ evariation_on (p'.comp fo from_length_emetric_nonexpanding.continuous).extend ùïÄ :
    infi_le _ _
    ...= evariation_on (fo ‚àò p'.extend) ùïÄ : by
    begin
      refine evariation_on.eq_of_eq_on (Œª u hu,_),
      rw path.extend_comp,
    end
    ...‚â§ (1 : ‚Ñù‚â•0‚àû) * (evariation_on p'.extend ùïÄ) : by
    begin
      apply (from_length_emetric_nonexpanding.lipschitz_on_with set.univ).comp_evariation_on_le,
      exact (set.maps_to_univ _ _),
    end
    ...= evariation_on p'.extend ùïÄ : by simp only [one_mul] },
end


end path_emetric
