/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import analysis.special_functions.complex.circle
import analysis.inner_product_space.l2_space
import measure_theory.function.continuous_map_dense
import measure_theory.function.l2_space
import measure_theory.group.integration
import measure_theory.integral.periodic
import topology.metric_space.emetric_paracompact
import topology.continuous_function.stone_weierstrass

/-!

# Fourier analysis on the circle

This file contains basic results on Fourier series.

## Main definitions

* for `n : ‚Ñ§`, `fourier n` is the monomial `Œª z, z ^ n`, bundled as a continuous map from `circle`
  to `‚ÑÇ`
* for `n : ‚Ñ§` and `p : ‚Ñù‚â•0‚àû`, `fourier_Lp p n` is an abbreviation for the monomial `fourier n`
  considered as an element of the L·µñ-space `Lp ‚ÑÇ p haar_circle`, via the embedding
  `continuous_map.to_Lp`
* `fourier_series` is the canonical isometric isomorphism from `Lp ‚ÑÇ 2 haar_circle` to `‚Ñì¬≤(‚Ñ§, ‚ÑÇ)`
  induced by taking Fourier series

## Main statements

The theorem `span_fourier_closure_eq_top` states that the span of the monomials `fourier n` is
dense in `C(circle, ‚ÑÇ)`, i.e. that its `submodule.topological_closure` is `‚ä§`.  This follows from
the Stone-Weierstrass theorem after checking that it is a subalgebra, closed under conjugation, and
separates points.

The theorem `span_fourier_Lp_closure_eq_top` states that for `1 ‚â§ p < ‚àû` the span of the monomials
`fourier_Lp` is dense in `Lp ‚ÑÇ p haar_circle`, i.e. that its `submodule.topological_closure` is
`‚ä§`.  This follows from the previous theorem using general theory on approximation of L·µñ functions
by continuous functions.

The theorem `orthonormal_fourier` states that the monomials `fourier_Lp 2 n` form an orthonormal
set (in the L¬≤ space of the circle).

The last two results together provide that the functions `fourier_Lp 2 n` form a Hilbert basis for
L¬≤; this is named as `fourier_series`.

Parseval's identity, `tsum_sq_fourier_series_repr`, is a direct consequence of the construction of
this Hilbert basis.
-/

noncomputable theory
open_locale ennreal complex_conjugate classical real
open topological_space continuous_map measure_theory measure_theory.measure algebra submodule set

/-! ### Monomials on the circle -/

section

section
variables {ùïú : Type*} [linear_ordered_add_comm_group ùïú] [topological_space ùïú] [order_topology ùïú]
variables {p : ùïú} {Œ≤ : Type*} [topological_space Œ≤]

lemma function.periodic.copy {Œ± Œ≤ : Type*} [add_group Œ±] {f : Œ± ‚Üí Œ≤} {c d : Œ±}
  (hf : function.periodic f c) (h : c = d) :
  function.periodic f d :=
by subst h; assumption

/-- An induction principle to deduce results for `add_circle` from those for `ùïú`, used with
`induction Œ∏ using add_circle.induction_on`. -/
@[elab_as_eliminator]
protected lemma add_circle.induction_on {P : add_circle p ‚Üí Prop} (Œ∏ : add_circle p)
  (h : ‚àÄ x : ùïú, P x) : P Œ∏ :=
quotient.induction_on' Œ∏ h
end

def unit_add_circle.to_circle : C(unit_add_circle, circle) :=
{ to_fun := ((periodic_exp_map_circle.mul_const _).copy (mul_inv_cancel real.two_pi_pos.ne')).lift,
  continuous_to_fun :=
    continuous_coinduced_dom.mpr $ exp_map_circle.continuous.comp (continuous_mul_right _) }

lemma unit_add_circle.injective_to_circle : function.injective unit_add_circle.to_circle :=
sorry

@[simp] lemma unit_add_circle.coe_to_circle_coe (t : ‚Ñù) :
  ‚Üë(unit_add_circle.to_circle t) = complex.exp (t * (2 * œÄ) * complex.I) :=
by simp [unit_add_circle.to_circle]

@[simps] def continuous_map.smul {Œì : Type*} {T : Type*} [topological_space T] [has_smul Œì T]
  [has_continuous_const_smul Œì T] (g : Œì) : C(T, T) :=
{ to_fun := has_smul.smul g,
  continuous_to_fun := continuous_const_smul g }

@[simps] def continuous_map.coe {X : Type*} [topological_space X] {Œ± : Type*} [set_like Œ± X] (s : Œ±) :
  C(s, X) :=
{ to_fun := coe,
  continuous_to_fun := continuous_subtype_coe }


end

section functions

/-- The family of functions `Œª z, exp (n * t * (2 * œÄ) * I)`, considered as bundled continuous maps
from `unit_add_circle` to `‚ÑÇ`. -/
def fourier (n : ‚Ñ§) : C(unit_add_circle, ‚ÑÇ) :=
(continuous_map.coe circle).comp $ unit_add_circle.to_circle.comp $ continuous_map.smul n

lemma fourier_apply (n : ‚Ñ§) (t : unit_add_circle) :
  fourier n t = unit_add_circle.to_circle (n ‚Ä¢ t) :=
rfl

@[simp] lemma fourier_apply_coe (n : ‚Ñ§) (t : ‚Ñù) :
  fourier n t = complex.exp (n * t * (2 * œÄ) * complex.I) :=
begin
  have : (‚Üë(n ‚Ä¢ t) : unit_add_circle) = n ‚Ä¢ t := rfl,
  simp [fourier, ‚Üê this],
end

@[simp] lemma fourier_zero {t : unit_add_circle} : fourier 0 t = 1 :=
begin
  induction t using add_circle.induction_on,
  simp
end

@[simp] lemma fourier_neg {n : ‚Ñ§} {t : unit_add_circle} : fourier (-n) t = conj (fourier n t) :=
begin
  induction t using add_circle.induction_on,
  simp [‚Üê complex.exp_conj],
end

@[simp] lemma fourier_add {m n : ‚Ñ§} {t : unit_add_circle} :
  fourier (m + n) t = (fourier m t) * (fourier n t) :=
begin
  induction t using add_circle.induction_on,
  simp [complex.exp_add, mul_add, add_mul],
end

/-- The subalgebra of `C(unit_add_circle, ‚ÑÇ)` generated by `exp (n * t * (2 * œÄ) * I)` for `n ‚àà ‚Ñ§`.
-/
def fourier_subalgebra : subalgebra ‚ÑÇ C(unit_add_circle, ‚ÑÇ) := algebra.adjoin ‚ÑÇ (range fourier)

/-- The subalgebra of `C(unit_add_circle, ‚ÑÇ)` generated by `exp (n * t * (2 * œÄ) * I)` for `n ‚àà ‚Ñ§`
is in fact the linear span of these functions. -/
lemma fourier_subalgebra_coe : fourier_subalgebra.to_submodule = span ‚ÑÇ (range fourier) :=
begin
  apply adjoin_eq_span_of_subset,
  refine subset.trans _ submodule.subset_span,
  intros x hx,
  apply submonoid.closure_induction hx (Œª _, id) ‚ü®0, ext $ by simp‚ü©,
  rintros _ _ ‚ü®m, rfl‚ü© ‚ü®n, rfl‚ü©,
  refine ‚ü®m + n, _‚ü©,
  ext1 z,
  exact fourier_add,
end

/-- The subalgebra of `C(unit_add_circle, ‚ÑÇ)` generated by `exp (n * t * (2 * œÄ) * I)` for `n ‚àà ‚Ñ§`
separates points. -/
lemma fourier_subalgebra_separates_points : fourier_subalgebra.separates_points :=
begin
  intros x y hxy,
  refine ‚ü®_, ‚ü®fourier 1, _, rfl‚ü©, _‚ü©,
  { exact subset_adjoin ‚ü®1, rfl‚ü© },
  { simpa [fourier_apply]
      using (subtype.coe_injective.comp unit_add_circle.injective_to_circle).ne hxy }
end

/-- The subalgebra of `C(unit_add_circle, ‚ÑÇ)` generated by `exp (n * t * (2 * œÄ) * I)` for `n ‚àà ‚Ñ§`
is invariant under complex conjugation. -/
lemma fourier_subalgebra_conj_invariant :
  conj_invariant_subalgebra (fourier_subalgebra.restrict_scalars ‚Ñù) :=
begin
  rintros _ ‚ü®f, hf, rfl‚ü©,
  change _ ‚àà fourier_subalgebra,
  change _ ‚àà fourier_subalgebra at hf,
  apply adjoin_induction hf,
  { rintros _ ‚ü®n, rfl‚ü©,
    suffices : fourier (-n) ‚àà fourier_subalgebra,
    { convert this,
      ext1,
      simp },
    exact subset_adjoin ‚ü®-n, rfl‚ü© },
  { intros c,
    exact fourier_subalgebra.algebra_map_mem (conj c) },
  { intros f g hf hg,
    convert fourier_subalgebra.add_mem hf hg,
    exact alg_hom.map_add _ f g, },
  { intros f g hf hg,
    convert fourier_subalgebra.mul_mem hf hg,
    exact alg_hom.map_mul _ f g, }
end

/-- The subalgebra of `C(unit_add_circle, ‚ÑÇ)` generated by `exp (n * t * (2 * œÄ) * I)` for `n ‚àà ‚Ñ§`
is dense. -/
lemma fourier_subalgebra_closure_eq_top : fourier_subalgebra.topological_closure = ‚ä§ :=
continuous_map.subalgebra_is_R_or_C_topological_closure_eq_top_of_separates_points
  fourier_subalgebra
  fourier_subalgebra_separates_points
  fourier_subalgebra_conj_invariant

/-- The linear span of the functions `exp (n * t * (2 * œÄ) * I)` is dense in
`C(unit_add_circle, ‚ÑÇ)`. -/
lemma span_fourier_closure_eq_top : (span ‚ÑÇ (range fourier)).topological_closure = ‚ä§ :=
begin
  rw ‚Üê fourier_subalgebra_coe,
  exact congr_arg subalgebra.to_submodule fourier_subalgebra_closure_eq_top,
end

/-- The family of functions `Œª z, exp (n * t * (2 * œÄ) * I)`, parametrized by `n : ‚Ñ§` and considered
as elements of the `Lp` space of functions on `unit_add_circle` taking values in `‚ÑÇ`. -/
abbreviation fourier_Lp (p : ‚Ñù‚â•0‚àû) [fact (1 ‚â§ p)] (n : ‚Ñ§) : Lp ‚ÑÇ p volume :=
to_Lp p volume ‚ÑÇ (fourier n)

lemma coe_fn_fourier_Lp (p : ‚Ñù‚â•0‚àû) [fact (1 ‚â§ p)] (n : ‚Ñ§) :
  ‚áë(fourier_Lp p n) =·µê[volume] fourier n :=
coe_fn_to_Lp volume (fourier n)

/-- For each `1 ‚â§ p < ‚àû`, the linear span of the functions `exp (n * t * (2 * œÄ) * I)` is dense in
`Lp ‚ÑÇ p volume`. -/
lemma span_fourier_Lp_closure_eq_top {p : ‚Ñù‚â•0‚àû} [fact (1 ‚â§ p)] (hp : p ‚â† ‚àû) :
  (span ‚ÑÇ (range (fourier_Lp p))).topological_closure = ‚ä§ :=
begin
  convert (continuous_map.to_Lp_dense_range ‚ÑÇ hp volume ‚ÑÇ).topological_closure_map_submodule
    span_fourier_closure_eq_top,
  rw [map_span, range_comp],
  simp
end

/-- For `n ‚â† 0`, adding `(2 * n)‚Åª¬π` negates the function `exp (n * t * (2 * œÄ) * I)`. -/
lemma fourier_add_half_inv_index {n : ‚Ñ§} (hn : n ‚â† 0) (z : unit_add_circle) :
  fourier n (‚Üë((2 * n)‚Åª¬π : ‚Ñù) + z) = - fourier n z :=
begin
  induction z using add_circle.induction_on,
  have hn : (n:‚ÑÇ) * (n‚Åª¬π * 2‚Åª¬π) * (2 * œÄ) = œÄ,
  { have : (n:‚ÑÇ) ‚â† 0 := by exact_mod_cast hn,
    field_simp,
    ring },
  simp [‚Üê quotient_add_group.coe_add, mul_add, add_mul, hn, complex.exp_add, complex.exp_pi_mul_I],
end

/-- The monomials `z ^ n` are an orthonormal set with respect to Haar measure on ‚Ñù / ‚Ñ§. -/
lemma orthonormal_fourier : orthonormal ‚ÑÇ (fourier_Lp 2) :=
begin
  rw orthonormal_iff_ite,
  intros i j,
  rw continuous_map.inner_to_Lp volume (fourier i) (fourier j),
  split_ifs,
  { simp [h, is_probability_measure.measure_univ, ‚Üê fourier_neg, ‚Üê fourier_add, -fourier_apply] },
  simp only [‚Üê fourier_add, ‚Üê fourier_neg],
  have hij : -i + j ‚â† 0,
  { rw add_comm,
    exact sub_ne_zero.mpr (ne.symm h) },
  exact integral_eq_zero_of_add_left_eq_neg (fourier_add_half_inv_index hij)
end

end functions

section fourier

/-- We define `fourier_series` to be a `‚Ñ§`-indexed Hilbert basis for `Lp ‚ÑÇ 2 volume`, which by
definition is an isometric isomorphism from `Lp ‚ÑÇ 2 volume` to `‚Ñì¬≤(‚Ñ§, ‚ÑÇ)`. -/
def fourier_series : hilbert_basis ‚Ñ§ ‚ÑÇ (Lp ‚ÑÇ 2 volume) :=
hilbert_basis.mk orthonormal_fourier (span_fourier_Lp_closure_eq_top (by norm_num)).ge

/-- The elements of the Hilbert basis `fourier_series` for `Lp ‚ÑÇ 2 volume` are the functions
`fourier_Lp 2`, the monomials `Œª z, z ^ n` on ‚Ñù / ‚Ñ§ considered as elements of `L2`. -/
@[simp] lemma coe_fourier_series : ‚áëfourier_series = fourier_Lp 2 := hilbert_basis.coe_mk _ _

/-- Under the isometric isomorphism `fourier_series` from `Lp ‚ÑÇ 2 volume` to `‚Ñì¬≤(‚Ñ§, ‚ÑÇ)`, the
`i`-th coefficient is the integral over ‚Ñù / ‚Ñ§ of
`Œª t, unit_add_circle.to_circle (- i ‚Ä¢ t)`. -/
lemma fourier_series_repr (f : Lp ‚ÑÇ 2 volume) (i : ‚Ñ§) :
  fourier_series.repr f i = ‚à´ t : unit_add_circle, unit_add_circle.to_circle (-i ‚Ä¢ t) * f t :=
begin
  transitivity ‚à´ t : unit_add_circle, conj ((fourier_Lp 2 i : unit_add_circle ‚Üí ‚ÑÇ) t) * f t,
  { simp [fourier_series.repr_apply_apply f i, measure_theory.L2.inner_def] },
  apply integral_congr_ae,
  filter_upwards [coe_fn_fourier_Lp 2 i] with _ ht,
  rw [ht, ‚Üê fourier_neg],
  simp [-fourier_neg, fourier_apply]
end

/-- The Fourier series of an `L2` function `f` sums to `f`, in the `L2` topology on ‚Ñù / ‚Ñ§. -/
lemma has_sum_fourier_series (f : Lp ‚ÑÇ 2 volume) :
  has_sum (Œª i, fourier_series.repr f i ‚Ä¢ fourier_Lp 2 i) f :=
by simpa using hilbert_basis.has_sum_repr fourier_series f

/-- **Parseval's identity**: the sum of the squared norms of the Fourier coefficients equals the
`L2` norm of the function. -/
lemma tsum_sq_fourier_series_repr (f : Lp ‚ÑÇ 2 volume) :
  ‚àë' i : ‚Ñ§, ‚à•fourier_series.repr f i‚à• ^ 2 = ‚à´ t : unit_add_circle, ‚à•f t‚à• ^ 2 :=
begin
  have H‚ÇÅ : ‚à•fourier_series.repr f‚à• ^ 2 = ‚àë' i, ‚à•fourier_series.repr f i‚à• ^ 2,
  { exact_mod_cast lp.norm_rpow_eq_tsum _ (fourier_series.repr f),
    norm_num },
  have H‚ÇÇ : ‚à•fourier_series.repr f‚à• ^ 2 = ‚à•f‚à• ^2 := by simp,
  have H‚ÇÉ := congr_arg is_R_or_C.re (@L2.inner_def unit_add_circle ‚ÑÇ ‚ÑÇ _ _ _ _ f f),
  rw ‚Üê integral_re at H‚ÇÉ,
  { simp only [‚Üê norm_sq_eq_inner] at H‚ÇÉ,
    rw [‚Üê H‚ÇÅ, H‚ÇÇ],
    exact H‚ÇÉ },
  { exact L2.integrable_inner f f },
end

end fourier
