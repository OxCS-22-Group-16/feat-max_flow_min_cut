/-
Copyright (c) 2022 Alex Kontorovich and Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/

import algebra.group.opposite
import analysis.normed_space.lp_space
import measure_theory.group.fundamental_domain
import measure_theory.integral.integral_eq_improper
import measure_theory.measure.haar
import topology.compact_open

/-!
# Haar quotient measure

In this file, we consider properties of fundamental domains and measures for the action of a
subgroup of a group `G` on `G` itself.

## Main results

* `measure_theory.is_fundamental_domain.smul_invariant_measure_map `: given a subgroup `Œì` of a
  topological group `G`, the pushforward to the coset space `G ‚ß∏ Œì` of the restriction of a both
  left- and right-invariant measure on `G` to a fundamental domain `ùìï` is a `G`-invariant measure
  on `G ‚ß∏ Œì`.

* `measure_theory.is_fundamental_domain.is_mul_left_invariant_map `: given a normal subgroup `Œì` of
  a topological group `G`, the pushforward to the quotient group `G ‚ß∏ Œì` of the restriction of
  a both left- and right-invariant measure on `G` to a fundamental domain `ùìï` is a left-invariant
  measure on `G ‚ß∏ Œì`.

Note that a group `G` with Haar measure that is both left and right invariant is called
**unimodular**.
-/

open measure_theory
open_locale measure_theory

@[to_additive ae_strongly_measurable_of_absolutely_continuous_add]
lemma ae_strongly_measurable_of_absolutely_continuous {Œ± Œ≤ : Type*} [measurable_space Œ±]
  [topological_space Œ≤] {Œº ŒΩ : measure Œ±} (h : ŒΩ ‚â™ Œº) (g : Œ± ‚Üí Œ≤)
  (hŒº : ae_strongly_measurable g Œº) : ae_strongly_measurable g ŒΩ :=
begin
  obtain ‚ü®g‚ÇÅ, hg‚ÇÅ, hg‚ÇÅ'‚ü© := hŒº,
  refine ‚ü®g‚ÇÅ, hg‚ÇÅ, h.ae_eq hg‚ÇÅ'‚ü©,
end


theorem measure_theory.L1.tsum_eq_set_to_L1 {Œ± : Type*} {E : Type*} [normed_add_comm_group E]
  {m : measurable_space Œ±} [normed_space ‚Ñù E] [complete_space E]
  (f : (Lp E 1 measure.count)) :
‚àë' (a : Œ±), f a = (L1.set_to_L1 (dominated_fin_meas_additive_weighted_smul measure.count)) f :=
begin
  dsimp,

  sorry,
end



open_locale big_operators nnreal

noncomputable theory

def foo (f : ‚Ñù ‚Üí ‚Ñù) (s : finset ‚Ñù) : simple_func ‚Ñù ‚Ñù :=
  ‚àë i in s, (simple_func.const ‚Ñù (f i)).piecewise
  {i} (measurable_set_singleton i) (simple_func.const ‚Ñù 0)


-- if
lemma something' {Œ≤ : Type*} [partial_order Œ≤] {C : nnreal} (F : Œ≤ ‚Üí ‚Ñù‚â•0) (hF‚ÇÅ : monotone F)
(hF‚ÇÇ : filter.tendsto F filter.at_top (nhds C))
  :
  filter.tendsto (Œª (s : Œ≤), C- F s)
  (filter.at_top : filter (Œ≤)) (nhds (0))
 :=
begin

  sorry
end


open_locale topological_space

lemma tendsto_lintegral_count_compl_at_top_zero {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : ‚à´‚Åª a, f a ‚àÇmeasure.count < ‚ä§) :
  filter.tendsto (Œª (s : finset Œ±), ‚à´‚Åª a in (s·∂ú : set Œ±), f a ‚àÇmeasure.count) filter.at_top (ùìù 0)
:=
begin
  rw measure_theory.lintegral_count at hf,
  convert ennreal.tendsto_tsum_compl_at_top_zero hf.ne using 1,
  ext1 s,
  rw [‚Üêlintegral_indicator _ s.measurable_set.compl, measure_theory.lintegral_count,
    ‚Üê tsum_subtype],
  refl,
end

--  *** Not needed???
-- theorem tendsto_zero_iff_nnnorm_tendsto_zero {Œ± : Type*} {E : Type*} [semi_normed_add_comm_group E]
-- {f : Œ± ‚Üí E} {a : filter Œ±} :
-- filter.tendsto f a (nhds 0) ‚Üî filter.tendsto (Œª (e : Œ±), ‚à•f e‚à•‚Çä) a (nhds 0) :=
-- sorry

-- prove and add to mathlib analysis.normed.group.basic
theorem tendsto_iff_nnnorm_tendsto_zero {Œ± : Type*} {E : Type*} [seminormed_add_comm_group E]
{f : Œ± ‚Üí E} {a : filter Œ±} {b : E} :
filter.tendsto f a (nhds b) ‚Üî filter.tendsto (Œª (e : Œ±), ‚à•f e - b‚à•‚Çä) a (nhds 0) :=
begin
  sorry,
end

-- lemma tendsto_Lp_count_compl_at_top_zero {Œ± : Type*} [measurable_space Œ±]
--   [measurable_singleton_class Œ±] [encodable Œ±]
--   {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [measurable_space E] [borel_space E]
--   [complete_space E] {p : ennreal} (f : Lp E p (measure.count : measure Œ±)) :
--   --filter.tendsto  (filter.at_top : filter (finset Œ±)) (nhds f)
--   -----***** FIX **** Or drop!? :)
--   filter.tendsto (Œª (s : finset Œ±), measure_theory.indicator_const_Lp p (s.measurable_set) )
--   filter.at_top (ùìù 0)
-- :=
-- begin
--   rw tendsto_zero_iff_nnnorm_tendsto_zero,
--   rw measure_theory.lintegral_count at hf,
--   convert ennreal.tendsto_tsum_compl_at_top_zero hf.ne using 1,
--   ext1 s,
--   rw [‚Üêlintegral_indicator _ s.measurable_set.compl, measure_theory.lintegral_count,
--     ‚Üê tsum_subtype],
--   refl,
-- end

-- map ennreal ‚Üí real continuous at zero

-- *** ADD to measure_theory.function.l1_space
theorem measure_theory.L1.nnnorm_def {Œ± : Type*} {Œ≤ : Type*} {m : measurable_space Œ±}
{Œº : measure_theory.measure Œ±} [normed_add_comm_group Œ≤] (f : ‚Ü•(measure_theory.Lp Œ≤ 1 Œº)) :
(‚à•f‚à•‚Çä : ennreal) = ‚à´‚Åª (a : Œ±), ‚à•f a‚à•‚Çä ‚àÇŒº := sorry


--- *** ADD to data.real.ennreal
theorem ennreal.coe_le_of_le_to_nnreal {r : nnreal} {a : ennreal} (h : r ‚â§ a.to_nnreal) :
  (r : ennreal) ‚â§ a :=
begin
  by_cases ha : a = ‚ä§,
  { simp [ha], },
  rw ‚Üê ennreal.coe_to_nnreal ha,
  exact_mod_cast h,
end


--- *** ADD to data.real.ennreal
theorem ennreal.le_to_nnreal_of_coe_le {r : nnreal} {a : ennreal} (h : (r : ennreal) ‚â§ a)
  (ha : a ‚â† ‚ä§) : r ‚â§ a.to_nnreal := by rwa [‚Üê ennreal.coe_le_coe, ennreal.coe_to_nnreal ha]

example (x y : ‚Ñù) (f : ‚Ñù ‚Üí ‚Ñù ) : x = y ‚Üí f x = f y :=
begin
  exact congr_arg (Œª (x : ‚Ñù), f x),
end

--- *** ADD to data.real.ennreal
theorem ennreal.eq_to_nnreal_of_coe_eq {a : nnreal} {b : ennreal} (h : (a : ennreal) = b) :
  a = b.to_nnreal := by convert congr_arg ennreal.to_nnreal h

-- *** ADD to analysis.normed.group.basic
theorem nnnorm_sub_rev {E : Type*} [seminormed_add_comm_group E] (g h : E) :
‚à•g - h‚à•‚Çä = ‚à•h - g‚à•‚Çä :=
begin
  rw ‚Üê nnnorm_neg,
  congr,
  abel,
end

-- exists in mathlib
-- theorem ennreal.add_sub_cancel_left {a b : ennreal} (ha : a ‚â† ‚ä§) :
-- a + b - a = b := sorry

--- *** ADD measure_theory.integral.lebesgue
theorem measure_theory.lintegral_sub_compl {Œ± : Type*} {m : measurable_space Œ±} {Œº : measure Œ±}
  {f : Œ± ‚Üí ennreal} {A : set Œ±}  (hA : measurable_set A) (hf : ‚à´‚Åª x in A, f x ‚àÇŒº < ‚ä§) :
  ‚à´‚Åª (x : Œ±) in A·∂ú, f x ‚àÇŒº = ‚à´‚Åª (x : Œ±), f x ‚àÇŒº - ‚à´‚Åª (x : Œ±) in A, f x ‚àÇŒº :=
begin
  nth_rewrite 1 ‚Üê measure_theory.lintegral_add_compl f hA,
  rw ennreal.add_sub_cancel_left hf.ne,
end


theorem ae_cover_finset (Œ± : Type*) [measurable_space Œ±] [measurable_singleton_class Œ±] :
  measure_theory.ae_cover measure.count filter.at_top (coe : finset Œ± ‚Üí set Œ±) :=
begin
  classical,
  refine ‚ü® _, Œª s, s.measurable_set‚ü©,
  filter_upwards,
  intros a,
  rw filter.eventually_at_top,
  use {a},
  intros b hb,
  apply hb,
  simp,
end

-- move to measure_theory.measurable_space_def, after `measurable_singleton_class`
theorem measurable_set_of_countable {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] {A : set Œ±} (hA : set.countable A) : measurable_set A :=
begin
  convert @measurable_set.bUnion _ _ _ has_singleton.singleton _ hA
    (Œª b _,  measurable_singleton_class.measurable_set_singleton _),
  simp,
end

-- move to measure_theory.measurable_space_def, after `measurable_singleton_class`
theorem measurable_set_of_encodable_singleton_class {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±] (A : set Œ±) : measurable_set A :=
 measurable_set_of_countable A.to_countable


theorem measurable_of_encodable_singleton_class {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±] (f : Œ± ‚Üí ennreal) : measurable f :=
Œª s hs, measurable_set_of_encodable_singleton_class _

-- ** Make this like `lintegral_tendsto_of_countably_generated`, generalize to arbitrary `ae_cover`
theorem extracted_goal_from_extracted_goal {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±] {f : Œ± ‚Üí ennreal}
  (hf : ‚à´‚Åª (x : Œ±), (f x) ‚àÇmeasure.count < ‚ä§) : filter.tendsto (Œª (s : finset Œ±),
  ‚à´‚Åª (x : Œ±) in (s : set Œ±)·∂ú, f x ‚àÇmeasure.count) filter.at_top (ùìù 0) :=
begin
  have : filter.tendsto (Œª (s : finset Œ±),
    ‚à´‚Åª (x : Œ±), f x ‚àÇmeasure.count - ‚à´‚Åª (x : Œ±) in (s : set Œ±), f x ‚àÇmeasure.count)
    filter.at_top (ùìù 0),
  { have hh := @tendsto_const_nhds ennreal (finset Œ±) _ (‚à´‚Åª (x : Œ±), (f x) ‚àÇmeasure.count)
      filter.at_top,
    have := (ae_cover_finset Œ±).lintegral_tendsto_of_countably_generated
      (measurable_of_encodable_singleton_class _).ae_measurable,
    convert ennreal.tendsto.sub hh this (or.inl (hf.ne)),
    simp, },
  convert this,
  funext s,
  refine measure_theory.lintegral_sub_compl s.measurable_set _,
  refine lt_of_le_of_lt _ hf,
  convert measure_theory.lintegral_mono_set (_ : (s : set Œ±) ‚äÜ set.univ); simp,
end

theorem extracted_goal_from_next_theorem {Œ± : Type*} {E : Type*}
  [measurable_space Œ±]
  [measurable_singleton_class Œ±]
  [encodable Œ±]
  [normed_add_comm_group E]
  [normed_space ‚Ñù E]
  [measurable_space E]
  [borel_space E]
  [complete_space E]
  {f : Œ± ‚Üí E}
  (hf : integrable f measure.count)
  (hf' : mem_‚Ñíp f 1 measure.count)
  (hF : ‚àÄ (s : finset Œ±), mem_‚Ñíp ((s:set Œ±).indicator f) 1 measure.count)
  (hh : ‚àÄ (s : finset Œ±), L1.integral_clm ((hF s).to_Lp _) = s.sum f)
  :
  filter.tendsto (Œª (s : finset Œ±), s.sum f) filter.at_top
  (ùìù (L1.integral_clm (integrable.to_L1 f hf))) :=
begin
  rw  tendsto_iff_nnnorm_tendsto_zero,

  have : filter.tendsto (Œª (s : finset Œ±),
    ‚à´‚Åª x in (s : set Œ±)·∂ú, nnnorm (f x) ‚àÇmeasure.count )
    filter.at_top (ùìù 0),
  {
    exact extracted_goal_from_extracted_goal hf.2,
  },

  convert tendsto_of_tendsto_of_tendsto_of_le_of_le (tendsto_const_nhds)
    ((ennreal.tendsto_to_nnreal ennreal.zero_ne_top).comp this) bot_le _ using 1,

  intros s,
  simp only [coe_nnnorm, function.comp_app, ‚Üêhh s],
  rw ‚Üêcontinuous_linear_map.map_sub,

  -- FIX NAMING CONVENTION `continuous_linear_map.le_op_nnnorm_of_le`
  refine le_trans (continuous_linear_map.le_op_nnnorm _ _) _,
--  have := continuous_linear_map.le_op_norm_of_le (L1.integral_clm : ),

--  have h : ‚à•L1.integral_clm‚à•‚Çä ‚â§ 1,
--  {
--    have := measure_theory.L1.norm_Integral_le_one,
--  },

--  refine le_trans (mul_le_of_le_one_left bot_le measure_theory.L1.norm_Integral_le_one) _,
  convert mul_le_of_le_one_left (bot_le : (0 : nnreal) ‚â§ _) _,

  {
    symmetry,
    apply ennreal.eq_to_nnreal_of_coe_eq,
    rw measure_theory.L1.nnnorm_def,
    rw ‚Üê lintegral_indicator,
    {
      rw lintegral_congr_ae,
  --    have := mem_‚Ñíp.coe_fn_to_Lp (hF s),
  --   have := measure_theory.Lp.coe_fn_sub ((hF s).to_Lp _) (hf.to_L1 _),
      have := integrable.coe_fn_to_L1 hf,
      filter_upwards [mem_‚Ñíp.coe_fn_to_Lp (hF s), Lp.coe_fn_sub ((hF s).to_Lp _) (hf.to_L1 _),
        hf.coe_fn_to_L1] with x hx‚ÇÅ hx‚ÇÇ hx‚ÇÉ,

      rw hx‚ÇÇ,
      dsimp,
      rw hx‚ÇÅ,
      rw hx‚ÇÉ,
      rw nnnorm_sub,

      transitivity (nnnorm ((f - (s : set Œ±).indicator f) x) : ennreal),
      { refl, },


      rw ‚Üê set.indicator_compl (s : set Œ±) f,
      rw nnnorm_indicator_eq_indicator_nnnorm ,
      simp,
    },
    apply measurable_set.compl,
    exact finset.measurable_set s,
   -- rw hx,
    -- set.indicator_compl
  },

  exact measure_theory.L1.norm_Integral_le_one,
end

--- finite sum version of `measure_theory.Lp.coe_fn_add` ???
theorem something14 {Œ± : Type*} {E : Type*}
  [measurable_space Œ±]
  [measurable_singleton_class Œ±]
  [encodable Œ±]
  [normed_add_comm_group E]
  [normed_space ‚Ñù E]
  [measurable_space E]
  [borel_space E]
  [complete_space E]
  {p : ennreal} {Œº : measure_theory.measure Œ±}
  {f : Œ± ‚Üí ‚Ü•(measure_theory.Lp E p Œº)}
  (s : finset Œ±)
  :
  ‚áë(‚àë (i : Œ±) in s, f i) =·µê[Œº] ‚àë (i : Œ±) in s, ‚áë(f i) :=
begin
  -- induct on cardinality of s?
  sorry,
end

--- *** used in next theorem
theorem something13 {Œ± : Type*} {E : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±]
  [encodable Œ±]
  [normed_add_comm_group E]
  [normed_space ‚Ñù E]
  [measurable_space E]
  [borel_space E]
  [complete_space E]
  {f : Œ± ‚Üí E}
  (hf : integrable f measure.count)
  (hf' : mem_‚Ñíp f 1 measure.count)
  (hF : ‚àÄ (s : finset Œ±), mem_‚Ñíp ((s : set Œ±).indicator f) 1 measure.count)
  (s : finset Œ±)
  (single_not_top : ‚àÄ (i : Œ±), (measure.count : measure Œ±) {i} ‚â† ‚ä§)
  :
   ‚à´ (a : Œ±), (‚àë i in s,
      (indicator_const_Lp 1 (measurable_set_singleton i) (single_not_top i) (f i))) a ‚àÇmeasure.count
      = s.sum f :=
begin
  have : (‚áë(‚àë (i : Œ±) in s, indicator_const_Lp 1 (measurable_set_singleton i) (single_not_top i)
    (f i)) : Œ± ‚Üí E) =·µê[measure.count] ‚àë (i : Œ±) in s, (indicator_const_Lp 1
    (measurable_set_singleton i) (single_not_top i) (f i) : Œ± ‚Üí E) := something14 s,
  rw integral_congr_ae this,
  simp only [finset.sum_apply],
  rw measure_theory.integral_finset_sum,
  { rw finset.sum_congr rfl,
    intros i hi,
    have : indicator_const_Lp 1 (measurable_set_singleton i) (single_not_top i) (f i)
      =·µê[measure.count] _ :=  indicator_const_Lp_coe_fn,
    rw integral_congr_ae this,
    simp [measure_theory.measure.count_singleton],
  },

  {
    intros i hi,
    sorry,
  },

end

-- *** Garbage ***
theorem something12 {Œ± : Type*} {E : Type*}
  [measurable_space Œ±]
  [measurable_singleton_class Œ±]
  [encodable Œ±]
  [normed_add_comm_group E]
  [normed_space ‚Ñù E]
  [measurable_space E]
  [borel_space E]
  [complete_space E]
  {f : Œ± ‚Üí E}
  (hf : integrable f measure.count)
  (hf : mem_‚Ñíp f 1 measure.count)
  (hF : ‚àÄ (s : finset Œ±), mem_‚Ñíp ((s : set Œ±).indicator f) 1 measure.count)
  (s : finset Œ±)
  :
  ‚à´ (a : Œ±), (mem_‚Ñíp.to_Lp _ (hF s)) a ‚àÇmeasure.count = s.sum f :=
begin
  have single_not_top : ‚àÄ i, measure.count ({i} : set Œ±) ‚â† ‚ä§,
  { intros i,
    rw measure_theory.measure.count_singleton,
    exact ennreal.one_ne_top ,
  },
  have : (‚áë(‚àë (i : Œ±) in s, indicator_const_Lp 1 (measurable_set_singleton i) (single_not_top i)
    (f i)) : Œ± ‚Üí E) =·µê[measure.count] ‚àë (i : Œ±) in s, (indicator_const_Lp 1
    (measurable_set_singleton i) (single_not_top i) (f i) : Œ± ‚Üí E),
  {

    sorry,
  },
  have := integral_congr_ae this,
  rw integral_congr_ae this,
  simp only [finset.sum_apply],
  rw measure_theory.integral_finset_sum,
  rw finset.sum_congr rfl,
  intros i hi,

  have : indicator_const_Lp 1 (measurable_set_singleton i) (single_not_top i) (f i)
    =·µê[measure.count] _ :=  indicator_const_Lp_coe_fn,
  rw integral_congr_ae this,

  simp [measure_theory.measure.count_singleton],

  {
    sorry,
  },

  sorry,
end

theorem measure_theory.integral_count {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±]
  {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [measurable_space E] [borel_space E]
  [complete_space E] {f : Œ± ‚Üí E} (hf : integrable f measure.count)  :
‚à´ (a : Œ±), f a ‚àÇmeasure.count = ‚àë' (a : Œ±), f a :=
begin
  rw integral_eq f hf,
  rw L1.integral_eq,
  have hf' := mem_‚Ñíp_one_iff_integrable.mpr hf,
  --have : summable f := sorry,
  symmetry,
  apply has_sum.tsum_eq,
  dsimp [has_sum],
  have hF : ‚àÄ s : finset Œ±, mem_‚Ñíp ((s : set Œ±).indicator f) 1 measure.count := Œª s,
    measure_theory.mem_‚Ñíp.indicator (finset.measurable_set s) hf',
  let F : finset Œ± ‚Üí Lp E 1 (measure.count : measure Œ±) := Œª s, (hF s).to_Lp _,
  have hh : ‚àÄ s : finset Œ±, L1.integral_clm (F s) = s.sum f,
  {
    intros s,
    rw ‚Üê  measure_theory.L1.integral_eq,
    have single_not_top : ‚àÄ i, measure.count ({i} : set Œ±) ‚â† ‚ä§,
    {

      intros i,
      rw measure_theory.measure.count_singleton,
      exact ennreal.one_ne_top ,
    },
    let g : Lp E 1 (measure.count : measure Œ±) := ‚àë i in s,
      (indicator_const_Lp 1 (measurable_set_singleton i) (single_not_top i) (f i)),
    have : (F s : Œ± ‚Üí E) = g,
    {
      ext x,
      dsimp [F, g],
      by_cases hx : x ‚àà s,
      {
        sorry,
      },
      sorry,
    },
    rw measure_theory.L1.integral_eq_integral,
    rw this,
    dsimp [g],
    refine something13 hf hf' hF  _ _, },
  refine extracted_goal_from_next_theorem _ hf' hF hh,
end

-- #exit

      /-
      ext i,
      simp only [option.mem_def, ennreal.some_eq_coe, ennreal.zero_eq_coe],
      by_cases hi : i = 0,
      {
        simp only [hi, ennreal.coe_zero, eq_self_iff_true, iff_true],
        rw measure_theory.measure.count_eq_zero_iff,
        simp only [set.compl_empty_iff],
        ext x,
        simp only [set.mem_set_of_eq, set.mem_univ, iff_true],
        by_cases hx : x ‚àà s,
        {
          --simp [hx],
          sorry,
        },


        sorry,
      },
      {
        --push_neg at hi,
--        simp [hi],
        sorry,
      },




      --dsimp [F, g],
-/
      -- ALEX HOMEWORK
      --sorry,


lemma measure_theory.integral_tsum {Œ± : Type*} {Œ≤ : Type*} {m : measurable_space Œ±}
  {Œº : measure_theory.measure Œ±} [encodable Œ≤] {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E]
  [measurable_space E] [borel_space E] [complete_space E]
  {f : Œ≤ ‚Üí Œ± ‚Üí E}
  (hf : ‚àÄ (i : Œ≤), measurable (f i)) -- (hf : ‚àÄ (i : Œ≤), ae_measurable (f i) Œº)
  (hf' : summable (Œª (i : Œ≤), ‚à´‚Åª (a : Œ±), ‚à•f i a‚à•‚Çä ‚àÇŒº))
  --‚àë' (i : Œ≤), ‚à´‚Åª (a : Œ±), ‚Üë‚à•f i a‚à•‚Çä ‚àÇŒº < ‚àû )
  -- F : Œ± ‚Üí ‚Ñù‚â•0
  -- hF : ‚àÄ a, has_sum (Œª i, ‚à•f i a ‚à• ) (F a)
  -- hF' : integralbe F ‚àÇŒº

  -- ‚àÄ a : Œ± , summable (Œª i, ‚à•f i a ‚à• )
  -- integrable (Œª a, ‚àë' (i:Œ≤), ‚à•f i a ‚à•) ‚àÇŒº

  --(hf' : ‚à´ (a : Œ±), (‚àë' (i : Œ≤), ‚à£f i a|) ‚àÇŒº) < ‚àû
  :
  ‚à´ (a : Œ±), (‚àë' (i : Œ≤), f i a) ‚àÇŒº = ‚àë' (i : Œ≤), ‚à´ (a : Œ±), f i a ‚àÇŒº :=
begin
  have : ‚à´‚Åª (a : Œ±), (‚àë' (i : Œ≤), ‚à•f i a‚à•‚Çä ) ‚àÇŒº = ‚àë' (i : Œ≤), ‚à´‚Åª (a : Œ±), ‚à•f i a‚à•‚Çä ‚àÇŒº,
  { rw lintegral_tsum,
    exact (Œª i, measurable_coe_nnreal_ennreal.comp (measurable_nnnorm.comp (hf i))), },

  sorry,
end

open_locale ennreal

open measure_theory

-- move to facts about integrable functions
lemma integrable.mul_‚Ñí_infinity  {G : Type*} {E : Type*} [normed_ring E] [normed_algebra ‚Ñù E]
  [measurable_space E] [borel_space E] [has_measurable_mul‚ÇÇ E] [measurable_space G]
  {Œº : measure G}
  (f : G ‚Üí E)
  (f_‚Ñí_1 : integrable f Œº)
  (g : G ‚Üí E)
  (g_measurable : ae_strongly_measurable g Œº)
  (g_‚Ñí_infinity : ess_sup (Œª x, (‚à•g x‚à•‚Çä : ‚Ñù‚â•0‚àû)) Œº < ‚àû) :
  integrable (Œª (x : G), f x * g x) Œº :=
begin
  let s : set ‚Ñù‚â•0‚àû := {a : ‚Ñù‚â•0‚àû | Œº {x : G | a < (Œª (x : G), ‚Üë‚à•g x‚à•‚Çä) x} = 0},
  have : ess_sup (Œª x, (‚à•g x‚à•‚Çä : ‚Ñù‚â•0‚àû)) Œº = Inf s := ess_sup_eq_Inf _ _,
  obtain ‚ü®a‚ÇÄ, has : Œº _ = 0, ha‚ÇÄ‚ü© : ‚àÉ (a : ‚Ñù‚â•0‚àû) (H : a ‚àà s), a < ‚ä§,
  { rw ‚Üê Inf_lt_iff,
    rw ‚Üê ess_sup_eq_Inf,
    exact g_‚Ñí_infinity },
  rw ennreal.lt_iff_exists_coe at ha‚ÇÄ,
  obtain ‚ü®a, rfl, -‚ü© := ha‚ÇÄ,
  rw integrable at f_‚Ñí_1 ‚ä¢,
  rw measure_theory.has_finite_integral_iff_norm at f_‚Ñí_1 ‚ä¢,
  refine ‚ü®f_‚Ñí_1.1.mul g_measurable, _‚ü©,
  calc ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x * g x‚à•) ‚àÇŒº ‚â§
    ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x‚à• * ‚à•g x‚à•) ‚àÇŒº : _
    ... ‚â§  ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x‚à• * a) ‚àÇŒº : _
    ... =  ‚à´‚Åª (x : G), (ennreal.of_real (‚à•f x‚à•) * a) ‚àÇŒº : _
    ... = ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x‚à•) ‚àÇŒº * a : _
    ... < ‚ä§ : _ ,
  { mono,
    { exact rfl.le, },
    { intros x,
      apply ennreal.of_real_le_of_real,
      exact norm_mul_le _ _, }, },
  { apply measure_theory.lintegral_mono_ae,
    rw ‚Üê compl_mem_ae_iff at has,
    filter_upwards [has] with x hx,
    apply ennreal.of_real_le_of_real,
    refine mul_le_mul rfl.le _ (norm_nonneg _) (norm_nonneg _),
    exact_mod_cast le_of_not_lt hx },
  { congr,
    ext1 x,
    rw ennreal.of_real_mul,
    { simp },
    { exact norm_nonneg _ } },
  { refine measure_theory.lintegral_mul_const'' _ (ae_strongly_measurable.ae_measurable _),
    exact (ennreal.continuous_of_real.comp continuous_norm).comp_ae_strongly_measurable f_‚Ñí_1.1 },
  { apply ennreal.mul_lt_top f_‚Ñí_1.2.ne,
    simp, }
end

open set measure_theory topological_space measure_theory.measure
open_locale pointwise nnreal

variables {G : Type*} [group G] [measurable_space G] [topological_space G]
  [topological_group G] [borel_space G]
  (Œº : measure G)
  (Œì : subgroup G)

/-- Given a subgroup `Œì` of `G` and a right invariant measure `Œº` on `G`, the measure is also
  invariant under the action of `Œì` on `G` by **right** multiplication. -/
@[to_additive "Given a subgroup `Œì` of an additive group `G` and a right invariant measure `Œº` on
  `G`, the measure is also invariant under the action of `Œì` on `G` by **right** addition."]
instance subgroup.smul_invariant_measure [Œº.is_mul_right_invariant] :
  smul_invariant_measure Œì.opposite G Œº :=
{ measure_preimage_smul :=
begin
  rintros ‚ü®c, hc‚ü© s hs,
  dsimp [(‚Ä¢)],
  refine measure_preimage_mul_right Œº (mul_opposite.unop c) s,
end}

variables {Œì} {Œº}

/-- Measurability of the action of the topological group `G` on the left-coset space `G/Œì`. -/
@[to_additive "Measurability of the action of the additive topological group `G` on the left-coset
  space `G/Œì`."]
instance quotient_group.has_measurable_smul [measurable_space (G ‚ß∏ Œì)] [borel_space (G ‚ß∏ Œì)] :
  has_measurable_smul G (G ‚ß∏ Œì) :=
{ measurable_const_smul := Œª g, (continuous_const_smul g).measurable,
  measurable_smul_const := Œª x, (quotient_group.continuous_smul‚ÇÅ x).measurable }

variables {ùìï : set G} (hùìï : is_fundamental_domain Œì.opposite ùìï Œº)
include hùìï

variables [countable Œì] [measurable_space (G ‚ß∏ Œì)] [borel_space (G ‚ß∏ Œì)]

/-- The pushforward to the coset space `G ‚ß∏ Œì` of the restriction of a both left- and right-
  invariant measure on `G` to a fundamental domain `ùìï` is a `G`-invariant measure on `G ‚ß∏ Œì`. -/
@[to_additive "The pushforward to the coset space `G ‚ß∏ Œì` of the restriction of a both left- and
  right-invariant measure on an additive topological group `G` to a fundamental domain `ùìï` is a
  `G`-invariant measure on `G ‚ß∏ Œì`."]
lemma measure_theory.is_fundamental_domain.smul_invariant_measure_map
  [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant] :
  smul_invariant_measure G (G ‚ß∏ Œì) (measure.map quotient_group.mk (Œº.restrict ùìï)) :=
{ measure_preimage_smul :=
  begin
    let œÄ : G ‚Üí G ‚ß∏ Œì := quotient_group.mk,
    have meas_œÄ : measurable œÄ :=
      continuous_quotient_mk.measurable,
    have ùìïmeas : null_measurable_set ùìï Œº := hùìï.null_measurable_set,
    intros g A hA,
    have meas_œÄA : measurable_set (œÄ ‚Åª¬π' A) := measurable_set_preimage meas_œÄ hA,
    rw [measure.map_apply meas_œÄ hA,
      measure.map_apply meas_œÄ (measurable_set_preimage (measurable_const_smul g) hA),
      measure.restrict_apply‚ÇÄ' ùìïmeas, measure.restrict_apply‚ÇÄ' ùìïmeas],
    set œÄ_preA := œÄ ‚Åª¬π' A,
    have : (quotient_group.mk ‚Åª¬π' ((Œª (x : G ‚ß∏ Œì), g ‚Ä¢ x) ‚Åª¬π' A)) = has_mul.mul g ‚Åª¬π' œÄ_preA,
    { ext1, simp },
    rw this,
    have : Œº (has_mul.mul g ‚Åª¬π' œÄ_preA ‚à© ùìï) = Œº (œÄ_preA ‚à© has_mul.mul (g‚Åª¬π) ‚Åª¬π' ùìï),
    { transitivity Œº (has_mul.mul g ‚Åª¬π' (œÄ_preA ‚à© has_mul.mul g‚Åª¬π ‚Åª¬π' ùìï)),
      { rw preimage_inter,
        congr,
        rw [‚Üê preimage_comp, comp_mul_left, mul_left_inv],
        ext,
        simp, },
      rw measure_preimage_mul, },
    rw this,
    haveI : smul_invariant_measure G G Œº := ‚ü®Œª c s hs, measure_preimage_mul Œº c s‚ü©,
    -- Lean can generate the next instance but it has no additive version of the autogenerated proof
    haveI : smul_comm_class G Œì.opposite G := ‚ü®Œª a b c, (mul_assoc _ _ _).symm‚ü©,
    have hùìï_translate_fundom : is_fundamental_domain Œì.opposite (g ‚Ä¢ ùìï) Œº := hùìï.smul_of_comm g,
    rw [hùìï.measure_set_eq hùìï_translate_fundom meas_œÄA, ‚Üê preimage_smul_inv], refl,
    rintros ‚ü®Œ≥, Œ≥_in_Œì‚ü©,
    ext,
    have : œÄ (x * (mul_opposite.unop Œ≥)) = œÄ (x) := by simpa [quotient_group.eq'] using Œ≥_in_Œì,
    simp [(‚Ä¢), this],
  end }

/-- Assuming `Œì` is a normal subgroup of a topological group `G`, the pushforward to the quotient
  group `G ‚ß∏ Œì` of the restriction of a both left- and right-invariant measure on `G` to a
  fundamental domain `ùìï` is a left-invariant measure on `G ‚ß∏ Œì`. -/
@[to_additive "Assuming `Œì` is a normal subgroup of an additive topological group `G`, the
  pushforward to the quotient group `G ‚ß∏ Œì` of the restriction of a both left- and right-invariant
  measure on `G` to a fundamental domain `ùìï` is a left-invariant measure on `G ‚ß∏ Œì`."]
lemma measure_theory.is_fundamental_domain.is_mul_left_invariant_map [subgroup.normal Œì]
  [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant] :
  (measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)).is_mul_left_invariant :=
{ map_mul_left_eq_self := begin
    intros x,
    apply measure.ext,
    intros A hA,
    obtain ‚ü®x‚ÇÅ, _‚ü© := @quotient.exists_rep _ (quotient_group.left_rel Œì) x,
    haveI := hùìï.smul_invariant_measure_map,
    convert measure_preimage_smul x‚ÇÅ ((measure.map quotient_group.mk) (Œº.restrict ùìï)) A using 1,
    rw [‚Üê h, measure.map_apply],
    { refl, },
    { exact measurable_const_mul _, },
    { exact hA, },
  end }

variables [t2_space (G ‚ß∏ Œì)] [second_countable_topology (G ‚ß∏ Œì)] (K : positive_compacts (G ‚ß∏ Œì))

/-- Given a normal subgroup `Œì` of a topological group `G` with Haar measure `Œº`, which is also
  right-invariant, and a finite volume fundamental domain `ùìï`, the pushforward to the quotient
  group `G ‚ß∏ Œì` of the restriction of `Œº` to `ùìï` is a multiple of Haar measure on `G ‚ß∏ Œì`. -/
@[to_additive "Given a normal subgroup `Œì` of an additive topological group `G` with Haar measure
  `Œº`, which is also right-invariant, and a finite volume fundamental domain `ùìï`, the pushforward
  to the quotient group `G ‚ß∏ Œì` of the restriction of `Œº` to `ùìï` is a multiple of Haar measure on
  `G ‚ß∏ Œì`."]
lemma measure_theory.is_fundamental_domain.map_restrict_quotient [subgroup.normal Œì]
  [measure_theory.measure.is_haar_measure Œº] [Œº.is_mul_right_invariant]
  (hùìï_finite : Œº ùìï < ‚ä§) : measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)
  = (Œº (ùìï ‚à© (quotient_group.mk' Œì) ‚Åª¬π' K)) ‚Ä¢ (measure_theory.measure.haar_measure K) :=
begin
  let œÄ : G ‚Üí* G ‚ß∏ Œì := quotient_group.mk' Œì,
  have meas_œÄ : measurable œÄ := continuous_quotient_mk.measurable,
  have ùìïmeas : null_measurable_set ùìï Œº := hùìï.null_measurable_set,
  haveI : is_finite_measure (Œº.restrict ùìï) :=
    ‚ü®by { rw [measure.restrict_apply‚ÇÄ' ùìïmeas, univ_inter], exact hùìï_finite }‚ü©,
  -- the measure is left-invariant, so by the uniqueness of Haar measure it's enough to show that
  -- it has the stated size on the reference compact set `K`.
  haveI : (measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)).is_mul_left_invariant :=
    hùìï.is_mul_left_invariant_map,
  rw [measure.haar_measure_unique (measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)) K,
    measure.map_apply meas_œÄ, measure.restrict_apply‚ÇÄ' ùìïmeas, inter_comm],
  exact K.compact.measurable_set,
end







---------------------------- UNFOLDING TRICK ---------------

open_locale big_operators ennreal

-- theorem disjoint.inter {Œ± : Type*} {s t : set Œ±} (u : set Œ±) (h : disjoint s t) :
-- disjoint (u ‚à© s) (u ‚à© t) := by apply_rules [disjoint.inter_right', disjoint.inter_left']

-- theorem disjoint.inter' {Œ± : Type*} {s t : set Œ±} (u : set Œ±) (h : disjoint s t) :
-- disjoint (s ‚à© u) (t ‚à© u) := by apply_rules [disjoint.inter_left, disjoint.inter_right]


/-
-- see if this exists in fundamental domain
lemma integral_Union {Œπ : Type*} [encodable Œπ] {s : Œπ ‚Üí set ‚Ñù } (f : ‚Ñù  ‚Üí ‚ÑÇ )
  (hm : ‚àÄ i, measurable_set (s i)) (hd : pairwise (disjoint on s)) (hfi : integrable f  ) :
  (‚à´ a in (‚ãÉ n, s n), f a ) = ‚àë' n, ‚à´ a in s n, f a  :=
sorry
-/

local notation `Œº_ùìï` := measure.map (@quotient_group.mk G _ Œì) (Œº.restrict ùìï)

@[simp] lemma subgroup_mem_opposite_iff (Œ≥ : G·µê·µí·µñ) : Œ≥ ‚àà Œì.opposite ‚Üî mul_opposite.unop Œ≥ ‚àà Œì :=
by simp [subgroup.opposite]



@[to_additive]
lemma mul_ess_sup_of_g [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant]
  (g : G ‚ß∏ Œì ‚Üí ‚Ñù‚â•0‚àû) (g_measurable : ae_measurable g Œº_ùìï) :
  ess_sup g Œº_ùìï = ess_sup (Œª (x : G), g x) Œº :=
begin
  have hœÄ : measurable (quotient_group.mk : G ‚Üí G ‚ß∏ Œì) := continuous_quotient_mk.measurable,
  rw ess_sup_map_measure g_measurable hœÄ.ae_measurable,
  refine hùìï.ess_sup_measure_restrict _,
  rintros ‚ü®Œ≥, hŒ≥‚ü© x,
  dsimp,
  congr' 1,
  exact quotient_group.mk_mul_of_mem x (mul_opposite.unop Œ≥) hŒ≥,
end

open_locale measure_theory

@[to_additive]
lemma _root_.measure_theory.is_fundamental_domain.absolutely_continuous_map
  [Œº.is_mul_right_invariant] :
  map (quotient_group.mk : G ‚Üí G ‚ß∏ Œì) Œº ‚â™ map (quotient_group.mk : G ‚Üí G ‚ß∏ Œì) (Œº.restrict ùìï) :=
begin
  set œÄ : G ‚Üí G ‚ß∏ Œì := quotient_group.mk,
  have meas_œÄ : measurable œÄ := continuous_quotient_mk.measurable,
  apply measure_theory.measure.absolutely_continuous.mk,
  intros s s_meas hs,
  rw map_apply meas_œÄ s_meas at hs ‚ä¢,
  apply hùìï.measure_zero_of_invariant _ hs,
  intros Œ≥ g hg,
  rw mem_preimage at hg ‚ä¢,
  convert hg using 1,
  exact quotient_group.mk_mul_of_mem g (mul_opposite.unop Œ≥) Œ≥.2,
end

/-- This is the "unfolding" trick -/
@[to_additive]
lemma mul_unfolding_trick [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant]
  {f : G ‚Üí ‚ÑÇ}
  (f_summable: ‚àÄ x : G, summable (Œª (Œ≥ : Œì.opposite), f (Œ≥‚Åª¬π ‚Ä¢ x))) -- NEEDED??
  (f_‚Ñí_1 : integrable f Œº)
  {g : G ‚ß∏ Œì ‚Üí ‚ÑÇ}
  (hg : ae_strongly_measurable g Œº_ùìï)
  (g_‚Ñí_infinity : ess_sup (Œª x, ‚Üë‚à•g x‚à•‚Çä) Œº_ùìï < ‚àû)
  {F : G ‚ß∏ Œì ‚Üí ‚ÑÇ}
  (F_ae_measurable : ae_strongly_measurable F Œº_ùìï) -- NEEDED??
  (hFf : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) = ‚àë' (Œ≥ : Œì.opposite), f(Œ≥ ‚Ä¢ x)) :
  ‚à´ (x : G), f x * g (x : G ‚ß∏ Œì) ‚àÇŒº = ‚à´ (x : G ‚ß∏ Œì), F x * g x ‚àÇŒº_ùìï :=
begin
--  set F : G ‚ß∏ Œì ‚Üí ‚ÑÇ :=  Œª x , ‚àë' (Œ≥ : Œì.opposite), f(Œ≥ ‚Ä¢ x)) ,
  have hFf' : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) = ‚àë' (Œ≥ : Œì.opposite), f(Œ≥‚Åª¬π ‚Ä¢ x),
  { intros x,
    rw hFf x,
    exact ((equiv.inv (Œì.opposite)).tsum_eq  (Œª Œ≥, f(Œ≥ ‚Ä¢ x))).symm, },
  let œÄ : G ‚Üí G ‚ß∏ Œì := quotient_group.mk,
  have meas_œÄ : measurable œÄ := continuous_quotient_mk.measurable,
  rw integral_map meas_œÄ.ae_measurable,
  have : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) * g (x) = ‚àë' (Œ≥ : Œì.opposite), f (Œ≥‚Åª¬π ‚Ä¢ x) * g (x),
  { intros x,
    rw hFf' x,
    convert (@tsum_smul_const _ Œì.opposite _ _ _ _ _ _ _ (Œª Œ≥, f (Œ≥‚Åª¬π ‚Ä¢ x)) _ (g x) _).symm using 1,
    exact f_summable x, },
  refine eq.trans _ (integral_congr_ae (filter.eventually_of_forall this)).symm,
  rw measure_theory.integral_tsum, --- WILL NEED MORE ASSUMPTIONS TO BE SATISFIED HERE
  haveI := hùìï.smul_invariant_measure_map,
  convert hùìï.set_integral_eq_tsum (Œª x, f x * g x) univ _,
  { simp, },
  { ext1 Œ≥,
    simp only [smul_set_univ, univ_inter],
    congr,
    ext1 x,
    have : g ‚Üë(Œ≥‚Åª¬π ‚Ä¢ x) = g x,
    { obtain ‚ü®Œ≥‚ÇÄ, hŒ≥‚ÇÄ‚ü© := Œ≥,
      congr' 1,
      simpa [quotient_group.eq, (‚Ä¢)] using hŒ≥‚ÇÄ, },
    rw this, },
  { refine integrable.mul_‚Ñí_infinity f _ (Œª x : G, g (x : G ‚ß∏ Œì)) _ _,
    { rw measure.restrict_univ,
      exact f_‚Ñí_1 },
    { rw measure.restrict_univ,
      exact (ae_strongly_measurable_of_absolutely_continuous hùìï.absolutely_continuous_map _
        hg).comp_measurable meas_œÄ, },
    { have hg' : ae_strongly_measurable (Œª x, ‚Üë‚à•g x‚à•‚Çä) Œº_ùìï :=
        (ennreal.continuous_coe.comp continuous_nnnorm).comp_ae_strongly_measurable hg,
      rw [measure.restrict_univ, ‚Üê mul_ess_sup_of_g hùìï (Œª x, ‚Üë‚à•g x‚à•‚Çä) hg'.ae_measurable],
      exact g_‚Ñí_infinity } },
  { intros Œ≥,
    have hf' : ae_strongly_measurable f (measure.map ((‚Ä¢) Œ≥‚Åª¬π) Œº),
    { rw measure_theory.map_smul,
      exact f_‚Ñí_1.1 },
    refine ((hf'.ae_measurable.comp_measurable (measurable_const_smul _)).mono_measure _).mul _,
    { exact measure.restrict_le_self },
    { exact hg.ae_measurable.comp_measurable meas_œÄ } },
  { exact F_ae_measurable.mul hg, },
end


/-- Given a normal subgroup `Œì` of a topological group `G` with Haar measure `Œº`, which is also
  right-invariant, and a finite volume fundamental domain `ùìï`, the quotient map to `G ‚ß∏ Œì` is
  measure-preserving between appropriate multiples of Haar measure on `G` and `G ‚ß∏ Œì`. -/
@[to_additive measure_preserving_quotient_add_group.mk' "Given a normal subgroup `Œì` of an additive
  topological group `G` with Haar measure `Œº`, which is also right-invariant, and a finite volume
  fundamental domain `ùìï`, the quotient map to `G ‚ß∏ Œì` is measure-preserving between appropriate
  multiples of Haar measure on `G` and `G ‚ß∏ Œì`."]
lemma measure_preserving_quotient_group.mk' [subgroup.normal Œì]
  [measure_theory.measure.is_haar_measure Œº] [Œº.is_mul_right_invariant]
  (hùìï_finite : Œº ùìï < ‚ä§) (c : ‚Ñù‚â•0) (h : Œº (ùìï ‚à© (quotient_group.mk' Œì) ‚Åª¬π' K) = c) :
  measure_preserving
    (quotient_group.mk' Œì)
    (Œº.restrict ùìï)
    (c ‚Ä¢ (measure_theory.measure.haar_measure K)) :=
{ measurable := continuous_quotient_mk.measurable,
  map_eq := by rw [hùìï.map_restrict_quotient K hùìï_finite, h]; refl }
