/-
Copyright (c) 2022 Alex Kontorovich and Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/

import algebra.group.opposite
import analysis.normed_space.lp_space
import measure_theory.group.fundamental_domain
import measure_theory.integral.integral_eq_improper
import measure_theory.measure.haar
import topology.compact_open

/-!
# Haar quotient measure

In this file, we consider properties of fundamental domains and measures for the action of a
subgroup of a group `G` on `G` itself.

## Main results

* `measure_theory.is_fundamental_domain.smul_invariant_measure_map `: given a subgroup `Œì` of a
  topological group `G`, the pushforward to the coset space `G ‚ß∏ Œì` of the restriction of a both
  left- and right-invariant measure on `G` to a fundamental domain `ùìï` is a `G`-invariant measure
  on `G ‚ß∏ Œì`.

* `measure_theory.is_fundamental_domain.is_mul_left_invariant_map `: given a normal subgroup `Œì` of
  a topological group `G`, the pushforward to the quotient group `G ‚ß∏ Œì` of the restriction of
  a both left- and right-invariant measure on `G` to a fundamental domain `ùìï` is a left-invariant
  measure on `G ‚ß∏ Œì`.

Note that a group `G` with Haar measure that is both left and right invariant is called
**unimodular**.
-/

open measure_theory
open_locale measure_theory

@[to_additive ae_strongly_measurable_of_absolutely_continuous_add]
lemma ae_strongly_measurable_of_absolutely_continuous {Œ± Œ≤ : Type*} [measurable_space Œ±]
  [topological_space Œ≤] {Œº ŒΩ : measure Œ±} (h : ŒΩ ‚â™ Œº) (g : Œ± ‚Üí Œ≤)
  (hŒº : ae_strongly_measurable g Œº) : ae_strongly_measurable g ŒΩ :=
begin
  obtain ‚ü®g‚ÇÅ, hg‚ÇÅ, hg‚ÇÅ'‚ü© := hŒº,
  refine ‚ü®g‚ÇÅ, hg‚ÇÅ, h.ae_eq hg‚ÇÅ'‚ü©,
end

open_locale big_operators nnreal

noncomputable theory

open_locale topological_space

-- note: flip `measure_theory.ae_lt_top` and `measure_theory.ae_lt_top'`

-- move to `measure_theory.constructions.borel_space` next to `measurable.coe_nnreal_ennreal`
theorem strongly_measurable.coe_nnreal_ennreal {Œ± : Type*} [measurable_space Œ±]
  {f : Œ± ‚Üí nnreal} (hf : strongly_measurable f) :
strongly_measurable (Œª (x : Œ±), (f x : ennreal)) := ennreal.continuous_coe.comp_strongly_measurable hf

theorem strongly_measurable.coe_nnreal_real {Œ± : Type*} [measurable_space Œ±]
  {f : Œ± ‚Üí nnreal} (hf : strongly_measurable f) :
strongly_measurable (Œª (x : Œ±), (f x : real)) := nnreal.continuous_coe.comp_strongly_measurable hf

-- move to `measure_theory.constructions.borel_space` next to `ae_measurable.coe_nnreal_ennreal`
theorem ae_strongly_measurable.coe_nnreal_ennreal {Œ± : Type*} [measurable_space Œ±]
  {f : Œ± ‚Üí nnreal} {Œº : measure_theory.measure Œ±} (hf : ae_strongly_measurable f Œº) :
ae_strongly_measurable (Œª (x : Œ±), (f x : ennreal)) Œº := ennreal.continuous_coe.comp_ae_strongly_measurable hf

theorem ae_strongly_measurable.coe_nnreal_real {Œ± : Type*} [measurable_space Œ±]
  {f : Œ± ‚Üí nnreal} {Œº : measure_theory.measure Œ±} (hf : ae_strongly_measurable f Œº) :
ae_strongly_measurable (Œª (x : Œ±), (f x : real)) Œº := nnreal.continuous_coe.comp_ae_strongly_measurable hf

-----

theorem ae_strongly_measurable.is_lub {Œ± : Type*} {Œ¥ : Type*} [topological_space Œ±]
  [measurable_space Œ±] [borel_space Œ±] [measurable_space Œ¥] [linear_order Œ±] [order_topology Œ±]
  [topological_space.second_countable_topology Œ±] {Œπ : Sort*} {Œº : measure_theory.measure Œ¥}
  [countable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} (hf : ‚àÄ (i : Œπ), ae_strongly_measurable (f i) Œº)
  (hg : ‚àÄ·µê (b : Œ¥) ‚àÇŒº, is_lub {a : Œ± | ‚àÉ (i : Œπ), f i b = a} (g b)) :
ae_strongly_measurable g Œº := sorry

@[measurability]
theorem ae_strongly_measurable_supr {Œ± : Type*} {Œ¥ : Type*} [topological_space Œ±]
  [measurable_space Œ±] [borel_space Œ±] [measurable_space Œ¥] [complete_linear_order Œ±]
  [order_topology Œ±] [topological_space.second_countable_topology Œ±] {Œπ : Sort*}
  {Œº : measure_theory.measure Œ¥} [countable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±}
  (hf : ‚àÄ (i : Œπ), ae_strongly_measurable (f i) Œº) :
ae_strongly_measurable (Œª (b : Œ¥), ‚®Ü (i : Œπ), f i b) Œº :=
ae_strongly_measurable.is_lub hf $ (ae_of_all Œº (Œª b, is_lub_supr))

theorem ae_strongly_measurable.ennreal_tsum {Œ± : Type*} [measurable_space Œ±] {Œπ : Type*}
  [countable Œπ] {f : Œπ ‚Üí Œ± ‚Üí ennreal} {Œº : measure_theory.measure Œ±}
  (h : ‚àÄ (i : Œπ), ae_strongly_measurable (f i) Œº) :
ae_strongly_measurable (Œª (x : Œ±), ‚àë' (i : Œπ), f i x) Œº :=
  by { simp_rw [ennreal.tsum_eq_supr_sum], apply ae_strongly_measurable_supr,
  exact Œª s, finset.ae_strongly_measurable_sum s (Œª i _, h i) }

theorem strongly_measurable.is_lub {Œ± : Type*} {Œ¥ : Type*} [topological_space Œ±]
  [measurable_space Œ±] [borel_space Œ±] [measurable_space Œ¥] [linear_order Œ±]
  [order_topology Œ±] [topological_space.second_countable_topology Œ±]
  {Œπ : Sort*} [countable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±}
  (hf : ‚àÄ (i : Œπ), strongly_measurable (f i))
  (hg : ‚àÄ (b : Œ¥), is_lub {a : Œ± | ‚àÉ (i : Œπ), f i b = a} (g b)) :
strongly_measurable g :=
begin
  change ‚àÄ b, is_lub (set.range $ Œª i, f i b) (g b) at hg,
  dsimp [strongly_measurable] at hf ‚ä¢,




  rw [‚Äπborel_space Œ±‚Ä∫.measurable_eq, borel_eq_generate_from_Ioi Œ±],
  apply measurable_generate_from,
  rintro _ ‚ü®a, rfl‚ü©,
  simp_rw [set.preimage, mem_Ioi, lt_is_lub_iff (hg _), exists_range_iff, set_of_exists],
  exact measurable_set.Union (Œª i, hf i (is_open_lt' _).measurable_set)
end


@[measurability]
theorem strongly_measurable_supr {Œ± : Type*} {Œ¥ : Type*} [topological_space Œ±]
  [measurable_space Œ±] [borel_space Œ±] [measurable_space Œ¥] [complete_linear_order Œ±]
  [order_topology Œ±] [topological_space.second_countable_topology Œ±] {Œπ : Sort*}
  [countable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (hf : ‚àÄ (i : Œπ), strongly_measurable (f i)) :
strongly_measurable (Œª (b : Œ¥), ‚®Ü (i : Œπ), f i b) :=
strongly_measurable.is_lub hf $ Œª b, is_lub_supr



@[measurability]
theorem strongly_measurable.ennreal_tsum {Œ± : Type*} [measurable_space Œ±] {Œπ : Type*}
  [countable Œπ] {f : Œπ ‚Üí Œ± ‚Üí ennreal} (h : ‚àÄ (i : Œπ), strongly_measurable (f i)) :
strongly_measurable (Œª (x : Œ±), ‚àë' (i : Œπ), f i x) :=
by { simp_rw [ennreal.tsum_eq_supr_sum], apply strongly_measurable_supr,
  exact Œª s, s.strongly_measurable_sum (Œª i _, h i) }



@[measurability]
theorem strongly_measurable.nnreal_tsum {Œ± : Type*} [measurable_space Œ±]
{Œπ : Type*} [countable Œπ] {f : Œπ ‚Üí Œ± ‚Üí nnreal} (h : ‚àÄ (i : Œπ), strongly_measurable (f i)) :
strongly_measurable (Œª (x : Œ±), ‚àë' (i : Œπ), f i x) :=
begin
  simp_rw [nnreal.tsum_eq_to_nnreal_tsum],
  exact (strongly_measurable.ennreal_tsum (Œª i, (h i).coe_nnreal_ennreal)).ennreal_to_nnreal,
end

---- KEY LEMMA, asked on Zulip 1/10/23
theorem ae_strongly_measurable.nnreal_tsum {Œ± : Type*} [measurable_space Œ±] {Œπ : Type*}
  [countable Œπ] {f : Œπ ‚Üí Œ± ‚Üí nnreal} {Œº : measure_theory.measure Œ±}
  (h : ‚àÄ (i : Œπ), ae_strongly_measurable (f i) Œº) :
ae_strongly_measurable (Œª (x : Œ±), ‚àë' (i : Œπ), f i x) Œº :=
begin
  simp_rw [nnreal.tsum_eq_to_nnreal_tsum],
  dsimp [ae_strongly_measurable],
  sorry,


  -- apply ae_strongly_measurable_supr,
  -- exact Œª s, finset.ae_strongly_measurable_sum s (Œª i _, h i),
  -- exact (ae_strongly_measurable.ennreal_tsum (Œª i, (h i).coe_nnreal_ennreal)).ennreal_to_nnreal,
end
/-
begin
  simp_rw [ennreal.tsum_eq_supr_sum],
  apply ae_strongly_measurable_supr,
  exact Œª s, finset.ae_strongly_measurable_sum s (Œª i _, h i),
end
-/

--- remind me, why not `measure_theory.integral_integral` and tsum as integral? Not now...
/-- THIS IS WHERE WE STOPPED ON 11/2/22 -/
lemma measure_theory.integral_tsum {Œ± : Type*} {Œ≤ : Type*} {m : measurable_space Œ±}
  {Œº : measure_theory.measure Œ±} [encodable Œ≤] {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E]
  [measurable_space E] [borel_space E] [complete_space E]
  {f : Œ≤ ‚Üí Œ± ‚Üí E}
  (hf : ‚àÄ (i : Œ≤), ae_strongly_measurable (f i) Œº)
  (hf' : ‚àë' (i : Œ≤), ‚à´‚Åª (a : Œ±), ‚à•f i a‚à•‚Çä ‚àÇŒº ‚â† ‚ä§) :
  ‚à´ (a : Œ±), (‚àë' (i : Œ≤), f i a) ‚àÇŒº = ‚àë' (i : Œ≤), ‚à´ (a : Œ±), f i a ‚àÇŒº :=
begin
  have hf'' := (Œª i, (hf i).ae_measurable.nnnorm.coe_nnreal_ennreal),
  have hhh : ‚àÄ·µê (a : Œ±) ‚àÇŒº, summable (Œª (n : Œ≤), (‚à•f n a‚à•‚Çä : ‚Ñù)),
  { haveI : countable Œ≤ := sorry,
    rw ‚Üê lintegral_tsum hf'' at hf',
    refine (ae_lt_top' (ae_measurable.ennreal_tsum hf'') hf').mono _,
    intros x hx,
    rw ‚Üê ennreal.tsum_coe_ne_top_iff_summable_coe,
    exact hx.ne, },
  convert (measure_theory.has_sum_integral_of_dominated_convergence (Œª i a, ‚à•f i a‚à•‚Çä) hf _
    hhh _ _).tsum_eq.symm,
  { intros n,
    filter_upwards with x,
    refl, },
  { split,
    { simp_rw [‚Üê coe_nnnorm, ‚Üê nnreal.coe_tsum],
      apply ae_strongly_measurable.coe_nnreal_real,
      apply ae_strongly_measurable.nnreal_tsum,
      exact (Œª i, (hf i).nnnorm), },
    { dsimp [has_finite_integral],
      have : ‚à´‚Åª (a : Œ±), ‚àë' (n : Œ≤), ‚à•f n a‚à•‚Çä ‚àÇŒº < ‚ä§,
      { rw [lintegral_tsum, lt_top_iff_ne_top],
        { exact hf', },
        { exact_mod_cast Œª i, (hf i).ae_measurable.nnnorm, }, },
      convert this using 1,
      apply lintegral_congr_ae,
      simp_rw [‚Üê coe_nnnorm, ‚Üê nnreal.coe_tsum, nnreal.nnnorm_eq],
      filter_upwards [hhh] with a ha,
      exact ennreal.coe_tsum (nnreal.summable_coe.mp ha), }, },
  { filter_upwards [hhh] with x hx,
    exact (summable_of_summable_norm hx).has_sum, },
end

open_locale ennreal

open measure_theory

-- move to facts about integrable functions
lemma integrable.mul_‚Ñí_infinity  {G : Type*} {E : Type*} [normed_ring E] [normed_algebra ‚Ñù E]
  [measurable_space E] [borel_space E] [has_measurable_mul‚ÇÇ E] [measurable_space G]
  {Œº : measure G}
  (f : G ‚Üí E)
  (f_‚Ñí_1 : integrable f Œº)
  (g : G ‚Üí E)
  (g_measurable : ae_strongly_measurable g Œº)
  (g_‚Ñí_infinity : ess_sup (Œª x, (‚à•g x‚à•‚Çä : ‚Ñù‚â•0‚àû)) Œº < ‚àû) :
  integrable (Œª (x : G), f x * g x) Œº :=
begin
  let s : set ‚Ñù‚â•0‚àû := {a : ‚Ñù‚â•0‚àû | Œº {x : G | a < (Œª (x : G), ‚Üë‚à•g x‚à•‚Çä) x} = 0},
  have : ess_sup (Œª x, (‚à•g x‚à•‚Çä : ‚Ñù‚â•0‚àû)) Œº = Inf s := ess_sup_eq_Inf _ _,
  obtain ‚ü®a‚ÇÄ, has : Œº _ = 0, ha‚ÇÄ‚ü© : ‚àÉ (a : ‚Ñù‚â•0‚àû) (H : a ‚àà s), a < ‚ä§,
  { rw ‚Üê Inf_lt_iff,
    rw ‚Üê ess_sup_eq_Inf,
    exact g_‚Ñí_infinity },
  rw ennreal.lt_iff_exists_coe at ha‚ÇÄ,
  obtain ‚ü®a, rfl, -‚ü© := ha‚ÇÄ,
  rw integrable at f_‚Ñí_1 ‚ä¢,
  rw measure_theory.has_finite_integral_iff_norm at f_‚Ñí_1 ‚ä¢,
  refine ‚ü®f_‚Ñí_1.1.mul g_measurable, _‚ü©,
  calc ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x * g x‚à•) ‚àÇŒº ‚â§
    ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x‚à• * ‚à•g x‚à•) ‚àÇŒº : _
    ... ‚â§  ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x‚à• * a) ‚àÇŒº : _
    ... =  ‚à´‚Åª (x : G), (ennreal.of_real (‚à•f x‚à•) * a) ‚àÇŒº : _
    ... = ‚à´‚Åª (x : G), ennreal.of_real (‚à•f x‚à•) ‚àÇŒº * a : _
    ... < ‚ä§ : _ ,
  { mono,
    { exact rfl.le, },
    { intros x,
      apply ennreal.of_real_le_of_real,
      exact norm_mul_le _ _, }, },
  { apply measure_theory.lintegral_mono_ae,
    rw ‚Üê compl_mem_ae_iff at has,
    filter_upwards [has] with x hx,
    apply ennreal.of_real_le_of_real,
    refine mul_le_mul rfl.le _ (norm_nonneg _) (norm_nonneg _),
    exact_mod_cast le_of_not_lt hx },
  { congr,
    ext1 x,
    rw ennreal.of_real_mul,
    { simp },
    { exact norm_nonneg _ } },
  { refine measure_theory.lintegral_mul_const'' _ (ae_strongly_measurable.ae_measurable _),
    exact (ennreal.continuous_of_real.comp continuous_norm).comp_ae_strongly_measurable f_‚Ñí_1.1 },
  { apply ennreal.mul_lt_top f_‚Ñí_1.2.ne,
    simp, }
end

open set measure_theory topological_space measure_theory.measure
open_locale pointwise nnreal

variables {G : Type*} [group G] [measurable_space G] [topological_space G]
  [topological_group G] [borel_space G]
  (Œº : measure G)
  (Œì : subgroup G)

/-- Given a subgroup `Œì` of `G` and a right invariant measure `Œº` on `G`, the measure is also
  invariant under the action of `Œì` on `G` by **right** multiplication. -/
@[to_additive "Given a subgroup `Œì` of an additive group `G` and a right invariant measure `Œº` on
  `G`, the measure is also invariant under the action of `Œì` on `G` by **right** addition."]
instance subgroup.smul_invariant_measure [Œº.is_mul_right_invariant] :
  smul_invariant_measure Œì.opposite G Œº :=
{ measure_preimage_smul :=
begin
  rintros ‚ü®c, hc‚ü© s hs,
  dsimp [(‚Ä¢)],
  refine measure_preimage_mul_right Œº (mul_opposite.unop c) s,
end}

variables {Œì} {Œº}

/-- Measurability of the action of the topological group `G` on the left-coset space `G/Œì`. -/
@[to_additive "Measurability of the action of the additive topological group `G` on the left-coset
  space `G/Œì`."]
instance quotient_group.has_measurable_smul [measurable_space (G ‚ß∏ Œì)] [borel_space (G ‚ß∏ Œì)] :
  has_measurable_smul G (G ‚ß∏ Œì) :=
{ measurable_const_smul := Œª g, (continuous_const_smul g).measurable,
  measurable_smul_const := Œª x, (quotient_group.continuous_smul‚ÇÅ x).measurable }

variables {ùìï : set G} (hùìï : is_fundamental_domain Œì.opposite ùìï Œº)
include hùìï

variables [countable Œì] [measurable_space (G ‚ß∏ Œì)] [borel_space (G ‚ß∏ Œì)]

/-- The pushforward to the coset space `G ‚ß∏ Œì` of the restriction of a both left- and right-
  invariant measure on `G` to a fundamental domain `ùìï` is a `G`-invariant measure on `G ‚ß∏ Œì`. -/
@[to_additive "The pushforward to the coset space `G ‚ß∏ Œì` of the restriction of a both left- and
  right-invariant measure on an additive topological group `G` to a fundamental domain `ùìï` is a
  `G`-invariant measure on `G ‚ß∏ Œì`."]
lemma measure_theory.is_fundamental_domain.smul_invariant_measure_map
  [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant] :
  smul_invariant_measure G (G ‚ß∏ Œì) (measure.map quotient_group.mk (Œº.restrict ùìï)) :=
{ measure_preimage_smul :=
  begin
    let œÄ : G ‚Üí G ‚ß∏ Œì := quotient_group.mk,
    have meas_œÄ : measurable œÄ :=
      continuous_quotient_mk.measurable,
    have ùìïmeas : null_measurable_set ùìï Œº := hùìï.null_measurable_set,
    intros g A hA,
    have meas_œÄA : measurable_set (œÄ ‚Åª¬π' A) := measurable_set_preimage meas_œÄ hA,
    rw [measure.map_apply meas_œÄ hA,
      measure.map_apply meas_œÄ (measurable_set_preimage (measurable_const_smul g) hA),
      measure.restrict_apply‚ÇÄ' ùìïmeas, measure.restrict_apply‚ÇÄ' ùìïmeas],
    set œÄ_preA := œÄ ‚Åª¬π' A,
    have : (quotient_group.mk ‚Åª¬π' ((Œª (x : G ‚ß∏ Œì), g ‚Ä¢ x) ‚Åª¬π' A)) = has_mul.mul g ‚Åª¬π' œÄ_preA,
    { ext1, simp },
    rw this,
    have : Œº (has_mul.mul g ‚Åª¬π' œÄ_preA ‚à© ùìï) = Œº (œÄ_preA ‚à© has_mul.mul (g‚Åª¬π) ‚Åª¬π' ùìï),
    { transitivity Œº (has_mul.mul g ‚Åª¬π' (œÄ_preA ‚à© has_mul.mul g‚Åª¬π ‚Åª¬π' ùìï)),
      { rw preimage_inter,
        congr,
        rw [‚Üê preimage_comp, comp_mul_left, mul_left_inv],
        ext,
        simp, },
      rw measure_preimage_mul, },
    rw this,
    haveI : smul_invariant_measure G G Œº := ‚ü®Œª c s hs, measure_preimage_mul Œº c s‚ü©,
    -- Lean can generate the next instance but it has no additive version of the autogenerated proof
    haveI : smul_comm_class G Œì.opposite G := ‚ü®Œª a b c, (mul_assoc _ _ _).symm‚ü©,
    have hùìï_translate_fundom : is_fundamental_domain Œì.opposite (g ‚Ä¢ ùìï) Œº := hùìï.smul_of_comm g,
    rw [hùìï.measure_set_eq hùìï_translate_fundom meas_œÄA, ‚Üê preimage_smul_inv], refl,
    rintros ‚ü®Œ≥, Œ≥_in_Œì‚ü©,
    ext,
    have : œÄ (x * (mul_opposite.unop Œ≥)) = œÄ (x) := by simpa [quotient_group.eq'] using Œ≥_in_Œì,
    simp [(‚Ä¢), this],
  end }

/-- Assuming `Œì` is a normal subgroup of a topological group `G`, the pushforward to the quotient
  group `G ‚ß∏ Œì` of the restriction of a both left- and right-invariant measure on `G` to a
  fundamental domain `ùìï` is a left-invariant measure on `G ‚ß∏ Œì`. -/
@[to_additive "Assuming `Œì` is a normal subgroup of an additive topological group `G`, the
  pushforward to the quotient group `G ‚ß∏ Œì` of the restriction of a both left- and right-invariant
  measure on `G` to a fundamental domain `ùìï` is a left-invariant measure on `G ‚ß∏ Œì`."]
lemma measure_theory.is_fundamental_domain.is_mul_left_invariant_map [subgroup.normal Œì]
  [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant] :
  (measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)).is_mul_left_invariant :=
{ map_mul_left_eq_self := begin
    intros x,
    apply measure.ext,
    intros A hA,
    obtain ‚ü®x‚ÇÅ, _‚ü© := @quotient.exists_rep _ (quotient_group.left_rel Œì) x,
    haveI := hùìï.smul_invariant_measure_map,
    convert measure_preimage_smul x‚ÇÅ ((measure.map quotient_group.mk) (Œº.restrict ùìï)) A using 1,
    rw [‚Üê h, measure.map_apply],
    { refl, },
    { exact measurable_const_mul _, },
    { exact hA, },
  end }

variables [t2_space (G ‚ß∏ Œì)] [second_countable_topology (G ‚ß∏ Œì)] (K : positive_compacts (G ‚ß∏ Œì))

/-- Given a normal subgroup `Œì` of a topological group `G` with Haar measure `Œº`, which is also
  right-invariant, and a finite volume fundamental domain `ùìï`, the pushforward to the quotient
  group `G ‚ß∏ Œì` of the restriction of `Œº` to `ùìï` is a multiple of Haar measure on `G ‚ß∏ Œì`. -/
@[to_additive "Given a normal subgroup `Œì` of an additive topological group `G` with Haar measure
  `Œº`, which is also right-invariant, and a finite volume fundamental domain `ùìï`, the pushforward
  to the quotient group `G ‚ß∏ Œì` of the restriction of `Œº` to `ùìï` is a multiple of Haar measure on
  `G ‚ß∏ Œì`."]
lemma measure_theory.is_fundamental_domain.map_restrict_quotient [subgroup.normal Œì]
  [measure_theory.measure.is_haar_measure Œº] [Œº.is_mul_right_invariant]
  (hùìï_finite : Œº ùìï < ‚ä§) : measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)
  = (Œº (ùìï ‚à© (quotient_group.mk' Œì) ‚Åª¬π' K)) ‚Ä¢ (measure_theory.measure.haar_measure K) :=
begin
  let œÄ : G ‚Üí* G ‚ß∏ Œì := quotient_group.mk' Œì,
  have meas_œÄ : measurable œÄ := continuous_quotient_mk.measurable,
  have ùìïmeas : null_measurable_set ùìï Œº := hùìï.null_measurable_set,
  haveI : is_finite_measure (Œº.restrict ùìï) :=
    ‚ü®by { rw [measure.restrict_apply‚ÇÄ' ùìïmeas, univ_inter], exact hùìï_finite }‚ü©,
  -- the measure is left-invariant, so by the uniqueness of Haar measure it's enough to show that
  -- it has the stated size on the reference compact set `K`.
  haveI : (measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)).is_mul_left_invariant :=
    hùìï.is_mul_left_invariant_map,
  rw [measure.haar_measure_unique (measure.map (quotient_group.mk' Œì) (Œº.restrict ùìï)) K,
    measure.map_apply meas_œÄ, measure.restrict_apply‚ÇÄ' ùìïmeas, inter_comm],
  exact K.is_compact.measurable_set,
end


/-- Given a normal subgroup `Œì` of a topological group `G` with Haar measure `Œº`, which is also
  right-invariant, and a finite volume fundamental domain `ùìï`, the quotient map to `G ‚ß∏ Œì` is
  measure-preserving between appropriate multiples of Haar measure on `G` and `G ‚ß∏ Œì`. -/
@[to_additive measure_preserving_quotient_add_group.mk' "Given a normal subgroup `Œì` of an additive
  topological group `G` with Haar measure `Œº`, which is also right-invariant, and a finite volume
  fundamental domain `ùìï`, the quotient map to `G ‚ß∏ Œì` is measure-preserving between appropriate
  multiples of Haar measure on `G` and `G ‚ß∏ Œì`."]
lemma measure_preserving_quotient_group.mk' [subgroup.normal Œì]
  [measure_theory.measure.is_haar_measure Œº] [Œº.is_mul_right_invariant]
  (hùìï_finite : Œº ùìï < ‚ä§) (c : ‚Ñù‚â•0) (h : Œº (ùìï ‚à© (quotient_group.mk' Œì) ‚Åª¬π' K) = c) :
  measure_preserving
    (quotient_group.mk' Œì)
    (Œº.restrict ùìï)
    (c ‚Ä¢ (measure_theory.measure.haar_measure K)) :=
{ measurable := continuous_quotient_mk.measurable,
  map_eq := by rw [hùìï.map_restrict_quotient K hùìï_finite, h]; refl }


---------------------------- UNFOLDING TRICK ---------------

open_locale big_operators ennreal

local notation `Œº_ùìï` := measure.map (@quotient_group.mk G _ Œì) (Œº.restrict ùìï)

@[simp] lemma subgroup_mem_opposite_iff (Œ≥ : G·µê·µí·µñ) : Œ≥ ‚àà Œì.opposite ‚Üî mul_opposite.unop Œ≥ ‚àà Œì :=
by simp [subgroup.opposite]

@[to_additive]
lemma mul_ess_sup_of_g [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant]
  (g : G ‚ß∏ Œì ‚Üí ‚Ñù‚â•0‚àû) (g_measurable : ae_measurable g Œº_ùìï) :
  ess_sup g Œº_ùìï = ess_sup (Œª (x : G), g x) Œº :=
begin
  have hœÄ : measurable (quotient_group.mk : G ‚Üí G ‚ß∏ Œì) := continuous_quotient_mk.measurable,
  rw ess_sup_map_measure g_measurable hœÄ.ae_measurable,
  refine hùìï.ess_sup_measure_restrict _,
  rintros ‚ü®Œ≥, hŒ≥‚ü© x,
  dsimp,
  congr' 1,
  exact quotient_group.mk_mul_of_mem x (mul_opposite.unop Œ≥) hŒ≥,
end

--open_locale measure_theory

@[to_additive]
lemma _root_.measure_theory.is_fundamental_domain.absolutely_continuous_map
  [Œº.is_mul_right_invariant] :
  map (quotient_group.mk : G ‚Üí G ‚ß∏ Œì) Œº ‚â™ map (quotient_group.mk : G ‚Üí G ‚ß∏ Œì) (Œº.restrict ùìï) :=
begin
  set œÄ : G ‚Üí G ‚ß∏ Œì := quotient_group.mk,
  have meas_œÄ : measurable œÄ := continuous_quotient_mk.measurable,
  apply measure_theory.measure.absolutely_continuous.mk,
  intros s s_meas hs,
  rw map_apply meas_œÄ s_meas at hs ‚ä¢,
  rw measure.restrict_apply at hs,
  apply hùìï.measure_zero_of_invariant _ _ hs,
  {
    intros Œ≥,
    ext g,
    rw set.mem_smul_set_iff_inv_smul_mem,
    rw mem_preimage,
    rw mem_preimage,
    congrm _ ‚àà s,
    convert quotient_group.mk_mul_of_mem g (mul_opposite.unop (Œ≥‚Åª¬π)) (Œ≥‚Åª¬π).2,
  },
  sorry, -- HOMEWORK easy measurability
end

/-- This is the "unfolding" trick

 PROOF: (Remember we PRed `integral_eq_tsum`)

‚à´_G f = ‚àë_Œ≥ ‚à´_ùìï f(Œ≥‚Åª¬π ‚Ä¢ x ) : hùìï.integral_eq_tsum'
... = ‚à´_ùìï  ‚àë_Œ≥  f(Œ≥‚Åª¬π ‚Ä¢ x ) : integral_tsum (to be PRed)
... = ‚à´_ùìï  F ‚àò œÄ  : def of F
... = ‚à´_(G/Œì) F
 -/
@[to_additive]
lemma mul_unfolding_trick' [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant]
  (f : G ‚Üí ‚ÑÇ)
  (f_summable: ‚àÄ x : G, summable (Œª (Œ≥ : Œì.opposite), f (Œ≥‚Åª¬π ‚Ä¢ x))) -- NEEDED??
  (f_‚Ñí_1 : integrable f Œº)
  (F : G ‚ß∏ Œì ‚Üí ‚ÑÇ)
  (F_ae_measurable : ae_strongly_measurable F Œº_ùìï) -- NEEDED??
  (hFf : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) = ‚àë' (Œ≥ : Œì.opposite), f(Œ≥ ‚Ä¢ x)) :
  ‚à´ (x : G), f x ‚àÇŒº = ‚à´ (x : G ‚ß∏ Œì), F x ‚àÇŒº_ùìï :=
begin
  convert hùìï.integral_eq_tsum f _ using 2,
  sorry,
end

--- STOPPED 1/10/23. Next time: PR `fundamental_domain.set_integral_eq_tsum` and explore alternative
--- proofs of unfolding:

/-- This is the "unfolding" trick -/
@[to_additive]
lemma mul_unfolding_trick [Œº.is_mul_left_invariant] [Œº.is_mul_right_invariant]
  {f : G ‚Üí ‚ÑÇ}
  (f_summable: ‚àÄ x : G, summable (Œª (Œ≥ : Œì.opposite), f (Œ≥‚Åª¬π ‚Ä¢ x))) -- NEEDED??
  (f_‚Ñí_1 : integrable f Œº)
  {g : G ‚ß∏ Œì ‚Üí ‚ÑÇ}
  (hg : ae_strongly_measurable g Œº_ùìï)
  (g_‚Ñí_infinity : ess_sup (Œª x, ‚Üë‚à•g x‚à•‚Çä) Œº_ùìï < ‚àû)
  {F : G ‚ß∏ Œì ‚Üí ‚ÑÇ}
  (F_ae_measurable : ae_strongly_measurable F Œº_ùìï) -- NEEDED??
  (hFf : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) = ‚àë' (Œ≥ : Œì.opposite), f(Œ≥ ‚Ä¢ x)) :
  ‚à´ (x : G), f x * g (x : G ‚ß∏ Œì) ‚àÇŒº = ‚à´ (x : G ‚ß∏ Œì), F x * g x ‚àÇŒº_ùìï :=
begin
  refine mul_unfolding_trick' hùìï (f * (g ‚àò (coe : G ‚Üí G ‚ß∏ Œì))) _ _ (F * g) _ _,
end

#exit

--  set F : G ‚ß∏ Œì ‚Üí ‚ÑÇ :=  Œª x , ‚àë' (Œ≥ : Œì.opposite), f(Œ≥ ‚Ä¢ x)) ,
  have hFf' : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) = ‚àë' (Œ≥ : Œì.opposite), f(Œ≥‚Åª¬π ‚Ä¢ x),
  { intros x,
    rw hFf x,
    exact ((equiv.inv (Œì.opposite)).tsum_eq  (Œª Œ≥, f(Œ≥ ‚Ä¢ x))).symm, },
  let œÄ : G ‚Üí G ‚ß∏ Œì := quotient_group.mk,
  have meas_œÄ : measurable œÄ := continuous_quotient_mk.measurable,
  rw integral_map meas_œÄ.ae_measurable,
  have : ‚àÄ (x : G), F (x : G ‚ß∏ Œì) * g (x) = ‚àë' (Œ≥ : Œì.opposite), f (Œ≥‚Åª¬π ‚Ä¢ x) * g (x),
  { intros x,
    rw hFf' x,
    convert (@tsum_smul_const _ Œì.opposite _ _ _ _ _ _ _ (Œª Œ≥, f (Œ≥‚Åª¬π ‚Ä¢ x)) _ (g x) _).symm using 1,
    exact f_summable x, },
  refine eq.trans _ (integral_congr_ae (filter.eventually_of_forall this)).symm,
  haveI : encodable Œì.opposite := sorry,
  rw measure_theory.integral_tsum, --- WILL NEED MORE ASSUMPTIONS TO BE SATISFIED HERE
  haveI := hùìï.smul_invariant_measure_map,
--  have := hùìï.set_integral_eq_tsum (Œª x, f x * g x) univ _,
  convert hùìï.set_integral_eq_tsum (Œª x, f x * g x) univ _,
  { simp, },
  { ext1 Œ≥,
    simp only [smul_set_univ, univ_inter],
    congr,
    ext1 x,
    have : g ‚Üë(Œ≥‚Åª¬π ‚Ä¢ x) = g x,
    { obtain ‚ü®Œ≥‚ÇÄ, hŒ≥‚ÇÄ‚ü© := Œ≥,
      congr' 1,
      simpa [quotient_group.eq, (‚Ä¢)] using hŒ≥‚ÇÄ, },
    rw this, },
  { refine integrable.mul_‚Ñí_infinity f _ (Œª x : G, g (x : G ‚ß∏ Œì)) _ _,
    { rw measure.restrict_univ,
      exact f_‚Ñí_1 },
    { rw measure.restrict_univ,
      exact (ae_strongly_measurable_of_absolutely_continuous hùìï.absolutely_continuous_map _
        hg).comp_measurable meas_œÄ, },
    { have hg' : ae_strongly_measurable (Œª x, ‚Üë‚à•g x‚à•‚Çä) Œº_ùìï :=
        (ennreal.continuous_coe.comp continuous_nnnorm).comp_ae_strongly_measurable hg,
      rw [measure.restrict_univ, ‚Üê mul_ess_sup_of_g hùìï (Œª x, ‚Üë‚à•g x‚à•‚Çä) hg'.ae_measurable],
      exact g_‚Ñí_infinity } },
  { intros Œ≥,
    have hf' : ae_strongly_measurable f (measure.map ((‚Ä¢) Œ≥‚Åª¬π) Œº),
    { rw measure_theory.map_smul,
      exact f_‚Ñí_1.1 },
    refine ((hf'.comp_measurable (measurable_const_smul _)).mono_measure _).mul _,
    { exact measure.restrict_le_self },
    { exact hg.comp_measurable meas_œÄ } },
  { have := F_ae_measurable,

  },
end
