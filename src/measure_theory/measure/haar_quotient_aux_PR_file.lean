/-
Copyright (c) 2022 Alex Kontorovich and Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/

import algebra.group.opposite
import analysis.normed_space.lp_space
import measure_theory.group.fundamental_domain
import measure_theory.integral.integral_eq_improper
import measure_theory.measure.haar
import topology.compact_open

/-!

-/

open measure_theory
open_locale measure_theory

@[to_additive ae_strongly_measurable_of_absolutely_continuous_add]
lemma ae_strongly_measurable_of_absolutely_continuous {Œ± Œ≤ : Type*} [measurable_space Œ±]
  [topological_space Œ≤] {Œº ŒΩ : measure Œ±} (h : ŒΩ ‚â™ Œº) (g : Œ± ‚Üí Œ≤)
  (hŒº : ae_strongly_measurable g Œº) : ae_strongly_measurable g ŒΩ :=
begin
  obtain ‚ü®g‚ÇÅ, hg‚ÇÅ, hg‚ÇÅ'‚ü© := hŒº,
  refine ‚ü®g‚ÇÅ, hg‚ÇÅ, h.ae_eq hg‚ÇÅ'‚ü©,
end

open_locale big_operators nnreal

noncomputable theory

open_locale topological_space


--- *** ADD to data.real.ennreal *** USELESS HERE
theorem ennreal.coe_le_of_le_to_nnreal {r : nnreal} {a : ennreal} (h : r ‚â§ a.to_nnreal) :
  (r : ennreal) ‚â§ a :=
begin
  by_cases ha : a = ‚ä§,
  { simp [ha], },
  rw ‚Üê ennreal.coe_to_nnreal ha,
  exact_mod_cast h,
end

--- *** ADD to data.real.ennreal *** USELESS HERE
theorem ennreal.le_to_nnreal_of_coe_le {r : nnreal} {a : ennreal} (h : (r : ennreal) ‚â§ a)
  (ha : a ‚â† ‚ä§) : r ‚â§ a.to_nnreal := by rwa [‚Üê ennreal.coe_le_coe, ennreal.coe_to_nnreal ha]

--- *** ADD to data.real.ennreal *** USELESS HERE
theorem ennreal.eq_to_nnreal_of_coe_eq {a : nnreal} {b : ennreal} (h : (a : ennreal) = b) :
  a = b.to_nnreal := by convert congr_arg ennreal.to_nnreal h

-- *** ADD to analysis.normed.group.basic *** USELESS HERE
theorem nnnorm_sub_rev {E : Type*} [seminormed_add_comm_group E] (g h : E) :
‚à•g - h‚à•‚Çä = ‚à•h - g‚à•‚Çä :=
begin
  rw ‚Üê nnnorm_neg,
  congr,
  abel,
end

--- *** ADD measure_theory.integral.lebesgue *** USELESS HERE
theorem measure_theory.lintegral_sub_compl {Œ± : Type*} {m : measurable_space Œ±} {Œº : measure Œ±}
  {f : Œ± ‚Üí ennreal} {A : set Œ±}  (hA : measurable_set A) (hf : ‚à´‚Åª x in A, f x ‚àÇŒº < ‚ä§) :
  ‚à´‚Åª (x : Œ±) in A·∂ú, f x ‚àÇŒº = ‚à´‚Åª (x : Œ±), f x ‚àÇŒº - ‚à´‚Åª (x : Œ±) in A, f x ‚àÇŒº :=
begin
  nth_rewrite 1 ‚Üê measure_theory.lintegral_add_compl f hA,
  rw ennreal.add_sub_cancel_left hf.ne,
end

-- USELESS HERE, add elsewhere?
theorem ae_cover_finset (Œ± : Type*) [measurable_space Œ±] [measurable_singleton_class Œ±] :
  measure_theory.ae_cover measure.count filter.at_top (coe : finset Œ± ‚Üí set Œ±) :=
begin
  classical,
  refine ‚ü® _, Œª s, s.measurable_set‚ü©,
  filter_upwards,
  intros a,
  rw filter.eventually_at_top,
  use {a},
  intros b hb,
  apply hb,
  simp,
end

-- *** NOT USED move to measure_theory.measurable_space_def, after `measurable_singleton_class`
theorem measurable_set_of_countable {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] {A : set Œ±} (hA : set.countable A) : measurable_set A :=
begin
  convert @measurable_set.bUnion _ _ _ has_singleton.singleton _ hA
    (Œª b _,  measurable_singleton_class.measurable_set_singleton _),
  simp,
end

-- *** NOT USED move to measure_theory.measurable_space_def, after `measurable_singleton_class`
theorem measurable_set_of_encodable_singleton_class {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±] (A : set Œ±) : measurable_set A :=
 measurable_set_of_countable A.to_countable

--- *** NOT USED
theorem measurable_of_encodable_singleton_class {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±] (f : Œ± ‚Üí ennreal) : measurable f :=
Œª s hs, measurable_set_of_encodable_singleton_class _

-- NEVER USED PRed and reogranized maybe? 1/9/23
-- ** Make this like `lintegral_tendsto_of_countably_generated`, generalize to arbitrary `ae_cover`
theorem extracted_goal_from_extracted_goal {Œ± : Type*} [measurable_space Œ±]
  [measurable_singleton_class Œ±] [encodable Œ±] {f : Œ± ‚Üí ennreal}
  (hf : ‚à´‚Åª (x : Œ±), (f x) ‚àÇmeasure.count < ‚ä§) : filter.tendsto (Œª (s : finset Œ±),
  ‚à´‚Åª (x : Œ±) in (s : set Œ±)·∂ú, f x ‚àÇmeasure.count) filter.at_top (ùìù 0) :=
begin
  have : filter.tendsto (Œª (s : finset Œ±),
    ‚à´‚Åª (x : Œ±), f x ‚àÇmeasure.count - ‚à´‚Åª (x : Œ±) in (s : set Œ±), f x ‚àÇmeasure.count)
    filter.at_top (ùìù 0),
  { have hh := @tendsto_const_nhds ennreal (finset Œ±) _ (‚à´‚Åª (x : Œ±), (f x) ‚àÇmeasure.count)
      filter.at_top,
    have := (ae_cover_finset Œ±).lintegral_tendsto_of_countably_generated
      (measurable_of_encodable_singleton_class _).ae_measurable,
    convert ennreal.tendsto.sub hh this (or.inl (hf.ne)),
    simp, },
  convert this,
  funext s,
  refine measure_theory.lintegral_sub_compl s.measurable_set _,
  refine lt_of_le_of_lt _ hf,
  convert measure_theory.lintegral_mono_set (_ : (s : set Œ±) ‚äÜ set.univ); simp,
end
