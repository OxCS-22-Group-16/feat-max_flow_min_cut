/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/

import analysis.normed_space.finite_dimension

open filter metric
open_locale topological_space

/-!
# Une introduction √† Lean par le th√©or√®me de Riesz

Je vais expliquer la preuve du th√©or√®me de Riesz √† l'ordinateur.

Le th√©or√®me de Riesz affirme que si un espace vectoriel r√©el a une boule compacte, alors il est
de dimension finie.

On raisonne par contrapos√©e : si l'espace n'est pas de dimension finie, on va construire une suite
dans la boule de rayon `2` dont tous les points sont √† distance au moins `1`, ce qui contredirait
la compacit√© de la boule.

On construit la suite par r√©currence. Supposons les `n` premiers points construits. Ils engendrent
un sous-espace `F` de dimension finie, qui est complet (par √©quivalence des normes) donc ferm√©.
Soit `x ‚àâ F`, et notons `d` sa distance √† `F` (qui est positive par fermeture). On choisit
`y ‚àà F` avec `dist x y < 2 d`. J'affirme que `d‚Åª¬π * (x - y)` convient pour le point suivant.
Il est bien de norme au plus `2`. De plus, comme `x·µ¢ ‚àà F`, on a `y + d * x·µ¢ ‚àà F`. Ainsi,
`d ‚â§ dist x (y + d * x·µ¢)`, soit `d ‚â§ ‚Äñd * (d‚Åª¬π * (x - y) - x·µ¢)‚Äñ`,
et donc `1 ‚â§ ‚Äñd‚Åª¬π * (x - y) - x·µ¢‚Äñ` comme on le voulait.

Pour expliquer cette preuve de 10 lignes √† Lean, on va la couper en plusieurs sous-lemmes.
-/

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E]

/-- √âtant donn√© un sous-espace vectoriel ferm√© qui n'est pas tout l'espace, on peut trouver un point
de norme au plus `2` √† distance au moins `1` de tout point du sous-espace. -/
lemma existe_point_loin_de_sousmodule
  (F : submodule ‚Ñù E) (hF : ‚àÉ x, x ‚àâ F) (hFc : is_closed (F : set E)) :
  ‚àÉ (z : E), ‚Äñz‚Äñ < 2 ‚àß (‚àÄ y ‚àà F, 1 ‚â§ ‚Äñz - y‚Äñ) :=
begin
  obtain ‚ü®x, hx‚ü© := hF,
  let d := inf_dist x F,
  have hFn : (F : set E).nonempty, from ‚ü®0, F.zero_mem‚ü©,
  have d_pos : 0 < d, from (is_closed.not_mem_iff_inf_dist_pos hFc hFn).1 hx,
  obtain ‚ü®y‚ÇÄ, hy‚ÇÄF, hxy‚ÇÄ‚ü© : ‚àÉ y ‚àà F, dist x y < 2 * d,
  { apply (inf_dist_lt_iff hFn).1,
    exact lt_two_mul_self d_pos },
    -- linarith },
  let z := d‚Åª¬π ‚Ä¢ (x - y‚ÇÄ),
  have Nz : ‚Äñz‚Äñ < 2, by simpa [z, norm_smul, abs_of_nonneg d_pos.le, ‚Üê div_eq_inv_mul,
    div_lt_iff d_pos, ‚Üê dist_eq_norm],
  have I : ‚àÄ y ‚àà F, 1 ‚â§ ‚Äñz - y‚Äñ,
  { assume y hyF,
    have A : d ‚â§ dist x (y‚ÇÄ + d ‚Ä¢ y),
    { apply inf_dist_le_dist_of_mem,
      exact F.add_mem hy‚ÇÄF (F.smul_mem _ hyF), },
    have B : d‚Åª¬π * d = 1, by field_simp [d_pos.ne'],
    calc
      1 = d‚Åª¬π * d                    : B.symm
    ... ‚â§ d‚Åª¬π * dist x (y‚ÇÄ + d ‚Ä¢ y)  : mul_le_mul_of_nonneg_left A (inv_nonneg.2 d_pos.le)
    ... = d‚Åª¬π * ‚Äñ(x - y‚ÇÄ) - d ‚Ä¢ y‚Äñ   : by rw [dist_eq_norm, sub_sub]
    ... = ‚Äñd‚Åª¬π ‚Ä¢ ((x - y‚ÇÄ) - d ‚Ä¢ y)‚Äñ : by simp [norm_smul, abs_of_nonneg d_pos.le]
    ... = ‚Äñz - y‚Äñ                    : by simp_rw [z, smul_sub, smul_smul, B, one_smul] },
  exact ‚ü®z, Nz, I‚ü©,
end

/-- Dans un espace vectoriel norm√© r√©el de dimension infinie, √©tant donn√© un ensemble fini de points,
on peut trouver un point de norme au plus `2` √† distance au moins `1` de tous ces points. -/
lemma existe_point_loin_de_fini
  (s : set E) (hs : set.finite s) (h : ¬¨(finite_dimensional ‚Ñù E)) :
  ‚àÉ (z : E), ‚Äñz‚Äñ < 2 ‚àß (‚àÄ y ‚àà s, 1 ‚â§ ‚Äñz - y‚Äñ) :=
begin
  let F := submodule.span ‚Ñù s,
  haveI : finite_dimensional ‚Ñù F := module.finite_def.2
    ((submodule.fg_top _).2 (submodule.fg_def.2 ‚ü®s, hs, rfl‚ü©)),
  have Fclosed : is_closed (F : set E) := submodule.closed_of_finite_dimensional _,
  have hF : ‚àÉ x, x ‚àâ F,
  { contrapose! h,
    have : (‚ä§ : submodule ‚Ñù E) = F, by { ext x, simp [h] },
    have : finite_dimensional ‚Ñù (‚ä§ : submodule ‚Ñù E), by rwa this,
    refine module.finite_def.2 ((submodule.fg_top _).1 (module.finite_def.1 this)) },
  obtain ‚ü®x, x_lt_2, hx‚ü© : ‚àÉ (x : E), ‚Äñx‚Äñ < 2 ‚àß ‚àÄ (y : E), y ‚àà F ‚Üí 1 ‚â§ ‚Äñx - y‚Äñ :=
    existe_point_loin_de_sousmodule F hF Fclosed,
  exact ‚ü®x, x_lt_2, Œª y hy, hx _ (submodule.subset_span hy)‚ü©,
end

/-- Dans un espace vectoriel norm√© r√©el de dimension infinie, on peut trouver une suite de points
tous de norme au plus `2` et mutuellement distants d'au moins `1`. -/
lemma existe_suite_loin
  (h : ¬¨(finite_dimensional ‚Ñù E)) :
  ‚àÉ (u : ‚Ñï ‚Üí E), (‚àÄ n, ‚Äñu n‚Äñ < 2) ‚àß (‚àÄ m n, m ‚â† n ‚Üí 1 ‚â§ ‚Äñu n - u m‚Äñ) :=
begin
  haveI : is_symm E (Œª (x y : E), 1 ‚â§ ‚Äñy - x‚Äñ),
  { constructor,
    assume x y hxy,
    rw ‚Üê norm_neg,
    simpa },
  apply exists_seq_of_forall_finset_exists' (Œª (x : E), ‚Äñx‚Äñ < 2) (Œª (x : E) (y : E), 1 ‚â§ ‚Äñy - x‚Äñ),
  assume s hs,
  exact existe_point_loin_de_fini (s : set E) s.finite_to_set h
end

/-- Consid√©rons un espace vectoriel norm√© r√©el dans lequel la boule ferm√©e de rayon `2` est
compacte. Alors cet espace est de dimension finie. -/
theorem ma_version_de_riesz (h : is_compact (metric.closed_ball (0 : E) 2)) :
  finite_dimensional ‚Ñù E :=
begin
  by_contra hfin,
  obtain ‚ü®u, u_lt_two, u_far‚ü© :
    ‚àÉ (u : ‚Ñï ‚Üí E), (‚àÄ n, ‚Äñu n‚Äñ < 2) ‚àß (‚àÄ m n, m ‚â† n ‚Üí 1 ‚â§ ‚Äñu n - u m‚Äñ) :=
    existe_suite_loin hfin,
  have A : ‚àÄ n, u n ‚àà closed_ball (0 : E) 2,
  { assume n,
    simpa only [norm_smul, dist_zero_right, mem_closed_ball] using (u_lt_two n).le },
  obtain ‚ü®x, hx, œÜ, œÜmono, œÜlim‚ü© : ‚àÉ (x : E) (H : x ‚àà closed_ball (0 : E) 2) (œÜ : ‚Ñï ‚Üí ‚Ñï),
    strict_mono œÜ ‚àß tendsto (u ‚àò œÜ) at_top (ùìù x) := h.tendsto_subseq A,
  have B : cauchy_seq (u ‚àò œÜ) := œÜlim.cauchy_seq,
  obtain ‚ü®N, hN‚ü© : ‚àÉ (N : ‚Ñï), ‚àÄ (n : ‚Ñï), N ‚â§ n ‚Üí dist ((u ‚àò œÜ) n) ((u ‚àò œÜ) N) < 1 :=
    metric.cauchy_seq_iff'.1 B 1 zero_lt_one,
  apply lt_irrefl (1 : ‚Ñù),
  calc 1 ‚â§ dist (u (œÜ (N+1))) (u (œÜ N)) : begin
    simp only [dist_eq_norm, ‚Üêsmul_sub, norm_smul, -mul_one],
    apply u_far,
    exact (œÜmono (nat.lt_succ_self N)).ne
  end
  ... < 1 : hN (N+1) (nat.le_succ N)
end

/- La preuve est finie, et prend environ 100 lignes, soit 10 fois plus que la version informelle.
C'est assez typique. -/

theorem la_vraie_version_de_riesz
  (ùïú : Type*) [nontrivially_normed_field ùïú] {F : Type*} [normed_add_comm_group F]
  [normed_space ùïú F] [complete_space ùïú] {r : ‚Ñù}
  (r_pos : 0 < r)  {c : F} (hc : is_compact (closed_ball c r)) :
  finite_dimensional ùïú F :=
finite_dimensional_of_is_compact_closed_ball ùïú r_pos hc
-- by library_search

/- Pour l'√©nonc√© pr√©c√©dent :
  have : (0 : ‚Ñù) < 2 := zero_lt_two,
  library_search,
-/

/- Les preuves sont v√©rifi√©es par le "noyau". Mais comment se convaincre que les d√©finitions
sont bonnes ? Avec une mauvaise d√©finition, on risque de pouvoir d√©montrer n'importe quoi. -/

def is_SG_compact {Œ± : Type*} (s : set Œ±) : Prop := false

theorem riesz_avec_is_SG_compact (h : is_SG_compact (closed_ball (0 : E) 2)) :
  finite_dimensional ‚Ñù E :=
false.elim h

theorem antiriesz_avec_is_SG_compact (h : is_SG_compact (closed_ball (0 : E) 2)) :
  ¬¨(finite_dimensional ‚Ñù E) :=
false.elim h

/- On peut essayer de d√©rouler les d√©finitions pour voir si elles ont l'air raisonnables. -/

#check is_compact
#check finite_dimensional

/- On peut voir si les d√©finitions permettent de d√©montrer des th√©or√®mes raisonnables. -/

example (n : ‚Ñï) : finite_dimensional ‚Ñù (fin n ‚Üí ‚Ñù) := by apply_instance

example (n : ‚Ñï) : is_compact (closed_ball (0 : fin n ‚Üí ‚Ñù) 1) := is_compact_closed_ball _ _

example : ¬¨(is_compact (set.univ : set ‚Ñù)) := noncompact_univ ‚Ñù

example {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [nontrivial E] :
  ¬¨(is_compact (set.univ : set E)) := noncompact_univ E
