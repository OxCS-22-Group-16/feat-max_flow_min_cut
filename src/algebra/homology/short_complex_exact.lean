import algebra.homology.short_complex_homology
import algebra.homology.short_complex_abelian
import algebra.homology.short_complex_preserves_homology
import category_theory.preadditive.opposite

noncomputable theory

open category_theory category_theory.preadditive
open_locale zero_object

variables {C D : Type*} [category C] [category D]

namespace category_theory.limits

lemma is_zero.op {X : C} (h : is_zero X) : is_zero (opposite.op X) :=
‚ü®Œª Y, ‚ü®‚ü®‚ü®(h.from (opposite.unop Y)).op‚ü©, Œª f, quiver.hom.unop_inj (h.eq_of_tgt _ _)‚ü©‚ü©,
  Œª Y, ‚ü®‚ü®‚ü®(h.to (opposite.unop Y)).op‚ü©, Œª f, quiver.hom.unop_inj (h.eq_of_src _ _)‚ü©‚ü©‚ü©

lemma is_zero.unop {X : C·µí·µñ} (h : is_zero X) : is_zero (opposite.unop X) :=
‚ü®Œª Y, ‚ü®‚ü®‚ü®(h.from (opposite.op Y)).unop‚ü©, Œª f, quiver.hom.op_inj (h.eq_of_tgt _ _)‚ü©‚ü©,
  Œª Y, ‚ü®‚ü®‚ü®(h.to (opposite.op Y)).unop‚ü©, Œª f, quiver.hom.op_inj (h.eq_of_src _ _)‚ü©‚ü©‚ü©

lemma is_zero.iff_of_iso {X Y : C} (e : X ‚âÖ Y) :
  is_zero X ‚Üî is_zero Y :=
begin
  split,
  { exact Œª h, is_zero.of_iso h e.symm, },
  { exact Œª h, is_zero.of_iso h e, },
end

instance [has_zero_object C] : has_zero_object C·µí·µñ :=
‚ü®‚ü®opposite.op 0, is_zero.op (is_zero_zero C)‚ü©‚ü©

end category_theory.limits

open category_theory category_theory.category category_theory.limits

namespace short_complex

section

variables [has_zero_morphisms C] [has_zero_morphisms D]
  (S : short_complex C) {S‚ÇÅ S‚ÇÇ : short_complex C}

def exact :=
(‚àÉ (h : S.homology_data), is_zero h.left.H)

variable {S}

lemma exact.has_homology (h : S.exact) : has_homology S :=
has_homology.mk' h.some

lemma homology_data.exact_iff (h : S.homology_data) :
  S.exact ‚Üî is_zero h.left.H :=
begin
  split,
  { rintro ‚ü®h‚ÇÅ, z‚ü©,
    exact is_zero.of_iso z (homology_map_iso' (iso.refl S) h h‚ÇÅ), },
  { intro z,
    exact ‚ü®h, z‚ü©, },
end

lemma homology_data.exact_iff' (h : S.homology_data) :
  S.exact ‚Üî is_zero h.right.H :=
begin
  suffices : is_zero h.left.H ‚Üî is_zero h.right.H,
  { exact h.exact_iff.trans this, },
  exact ‚ü®Œª z, is_zero.of_iso z h.iso.symm,
    Œª z, is_zero.of_iso z h.iso‚ü©,
end

variable (S)

lemma exact_iff_is_zero_homology [S.has_homology] :
  S.exact ‚Üî is_zero S.homology :=
by apply homology_data.exact_iff

lemma exact_iff_homology_zero [S.has_homology] [has_zero_object C] :
  S.exact ‚Üî nonempty (S.homology ‚âÖ 0) :=
begin
  rw exact_iff_is_zero_homology,
  split,
  { exact Œª h, ‚ü®h.iso_zero‚ü©, },
  { exact Œª e, is_zero.of_iso (is_zero_zero C) e.some, },
end

variable {S}

lemma left_homology_data.exact_iff (h : S.left_homology_data) [S.has_homology] :
  S.exact ‚Üî is_zero h.H :=
S.exact_iff_is_zero_homology.trans
  ‚ü®Œª z, is_zero.of_iso z h.homology_iso.symm, Œª z, is_zero.of_iso z h.homology_iso‚ü©

lemma right_homology_data.exact_iff (h : S.right_homology_data) [S.has_homology] :
  S.exact ‚Üî is_zero h.H :=
S.exact_iff_is_zero_homology.trans
  ‚ü®Œª z, is_zero.of_iso z h.homology_iso.symm, Œª z, is_zero.of_iso z h.homology_iso‚ü©

lemma left_homology_data.exact_map_iff (h : S.left_homology_data) (F : C ‚•§ D)
  [F.preserves_zero_morphisms] [h.is_preserved_by F] [(S.map F).has_homology]:
  (S.map F).exact ‚Üî is_zero (F.obj h.H) :=
(h.map F).exact_iff

lemma right_homology_data.exact_map_iff (h : S.right_homology_data) (F : C ‚•§ D)
  [F.preserves_zero_morphisms] [h.is_preserved_by F] [(S.map F).has_homology]:
  (S.map F).exact ‚Üî is_zero (F.obj h.H) :=
(h.map F).exact_iff

lemma homology_data.exact_iff_i_p_zero (h : S.homology_data) :
  S.exact ‚Üî h.left.i ‚â´ h.right.p = 0 :=
begin
  haveI : S.has_homology := has_homology.mk' h,
  rw [h.left.exact_iff, ‚Üê h.comm],
  split,
  { intro h',
    simp only [h'.eq_of_src h.iso.hom 0, zero_comp, comp_zero], },
  { intro eq,
    rw [is_zero.iff_id_eq_zero, ‚Üê cancel_mono h.iso.hom, id_comp,
      ‚Üê cancel_mono h.right.Œπ, ‚Üê cancel_epi h.left.œÄ, zero_comp, zero_comp, comp_zero, eq], },
end

lemma exact_map_of_preserves_homology (hS : S.exact)
  (F : C ‚•§ D) [F.preserves_zero_morphisms] [F.preserves_left_homology_of S]
  [F.preserves_right_homology_of S] : (S.map F).exact :=
begin
  haveI : S.has_homology := hS.has_homology,
  let h := S.some_homology_data,
  haveI := functor.preserves_left_homology_of.condition F S,
  haveI := functor.preserves_right_homology_of.condition F S,
  rw [h.exact_iff, is_zero.iff_id_eq_zero] at hS,
  simpa only [(h.map F).exact_iff, is_zero.iff_id_eq_zero,
    category_theory.functor.map_id, functor.map_zero] using F.congr_map hS,
end

variable (S)

lemma exact_map_iff_of_preserves_homology [S.has_homology]
  (F : C ‚•§ D) [F.preserves_zero_morphisms] [F.preserves_left_homology_of S]
  [F.preserves_right_homology_of S] [faithful F] :
  (S.map F).exact ‚Üî S.exact :=
begin
  let h := S.some_homology_data,
  have e : F.map (ùüô h.left.H) = 0 ‚Üî (ùüô h.left.H) = 0,
  { split,
    { intro eq,
      apply F.map_injective,
      rw [eq, F.map_zero], },
    { intro eq,
      rw [eq, F.map_zero], }, },
  haveI := functor.preserves_left_homology_of.condition F S,
  haveI := functor.preserves_right_homology_of.condition F S,
  simpa only [h.exact_iff, is_zero.iff_id_eq_zero, (h.map F).exact_iff,
    F.map_id] using e,
end

lemma exact_iff_is_zero_left_homology [S.has_homology] :
  S.exact ‚Üî is_zero S.left_homology :=
by apply left_homology_data.exact_iff

lemma exact_iff_is_zero_right_homology [S.has_homology] :
  S.exact ‚Üî is_zero S.right_homology :=
by apply right_homology_data.exact_iff

lemma exact_iff_i_p_zero [S.has_homology] (h‚ÇÅ : S.left_homology_data)
  (h‚ÇÇ : S.right_homology_data) :
  S.exact ‚Üî h‚ÇÅ.i ‚â´ h‚ÇÇ.p = 0 :=
(homology_data.of_is_iso_left_right_homology_comparison' h‚ÇÅ h‚ÇÇ).exact_iff_i_p_zero

lemma exact_iff_cycles_i_p_cycles_co_zero [S.has_homology] :
  S.exact ‚Üî S.cycles_i ‚â´ S.p_cycles_co = 0 :=
S.exact_iff_i_p_zero _ _

lemma exact_iff_kernel_Œπ_comp_cokernel_œÄ_zero [S.has_homology]
  [has_kernel S.g] [has_cokernel S.f] :
  S.exact ‚Üî kernel.Œπ S.g ‚â´ cokernel.œÄ S.f = 0 :=
begin
  haveI := has_left_homology.has_cokernel S,
  haveI := has_right_homology.has_kernel S,
  exact S.exact_iff_i_p_zero (left_homology_data.of_ker_of_coker S)
    (right_homology_data.of_coker_of_ker S),
end

lemma exact_of_is_zero_X‚ÇÇ (h : is_zero S.X‚ÇÇ) : S.exact :=
begin
  rw (homology_data.of_zeros S (is_zero.eq_of_tgt h _ _) (is_zero.eq_of_src h _ _)).exact_iff,
  exact h,
end

lemma exact_iff_of_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) : S‚ÇÅ.exact ‚Üî S‚ÇÇ.exact :=
begin
  suffices : ‚àÄ ‚¶ÉS‚ÇÅ S‚ÇÇ : short_complex C‚¶Ñ (e : S‚ÇÅ ‚âÖ S‚ÇÇ), S‚ÇÅ.exact ‚Üí S‚ÇÇ.exact,
  { exact ‚ü®this e, this e.symm‚ü©, },
  rintros S‚ÇÅ S‚ÇÇ e h,
  haveI := h.has_homology,
  haveI := has_homology_of_iso e,
  rw exact_iff_is_zero_homology at ‚ä¢ h,
  exact is_zero.of_iso h (homology_map_iso e.symm),
end

lemma exact_iff_of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
  S‚ÇÅ.exact ‚Üî S‚ÇÇ.exact :=
begin
  split,
  { rintro ‚ü®h‚ÇÅ, z‚ÇÅ‚ü©,
    exact ‚ü®homology_data.of_epi_of_is_iso_of_mono œÜ h‚ÇÅ, z‚ÇÅ‚ü©, },
  { rintro ‚ü®h‚ÇÅ, z‚ÇÅ‚ü©,
    exact ‚ü®homology_data.of_epi_of_is_iso_of_mono' œÜ h‚ÇÅ, z‚ÇÅ‚ü©, },
end

lemma exact_iff_op : S.exact ‚Üî S.op.exact :=
begin
  split,
  { rintro ‚ü®h, z‚ü©,
    exact ‚ü®h.op, (is_zero.of_iso z h.iso.symm).op‚ü©, },
  { rintro ‚ü®h, z‚ü©,
    refine ‚ü®h.unop, (is_zero.of_iso z h.iso.symm).unop‚ü©, },
end

lemma exact_iff_unop (S : short_complex C·µí·µñ) : S.exact ‚Üî S.unop.exact :=
begin
  rw S.unop.exact_iff_op,
  exact exact_iff_of_iso S.unop_op.symm,
end

variable {S}

lemma exact.comp_eq_zero (h : S.exact) {X Y : C} {Œπ : X ‚ü∂ S.X‚ÇÇ} (hŒπ : Œπ ‚â´ S.g = 0)
  {œÄ : S.X‚ÇÇ ‚ü∂ Y} (hœÄ : S.f ‚â´ œÄ = 0) : Œπ ‚â´ œÄ = 0 :=
begin
  haveI : S.has_homology := h.has_homology,
  rw exact_iff_cycles_i_p_cycles_co_zero at h,
  rw [‚Üê S.lift_cycles_i Œπ hŒπ, ‚Üê S.p_desc_cycles_co œÄ hœÄ, assoc,
    reassoc_of h, zero_comp, comp_zero],
end

end

section preadditive

variables [preadditive C] {S‚ÇÅ S‚ÇÇ : short_complex C}

lemma homotopy_equiv.exact_iff (e : homotopy_equiv S‚ÇÅ S‚ÇÇ) [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  S‚ÇÅ.exact ‚Üî S‚ÇÇ.exact :=
begin
  simp only [exact_iff_is_zero_homology],
  exact ‚ü®Œª h, is_zero.of_iso h e.homology_iso.symm, Œª h, is_zero.of_iso h e.homology_iso‚ü©,
end

lemma exact_iff_mono [has_zero_object C] (S : short_complex C) (hf : S.f = 0) :
  S.exact ‚Üî mono S.g :=
begin
  split,
  { intro h,
    haveI : S.has_homology := has_homology.mk' h.some,
    rw exact_iff_is_zero_homology at h,
    haveI : is_iso S.p_cycles_co := S.is_iso_p_cycles_co_of hf,
    haveI : mono S.from_cycles_co := mono_of_is_zero_ker _ S.homology_is_kernel h,
    rw ‚Üê S.p_from_cycles_co,
    apply mono_comp, },
  { introI,
    have h : is_limit (kernel_fork.of_Œπ (0 : 0 ‚ü∂ S.X‚ÇÇ) (zero_comp : _ ‚â´ S.g = 0)) :=
      kernel_fork.is_limit.of_Œπ _ _
        (Œª A x hx, 0) (Œª A x hx, by simp only [‚Üê cancel_mono S.g, zero_comp, hx])
        (Œª A x hx b hb, is_zero.eq_of_tgt (is_zero_zero _) _ _),
    exact ‚ü®homology_data.of_limit_kernel_fork S hf _ h, is_zero_zero _‚ü©, },
end

lemma exact_iff_epi [has_zero_object C] (S : short_complex C) (hg : S.g = 0) :
  S.exact ‚Üî epi S.f :=
begin
  rw [S.exact_iff_op, S.op.exact_iff_mono (by simp only [hg, op_f, op_zero])],
  dsimp,
  split,
  { introI,
    change epi (S.f.op.unop),
    apply_instance, },
  { introI,
    apply_instance, },
end

variable (S : short_complex C)

structure splitting (S : short_complex C) :=
(r : S.X‚ÇÇ ‚ü∂ S.X‚ÇÅ)
(s : S.X‚ÇÉ ‚ü∂ S.X‚ÇÇ)
(f_r : S.f ‚â´ r = ùüô _)
(s_g : s ‚â´ S.g = ùüô _)
(id : r ‚â´ S.f + S.g ‚â´ s = ùüô _)

namespace splitting

attribute [reassoc] f_r s_g

variable {S}

@[simps] def split_mono_f (s : S.splitting) : split_mono S.f := ‚ü®s.r, s.f_r‚ü©
lemma is_split_mono_f (s : S.splitting) : is_split_mono S.f := ‚ü®‚ü®s.split_mono_f‚ü©‚ü©
lemma mono_f (s : S.splitting) : mono S.f := by { haveI := s.is_split_mono_f, apply_instance, }

@[simps] def split_epi_g (s : S.splitting) : split_epi S.g := ‚ü®s.s, s.s_g‚ü©
lemma is_split_epi_g (s : S.splitting) : is_split_epi S.g := ‚ü®‚ü®s.split_epi_g‚ü©‚ü©
lemma epi_g (s : S.splitting) : epi S.g := by { haveI := s.is_split_epi_g, apply_instance, }

@[simp]
def left_homology_data [has_zero_object C] (s : S.splitting) :
  left_homology_data S :=
begin
  have hi := kernel_fork.is_limit.of_Œπ S.f S.zero (Œª A x hx, x ‚â´ s.r)
    (Œª A x hx, by { conv_rhs { rw [‚Üê comp_id x, ‚Üê s.id, comp_add, reassoc_of hx,
      zero_comp, add_zero, ‚Üê assoc], }, })
    (Œª A x hx b hb, by { dsimp, rw [‚Üê hb, assoc, s.f_r, comp_id], }),
  let f' := hi.lift (kernel_fork.of_Œπ S.f S.zero),
  have hf' : f' = ùüô _,
  { apply kernel_fork.is_limit.hom_ext hi,
    simp only [fork.is_limit.lift_Œπ, id_comp], },
  have hœÄ‚ÇÄ : f' ‚â´ (0 : _ ‚ü∂ 0) = 0 := comp_zero,
  have hœÄ := cokernel_cofork.is_colimit.of_œÄ 0 hœÄ‚ÇÄ
    (Œª A x hx, 0)
    (Œª A x hx, begin
      dsimp,
      rw [hf', id_comp] at hx,
      rw [hx, comp_zero],
    end)
    (Œª A x hx b hb, is_zero.eq_of_src (is_zero_zero _) _ _),
  exact ‚ü®S.X‚ÇÅ, 0, S.f, 0, S.zero, hi, hœÄ‚ÇÄ, hœÄ‚ü©,
end

@[simp]
def right_homology_data [has_zero_object C] (s : S.splitting) :
  right_homology_data S :=
begin
  have hp := cokernel_cofork.is_colimit.of_œÄ S.g S.zero (Œª A x hx, s.s ‚â´ x)
    (Œª A x hx, by { dsimp, conv_rhs { rw [‚Üê id_comp x, ‚Üê s.id, add_comp, assoc,
      hx, comp_zero, zero_add, assoc], }, })
  (Œª A x hx b hb, by { dsimp, rw [‚Üê hb, s.s_g_assoc], }),
  let g' := hp.desc (cokernel_cofork.of_œÄ S.g S.zero),
  have hg' : g' = ùüô _,
  { apply cokernel_cofork.is_colimit.hom_ext hp,
    simp only [cofork.is_colimit.œÄ_desc],
    erw comp_id, },
  have hŒπ‚ÇÄ : (0 : 0 ‚ü∂ _) ‚â´ g' = 0 := zero_comp,
  have hŒπ := kernel_fork.is_limit.of_Œπ 0 hŒπ‚ÇÄ
    (Œª A x hx, 0)
    (Œª A x hx, begin
      dsimp,
      rw [hg', comp_id] at hx,
      rw [hx, zero_comp],
    end)
    (Œª A x hx b hb, is_zero.eq_of_tgt (is_zero_zero _) _ _),
  exact ‚ü®S.X‚ÇÉ, 0, S.g, 0, S.zero, hp, hŒπ‚ÇÄ, hŒπ‚ü©,
end

@[simps]
def homology_data [has_zero_object C] (s : S.splitting) :
  homology_data S :=
{ left := s.left_homology_data,
  right := s.right_homology_data,
  iso := iso.refl 0,
  comm := by tidy, }

lemma exact [has_zero_object C] (s : S.splitting) : S.exact :=
‚ü®s.homology_data, is_zero_zero _‚ü©

end splitting

end preadditive

end short_complex
