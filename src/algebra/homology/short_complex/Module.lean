import algebra.category.Module.abelian
import algebra.category.Module.subobject
import algebra.homology.short_complex.homology
import algebra.homology.short_complex.preadditive
import algebra.homology.short_complex.abelian
import linear_algebra.quotient

noncomputable theory

open category_theory category_theory.category Module category_theory.limits

universes v u
variables {R : Type v} [ring R]

instance : category_with_homology (Module.{u} R) := infer_instance

lemma Module.is_zero_iff (M : Module R) : is_zero M ‚Üî ‚àÄ (x : M), x = 0 :=
begin
  rw is_zero.iff_id_eq_zero,
  split,
  { intros h x,
    change (ùüô M : M ‚Üí M) x = 0,
    simp only [h, linear_map.zero_apply], },
  { intro h,
    ext x,
    exact h x, },
end

namespace category_theory

namespace short_complex

variables (S : short_complex (Module R))

lemma Module_image_le_kernel : linear_map.range S.f ‚â§ linear_map.ker S.g :=
begin
  rintros x‚ÇÇ ‚ü®x‚ÇÅ, h‚ü©,
  simp only [linear_map.mem_ker, ‚Üê h, ‚Üê comp_apply, S.zero, linear_map.zero_apply],
end

def Module_f' : S.X‚ÇÅ ‚ü∂ of R (linear_map.ker S.g) :=
linear_map.cod_restrict (linear_map.ker S.g) S.f
  (Œª x, S.Module_image_le_kernel (by simp))

def Module_homology := of R ((linear_map.ker S.g) ‚ß∏ linear_map.range S.Module_f')

def Module_homology_œÄ' : of R (linear_map.ker S.g) ‚ü∂ S.Module_homology :=
(linear_map.range S.Module_f').mkq

@[simp, reassoc, elementwise]
lemma Module_f'_comp_homology_œÄ' : S.Module_f' ‚â´ S.Module_homology_œÄ' = 0 :=
begin
  ext,
  dsimp [Module_f', Module_homology_œÄ'],
  simp only [submodule.quotient.mk_eq_zero, linear_map.mem_range, exists_apply_eq_apply],
end

namespace Module_left_homology_data

def i : Module.of R (linear_map.ker S.g) ‚ü∂ S.X‚ÇÇ := Module.as_hom S.g.ker.subtype

lemma wi : i S ‚â´ S.g = 0 := by { ext x‚ÇÇ, exact x‚ÇÇ.2, }

def hi : is_limit (kernel_fork.of_Œπ (i S) (wi S)) := kernel_is_limit S.g

lemma f'_eq_Module_f' : (hi S).lift (kernel_fork.of_Œπ S.f S.zero) = S.Module_f' := rfl

lemma wœÄ : (hi S).lift (kernel_fork.of_Œπ S.f S.zero) ‚â´ S.Module_homology_œÄ' = 0 :=
by simp only [f'_eq_Module_f', Module_f'_comp_homology_œÄ']

def hœÄ : is_colimit (cokernel_cofork.of_œÄ _ (wœÄ S)) :=
is_colimit.of_iso_colimit (Module.cokernel_is_colimit S.Module_f')
  (cofork.ext (iso.refl _) (by tidy))

end Module_left_homology_data

@[simps]
def Module_left_homology_data : S.left_homology_data :=
{ K := Module.of R (linear_map.ker S.g),
  H := Module.of R S.Module_homology,
  i := Module_left_homology_data.i S,
  œÄ := S.Module_homology_œÄ',
  wi := Module_left_homology_data.wi S,
  hi := Module_left_homology_data.hi S,
  wœÄ := Module_left_homology_data.wœÄ S,
  hœÄ := Module_left_homology_data.hœÄ S, }

@[simp]
lemma Module_left_homology_data_f' :
  S.Module_left_homology_data.f' = S.Module_f' := rfl

def Module_homology_iso : S.homology ‚âÖ S.Module_homology :=
S.Module_left_homology_data.homology_iso

lemma Module_bijective_homology_iso_inv :
  function.bijective S.Module_homology_iso.inv :=
concrete_category.bijective_of_is_iso ((forget (Module R)).map S.Module_homology_iso.inv)

lemma Module_bijective_homology_iso_hom :
  function.bijective S.Module_homology_iso.hom :=
concrete_category.bijective_of_is_iso ((forget (Module R)).map S.Module_homology_iso.hom)

def Module_homology_œÄ : of R (linear_map.ker S.g) ‚ü∂ S.homology :=
S.Module_homology_œÄ' ‚â´ S.Module_homology_iso.inv

@[simp, reassoc, elementwise]
lemma Module_homology_œÄ'_comp_homology_iso_inv :
  S.Module_homology_œÄ' ‚â´ S.Module_homology_iso.inv = S.Module_homology_œÄ := rfl

@[simp, reassoc, elementwise]
lemma Module_f'_comp_homology_œÄ : S.Module_f' ‚â´ S.Module_homology_œÄ = 0 :=
begin
  ext,
  dsimp only [Module_homology_œÄ],
  rw [Module_f'_comp_homology_œÄ'_assoc, zero_comp],
end

lemma Module_surjective_homology_œÄ' : function.surjective S.Module_homology_œÄ' :=
(linear_map.range (Module_f' S)).mkq_surjective

lemma Module_surjective_homology_œÄ : function.surjective S.Module_homology_œÄ  :=
function.surjective.comp S.Module_bijective_homology_iso_inv.2
  S.Module_surjective_homology_œÄ'

lemma Module_ker_homology_œÄ'_eq_range_f' :
  linear_map.ker S.Module_homology_œÄ' = linear_map.range S.Module_f' :=
(linear_map.range S.Module_f').ker_mkq

lemma Module_homology_œÄ'_eq_zero_iff (z : linear_map.ker S.g) :
  S.Module_homology_œÄ' z = 0 ‚Üî z.1 ‚àà (linear_map.range S.f) :=
begin
  change z ‚àà linear_map.ker S.Module_homology_œÄ' ‚Üî _,
  rw Module_ker_homology_œÄ'_eq_range_f',
  split,
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    rw ‚Üê hx‚ÇÅ,
    exact ‚ü®x‚ÇÅ, rfl‚ü©, },
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    exact ‚ü®x‚ÇÅ, by { ext, exact hx‚ÇÅ, }‚ü©, },
end

lemma Module_ker_homology_œÄ_eq_ker_homology_œÄ' :
  linear_map.ker S.Module_homology_œÄ = linear_map.ker S.Module_homology_œÄ' :=
begin
  dsimp only [Module_homology_œÄ],
  ext x‚ÇÇ,
  split,
  { intro hx‚ÇÇ,
    apply S.Module_bijective_homology_iso_inv.1,
    simpa only [map_zero S.Module_homology_iso.inv] using hx‚ÇÇ, },
  { intro hx‚ÇÇ,
    simp only [linear_map.mem_ker] at hx‚ÇÇ ‚ä¢,
    rw [comp_apply, hx‚ÇÇ, map_zero S.Module_homology_iso.inv], },
end

lemma Module_homology_œÄ_eq_zero_iff (z : linear_map.ker S.g) :
  S.Module_homology_œÄ z = 0 ‚Üî z.1 ‚àà (linear_map.range S.f) :=
begin
  change z ‚àà linear_map.ker S.Module_homology_œÄ ‚Üî _,
  rw S.Module_ker_homology_œÄ_eq_ker_homology_œÄ',
  exact S.Module_homology_œÄ'_eq_zero_iff z,
end

lemma Module_homology_ext_iff (z z' : linear_map.ker S.g) :
  S.Module_homology_œÄ z = S.Module_homology_œÄ z' ‚Üî ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z.1 = z'.1 + S.f x‚ÇÅ :=
begin
  split,
  { intro h,
    have eq : S.Module_homology_œÄ (z - z') = 0,
    { simp only [map_sub, h, sub_self], },
    rw S.Module_homology_œÄ_eq_zero_iff at eq,
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := eq,
    use x‚ÇÅ,
    simp only [hx‚ÇÅ, subtype.val_eq_coe, add_subgroup_class.coe_sub, add_sub_cancel'_right], },
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    rw [show z = z' + S.Module_f' x‚ÇÅ, by { ext, exact hx‚ÇÅ, }],
    simp only [map_add, Module_f'_comp_homology_œÄ_apply, linear_map.zero_apply, add_zero], },
end

--@[ext]
lemma Module_homology_ext (z z' : linear_map.ker S.g)
  (h : ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z.1 = z'.1 + S.f x‚ÇÅ) :
    S.Module_homology_œÄ z = S.Module_homology_œÄ z' :=
by simp only [S.Module_homology_ext_iff, h]

variable (S)

lemma Module_element_homology_is_zero_iff' (z : S.Module_homology) :
  z = 0 ‚Üî ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z = S.Module_homology_œÄ' (S.Module_f' x‚ÇÅ) :=
begin
  split,
  { rintro rfl,
    exact ‚ü®0, by simp only [map_zero]‚ü©, },
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    simp only [hx‚ÇÅ],
    simp only [Module_homology_œÄ', submodule.mkq_apply, submodule.quotient.mk_eq_zero,
      linear_map.mem_range, exists_apply_eq_apply], },
end

lemma Module_element_homology_is_zero_iff (z : S.homology) :
  z = 0 ‚Üî ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z = S.Module_homology_œÄ (S.Module_f' x‚ÇÅ) :=
by simp only [Module_f'_comp_homology_œÄ_apply, linear_map.zero_apply, exists_const]

lemma Module_exact_iff : S.exact ‚Üî
  ‚àÄ (x‚ÇÇ : S.X‚ÇÇ) (hx‚ÇÇ : S.g x‚ÇÇ = 0), ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), S.f x‚ÇÅ = x‚ÇÇ :=
begin
  rw [S.Module_left_homology_data.exact_iff, Module.is_zero_iff],
  split,
  { intros h x‚ÇÇ hx‚ÇÇ,
    have eq : S.Module_homology_œÄ' ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü© = 0 := h _,
    rw Module_homology_œÄ'_eq_zero_iff at eq,
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := eq,
    exact ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, },
  { intros h Œ≥,
    obtain ‚ü®‚ü®x‚ÇÇ, hx‚ÇÇ‚ü©, rfl‚ü© := S.Module_surjective_homology_œÄ' Œ≥,
    obtain ‚ü®x‚ÇÅ, rfl‚ü© := h x‚ÇÇ hx‚ÇÇ,
    simp only [S.Module_homology_œÄ'_eq_zero_iff, linear_map.mem_range, exists_apply_eq_apply], },
end

variables {S}

lemma Module_map_from_homology_ext {A : Module R} (f f' : S.homology ‚ü∂ A)
  (eq : ‚àÄ (x‚ÇÇ : linear_map.ker S.g), f (S.Module_homology_œÄ x‚ÇÇ) = f' (S.Module_homology_œÄ x‚ÇÇ)) :
  f = f' :=
begin
  ext,
  obtain ‚ü®x‚ÇÇ, rfl‚ü© := S.Module_surjective_homology_œÄ x,
  exact eq x‚ÇÇ,
end

variables {S‚ÇÅ S‚ÇÇ : short_complex (Module.{u} R)} (œÜ œÜ' : S‚ÇÅ ‚ü∂ S‚ÇÇ)

@[simps]
def Module_map_ker : of R (linear_map.ker S‚ÇÅ.g) ‚ü∂ of R (linear_map.ker S‚ÇÇ.g) :=
linear_map.cod_restrict (linear_map.ker S‚ÇÇ.g) (œÜ.œÑ‚ÇÇ.comp (linear_map.ker S‚ÇÅ.g).subtype)
  (begin
    rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    dsimp,
    rw linear_map.mem_ker at hx‚ÇÅ,
    rw [linear_map.mem_ker, ‚Üê comp_apply, œÜ.comm‚ÇÇ‚ÇÉ, comp_apply, hx‚ÇÅ, map_zero œÜ.œÑ‚ÇÉ],
  end)

@[simps]
def Module_map_homology : S‚ÇÅ.Module_homology ‚ü∂ S‚ÇÇ.Module_homology :=
submodule.liftq _ (Module_map_ker œÜ ‚â´ S‚ÇÇ.Module_homology_œÄ')
begin
  rintros _ ‚ü®x‚ÇÅ, rfl‚ü©,
  simp only [linear_map.mem_ker, Module.coe_comp, function.comp_app,
    Module_homology_œÄ'_eq_zero_iff],
  refine ‚ü®œÜ.œÑ‚ÇÅ x‚ÇÅ, _‚ü©,
  dsimp [Module_f'],
  simp only [‚Üê comp_apply, œÜ.comm‚ÇÅ‚ÇÇ],
end

@[simps]
def Module_left_homology_map_data : left_homology_map_data œÜ S‚ÇÅ.Module_left_homology_data
  S‚ÇÇ.Module_left_homology_data :=
{ œÜK := Module_map_ker œÜ,
  œÜH := Module_map_homology œÜ,
  commi' := rfl,
  commf'' := begin
    simp only [Module_left_homology_data_f'],
    ext x‚ÇÅ,
    dsimp [Module_f'],
    simp only [‚Üê comp_apply, œÜ.comm‚ÇÅ‚ÇÇ],
  end,
  commœÄ' := by { ext x‚ÇÅ, rcases x‚ÇÅ with ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, refl, }, }

@[simp, reassoc, elementwise]
lemma Module_homology_œÄ_comp_homology_map :
  S‚ÇÅ.Module_homology_œÄ ‚â´ homology_map œÜ = Module_map_ker œÜ ‚â´ S‚ÇÇ.Module_homology_œÄ :=
begin
  dsimp only [Module_homology_œÄ],
  rw (Module_left_homology_map_data œÜ).homology_map_eq,
  have eq := (Module_left_homology_map_data œÜ).commœÄ,
  dsimp only [Module_left_homology_map_data, Module_left_homology_data_œÄ,
    Module_homology_iso] at ‚ä¢ eq,
  simp only [‚Üê reassoc_of eq, assoc, iso.inv_hom_id_assoc],
end

example (h : homotopy œÜ œÜ') : homology_map œÜ = homology_map œÜ' :=
begin
  apply Module_map_from_homology_ext,
  rintro ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü©,
  simp only [linear_map.mem_ker] at hx‚ÇÇ,
  simp only [Module_homology_œÄ_comp_homology_map_apply],
  apply Module_homology_ext,
  refine ‚ü®h.h‚ÇÅ x‚ÇÇ, _‚ü©,
  dsimp,
  simp only [h.comm‚ÇÇ, linear_map.add_apply, Module.coe_comp,
    function.comp_app, hx‚ÇÇ, h.h‚ÇÇ.map_zero],
  abel,
end

end short_complex

end category_theory
