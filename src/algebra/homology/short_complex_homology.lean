import algebra.homology.short_complex_right_homology

noncomputable theory

open category_theory category_theory.limits category_theory.category

variables {C : Type*} [category C] [has_zero_morphisms C]

namespace short_complex

variables (S S‚ÇÅ S‚ÇÇ S‚ÇÉ : short_complex C)

structure homology_data :=
(left : S.left_homology_data)
(right : S.right_homology_data)
(iso : left.H ‚âÖ right.H)
(comm : left.œÄ ‚â´ iso.hom ‚â´ right.Œπ = left.i ‚â´ right.p)

attribute [reassoc, simp] homology_data.comm

variables {S‚ÇÅ S‚ÇÇ S‚ÇÉ} (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.homology_data) (h‚ÇÇ : S‚ÇÇ.homology_data)

structure homology_map_data :=
(left : left_homology_map_data œÜ h‚ÇÅ.left h‚ÇÇ.left)
(right : right_homology_map_data œÜ h‚ÇÅ.right h‚ÇÇ.right)
(comm : left.œÜH ‚â´ h‚ÇÇ.iso.hom = h‚ÇÅ.iso.hom ‚â´ right.œÜH)

namespace homology_map_data

attribute [reassoc] comm

instance : subsingleton (homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :=
‚ü®begin
  rintro ‚ü®left‚ÇÅ, right‚ÇÅ, comm‚ÇÅ‚ü© ‚ü®left‚ÇÇ, right‚ÇÇ, comm‚ÇÇ‚ü©,
  simp only [eq_iff_true_of_subsingleton, and_self],
end‚ü©

instance : inhabited (homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :=
begin
  let left : left_homology_map_data œÜ h‚ÇÅ.left h‚ÇÇ.left := default,
  let right : right_homology_map_data œÜ h‚ÇÅ.right h‚ÇÇ.right := default,
  refine ‚ü®‚ü®left, right, _‚ü©‚ü©,
  simp only [‚Üê cancel_mono h‚ÇÇ.right.Œπ, ‚Üê cancel_epi h‚ÇÅ.left.œÄ,
    assoc, left.commœÄ_assoc, h‚ÇÇ.comm, ‚Üê right.commŒπ],
  slice_rhs 1 3 { rw h‚ÇÅ.comm, },
  simp only [assoc, ‚Üê left.commi_assoc, ‚Üê right.commp],
end

instance : unique (homology_map_data œÜ h‚ÇÅ h‚ÇÇ) := unique.mk' _

def some : homology_map_data œÜ h‚ÇÅ h‚ÇÇ := default

variables {œÜ h‚ÇÅ h‚ÇÇ}

lemma congr_left_œÜH {Œ≥‚ÇÅ Œ≥‚ÇÇ : homology_map_data œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) :
  Œ≥‚ÇÅ.left.œÜH = Œ≥‚ÇÇ.left.œÜH := by rw eq

end homology_map_data

namespace homology_data

@[simps]
def of_colimit_cokernel_cofork (hg : S.g = 0) (c : cokernel_cofork S.f) (hc : is_colimit c) :
  S.homology_data :=
{ left := left_homology_data.of_colimit_cokernel_cofork S hg c hc,
  right := right_homology_data.of_colimit_cokernel_cofork S hg c hc,
  iso := iso.refl _,
  comm := by tidy, }

@[simps]
def of_has_cokernel [has_cokernel S.f] (hg : S.g = 0) : S.homology_data :=
{ left := left_homology_data.of_has_cokernel S hg,
  right := right_homology_data.of_has_cokernel S hg,
  iso := iso.refl _,
  comm := by tidy, }

@[simps]
def of_limit_kernel_fork (hf : S.f = 0) (c : kernel_fork S.g) (hc : is_limit c) :
  S.homology_data :=
{ left := left_homology_data.of_limit_kernel_fork S hf c hc,
  right := right_homology_data.of_limit_kernel_fork S hf c hc,
  iso := iso.refl _,
  comm := by tidy, }

@[simp]
def of_has_kernel [has_kernel S.g] (hf : S.f = 0) : S.homology_data :=
of_limit_kernel_fork S hf _ (kernel_is_kernel _)

@[simps]
def of_zeros (hf : S.f = 0) (hg : S.g = 0) : S.homology_data :=
{ left := left_homology_data.of_zeros S hf hg,
  right := right_homology_data.of_zeros S hf hg,
  iso := iso.refl _,
  comm := by tidy, }

variable {S}

@[simps]
def op (h : S.homology_data) : S.op.homology_data :=
{ left := h.right.op,
  right := h.left.op,
  iso := h.iso.op,
  comm := quiver.hom.unop_inj (by simp), }

@[simps]
def unop' {S : short_complex C·µí·µñ} (h : S.homology_data) : S.unop.homology_data :=
{ left := h.right.unop',
  right := h.left.unop',
  iso := h.iso.unop,
  comm := quiver.hom.op_inj (by simp), }

@[simps]
def unop {S : short_complex C} (h : S.op.homology_data) : S.homology_data :=
{ left := h.right.unop,
  right := h.left.unop,
  iso := h.iso.unop,
  comm := quiver.hom.op_inj (by simp), }

end homology_data

class has_homology : Prop :=
(cond : nonempty S.homology_data)

def some_homology_data [has_homology S] :
  S.homology_data := has_homology.cond.some

variable {S}

lemma has_homology.mk' (h : S.homology_data) : has_homology S :=
‚ü®nonempty.intro h‚ü©

instance [has_homology S] : has_homology S.op :=
has_homology.mk' S.some_homology_data.op

@[priority 100]
instance has_left_homology_of_has_homology [has_homology S] : has_left_homology S :=
has_left_homology.mk' S.some_homology_data.left

@[priority 100]
instance has_right_homology_of_has_homology [has_homology S] : has_right_homology S :=
has_right_homology.mk' S.some_homology_data.right

instance has_homology_of_has_cokernel {X Y : C} (f : X ‚ü∂ Y) (Z : C)
  [has_cokernel f] :
  (short_complex.mk f (0 : Y ‚ü∂ Z) comp_zero).has_homology :=
has_homology.mk' (homology_data.of_has_cokernel _ rfl)

instance has_homology_of_has_kernel {Y Z : C} (g : Y ‚ü∂ Z) (X : C)
  [has_kernel g] :
  (short_complex.mk (0 : X ‚ü∂ Y) g zero_comp).has_homology :=
has_homology.mk' (homology_data.of_has_kernel _ rfl)

instance has_homology_of_zeros (X Y Z : C) :
  (short_complex.mk (0 : X ‚ü∂ Y) (0 : Y ‚ü∂ Z) zero_comp).has_homology :=
has_homology.mk' (homology_data.of_zeros _ rfl rfl)

namespace homology_map_data

@[simps]
def id (h : S.homology_data) :
  homology_map_data (ùüô S) h h :=
{ left := left_homology_map_data.id h.left,
  right := right_homology_map_data.id h.right,
  comm := by tidy, }

@[simps]
def comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ} {h‚ÇÅ : S‚ÇÅ.homology_data}
  {h‚ÇÇ : S‚ÇÇ.homology_data} {h‚ÇÉ : S‚ÇÉ.homology_data}
  (œà : homology_map_data œÜ h‚ÇÅ h‚ÇÇ) (œà' : homology_map_data œÜ' h‚ÇÇ h‚ÇÉ) :
  homology_map_data (œÜ ‚â´ œÜ') h‚ÇÅ h‚ÇÉ :=
{ left := œà.left.comp œà'.left,
  right := œà.right.comp œà'.right,
  comm := by simp only [left_homology_map_data.comp_œÜH, assoc, right_homology_map_data.comp_œÜH,
      œà'.comm, œà.comm_assoc], }

@[simps]
def op {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.homology_data} {h‚ÇÇ : S‚ÇÇ.homology_data}
  (œà : homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  homology_map_data (op_map œÜ) h‚ÇÇ.op h‚ÇÅ.op :=
{ left := œà.right.op,
  right := œà.left.op,
  comm := quiver.hom.unop_inj (œà.comm.symm), }

@[simps]
def unop {S‚ÇÅ S‚ÇÇ : short_complex C} {œÜ : S‚ÇÅ.op ‚ü∂ S‚ÇÇ.op}
  {h‚ÇÅ : S‚ÇÅ.op.homology_data} {h‚ÇÇ : S‚ÇÇ.op.homology_data}
  (œà : homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  homology_map_data (unop_map œÜ) h‚ÇÇ.unop h‚ÇÅ.unop :=
{ left := œà.right.unop,
  right := œà.left.unop,
  comm := quiver.hom.op_inj œà.comm.symm, }

@[simps]
def unop' {S‚ÇÅ S‚ÇÇ : short_complex C·µí·µñ} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.homology_data} {h‚ÇÇ : S‚ÇÇ.homology_data}
  (œà : homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  homology_map_data (unop'_map œÜ) h‚ÇÇ.unop' h‚ÇÅ.unop' :=
{ left := œà.right.unop',
  right := œà.left.unop',
  comm := quiver.hom.op_inj (œà.comm.symm), }

end homology_map_data

variable (S)

def homology [has_homology S] : C := S.some_homology_data.left.H

def homology_map' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.homology_data) (h‚ÇÇ : S‚ÇÇ.homology_data) :
  h‚ÇÅ.left.H ‚ü∂ h‚ÇÇ.left.H := left_homology_map' œÜ _ _

def homology_map [has_homology S‚ÇÅ] [has_homology S‚ÇÇ]
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) : S‚ÇÅ.homology ‚ü∂ S‚ÇÇ.homology :=
homology_map' œÜ _ _

variable {S}
lemma homology_map'_id (h : S.homology_data) :
  homology_map' (ùüô S) h h = ùüô _ :=
homology_map_data.congr_left_œÜH (subsingleton.elim default (homology_map_data.id h))

@[simp]
lemma homology_map_id [has_homology S] :
  homology_map (ùüô S) = ùüô _ :=
homology_map'_id _

lemma homology_map'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
  (h‚ÇÅ : S‚ÇÅ.homology_data) (h‚ÇÇ : S‚ÇÇ.homology_data) (h‚ÇÉ : S‚ÇÉ.homology_data) :
  homology_map' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = homology_map' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´
    homology_map' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ :=
homology_map_data.congr_left_œÜH
  (subsingleton.elim default ((homology_map_data.some œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ).comp
    (homology_map_data.some œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ)))

@[simp]
lemma homology_map_comp [has_homology S‚ÇÅ] [has_homology S‚ÇÇ] [has_homology S‚ÇÉ]
  (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  homology_map (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = homology_map œÜ‚ÇÅ ‚â´ homology_map œÜ‚ÇÇ :=
homology_map'_comp _ _ _ _ _

@[simps]
def homology_map_iso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.homology_data)
  (h‚ÇÇ : S‚ÇÇ.homology_data) : h‚ÇÅ.left.H ‚âÖ h‚ÇÇ.left.H :=
{ hom := homology_map' e.hom h‚ÇÅ h‚ÇÇ,
  inv := homology_map' e.inv h‚ÇÇ h‚ÇÅ,
  hom_inv_id' := by rw [‚Üê homology_map'_comp, e.hom_inv_id, homology_map'_id],
  inv_hom_id' := by rw [‚Üê homology_map'_comp, e.inv_hom_id, homology_map'_id], }

instance is_iso_homology_map'_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ]
  (h‚ÇÅ : S‚ÇÅ.homology_data) (h‚ÇÇ : S‚ÇÇ.homology_data) :
  is_iso (homology_map' œÜ h‚ÇÅ h‚ÇÇ) :=
by { change is_iso (homology_map_iso' (as_iso œÜ) h‚ÇÅ h‚ÇÇ).hom, apply_instance, }

@[simps]
def homology_map_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.has_homology]
  [S‚ÇÇ.has_homology] : S‚ÇÅ.homology ‚âÖ S‚ÇÇ.homology :=
{ hom := homology_map e.hom,
  inv := homology_map e.inv,
  hom_inv_id' := by rw [‚Üê homology_map_comp, e.hom_inv_id, homology_map_id],
  inv_hom_id' := by rw [‚Üê homology_map_comp, e.inv_hom_id, homology_map_id], }

instance is_iso_homology_map_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ] [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  is_iso (homology_map œÜ) :=
by { change is_iso (homology_map_iso (as_iso œÜ)).hom, apply_instance, }

def homology_data.homology_iso (h‚ÇÅ : S.homology_data) [S.has_homology] :
  S.homology ‚âÖ h‚ÇÅ.left.H := homology_map_iso' (iso.refl _) _ _

namespace homology_map_data

variables {œÜ h‚ÇÅ h‚ÇÇ} (Œ≥ : homology_map_data œÜ h‚ÇÅ h‚ÇÇ)

lemma homology_map'_eq : homology_map' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.left.œÜH := Œ≥.left.left_homology_map'_eq

lemma homology_map_eq [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  homology_map œÜ = h‚ÇÅ.homology_iso.hom ‚â´ Œ≥.left.œÜH ‚â´ h‚ÇÇ.homology_iso.inv :=
begin
  dsimp [homology_data.homology_iso, homology_map_iso'],
  rw [‚Üê Œ≥.homology_map'_eq, ‚Üê homology_map'_comp, ‚Üê homology_map'_comp, comp_id, id_comp],
  refl,
end

lemma map_comm [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  homology_map œÜ ‚â´ h‚ÇÇ.homology_iso.hom = h‚ÇÅ.homology_iso.hom ‚â´ Œ≥.left.œÜH :=
by simp only [Œ≥.homology_map_eq, assoc, iso.inv_hom_id, comp_id]

end homology_map_data

namespace left_homology_data

def homology_iso (h : S.left_homology_data) [S.has_homology] :
  S.homology ‚âÖ h.H :=
left_homology_map_iso' (iso.refl S) _ _

end left_homology_data

variables {C}

def left_right_homology_comparison' (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
  h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H :=
h‚ÇÇ.lift_H (h‚ÇÅ.desc_H (h‚ÇÅ.i ‚â´ h‚ÇÇ.p) (by simp)) (by simp [‚Üê cancel_epi h‚ÇÅ.œÄ])

lemma left_right_homology_comparison'_eq‚ÇÅ (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
left_right_homology_comparison' h‚ÇÅ h‚ÇÇ =
  h‚ÇÇ.lift_H (h‚ÇÅ.desc_H (h‚ÇÅ.i ‚â´ h‚ÇÇ.p) (by simp)) (by simp [‚Üê cancel_epi h‚ÇÅ.œÄ]) := rfl

@[simp, reassoc]
lemma comp_left_right_homology_comparison'_comp (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
  h‚ÇÅ.œÄ ‚â´ left_right_homology_comparison' h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.i ‚â´ h‚ÇÇ.p :=
by simp [left_right_homology_comparison'_eq‚ÇÅ]

lemma left_right_homology_comparison'_eq‚ÇÇ (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
left_right_homology_comparison' h‚ÇÅ h‚ÇÇ =
  h‚ÇÅ.desc_H (h‚ÇÇ.lift_H (h‚ÇÅ.i ‚â´ h‚ÇÇ.p) (by simp)) (by simp [‚Üê cancel_mono h‚ÇÇ.Œπ]) :=
by simp [‚Üê cancel_mono h‚ÇÇ.Œπ, ‚Üê cancel_epi h‚ÇÅ.œÄ]

variable (S)

def left_right_homology_comparison [S.has_left_homology] [S.has_right_homology] :
  S.left_homology ‚ü∂ S.right_homology :=
left_right_homology_comparison' _ _

@[reassoc]
lemma left_right_homology_comparison'_naturality (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.left_homology_data)
  (h‚ÇÇ : S‚ÇÅ.right_homology_data) (h‚ÇÅ' : S‚ÇÇ.left_homology_data) (h‚ÇÇ' : S‚ÇÇ.right_homology_data) :
  left_homology_map' œÜ h‚ÇÅ h‚ÇÅ' ‚â´ left_right_homology_comparison' h‚ÇÅ' h‚ÇÇ' =
    left_right_homology_comparison' h‚ÇÅ h‚ÇÇ ‚â´ right_homology_map' œÜ h‚ÇÇ h‚ÇÇ' :=
by simp only [‚Üê cancel_epi h‚ÇÅ.œÄ, ‚Üê cancel_mono h‚ÇÇ'.Œπ, assoc,
    ‚Üê left_homology_œÄ_naturality'_assoc, right_homology_Œπ_naturality',
    comp_left_right_homology_comparison'_comp,
    comp_left_right_homology_comparison'_comp_assoc,
    cycles_map'_i_assoc, p_cycles_co_map']

variable {S}

lemma left_right_homology_comparison'_compatibility (h‚ÇÅ h‚ÇÅ' : S.left_homology_data) (h‚ÇÇ h‚ÇÇ' : S.right_homology_data) :
  left_right_homology_comparison' h‚ÇÅ h‚ÇÇ = left_homology_map' (ùüô S) h‚ÇÅ h‚ÇÅ' ‚â´
    left_right_homology_comparison' h‚ÇÅ' h‚ÇÇ' ‚â´ right_homology_map' (ùüô S) _ _ :=
by rw [left_right_homology_comparison'_naturality_assoc (ùüô S) h‚ÇÅ h‚ÇÇ h‚ÇÅ' h‚ÇÇ',
    ‚Üê right_homology_map'_comp, comp_id, right_homology_map'_id, comp_id]

lemma left_right_homology_comparison_eq [S.has_left_homology] [S.has_right_homology]
  (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
  S.left_right_homology_comparison = h‚ÇÅ.left_homology_iso.hom ‚â´ left_right_homology_comparison' h‚ÇÅ h‚ÇÇ ‚â´
    h‚ÇÇ.right_homology_iso.inv :=
left_right_homology_comparison'_compatibility _ _ _ _

@[simp]
lemma left_right_homology_comparison'_eq_iso_hom (h : homology_data S) :
  left_right_homology_comparison' h.left h.right = h.iso.hom :=
by simp only [‚Üêcancel_epi h.left.œÄ, ‚Üêcancel_mono h.right.Œπ,
    comp_left_right_homology_comparison'_comp, homology_data.comm]

instance is_iso_left_right_homology_comparison'_of_homology_data (h : homology_data S) :
  is_iso (left_right_homology_comparison' h.left h.right) :=
by { rw left_right_homology_comparison'_eq_iso_hom, apply_instance, }

instance is_iso_left_right_homology_comparison' [S.has_homology]
  (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
  is_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ) :=
begin
  rw left_right_homology_comparison'_compatibility h‚ÇÅ S.some_homology_data.left h‚ÇÇ
    S.some_homology_data.right,
  apply_instance,
end

instance is_iso_left_right_homology_comparison [S.has_homology] :
  is_iso S.left_right_homology_comparison :=
by { change is_iso (left_right_homology_comparison' _ _), apply_instance, }

namespace right_homology_data

def homology_iso (h : S.right_homology_data) [S.has_homology] :
  S.homology ‚âÖ h.H :=
as_iso (left_right_homology_comparison' S.some_homology_data.left h)

end right_homology_data

namespace homology_data

@[simps]
def of_is_iso_left_right_homology_comparison'
  (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data)
  [is_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ)] :
  S.homology_data :=
{ left := h‚ÇÅ,
  right := h‚ÇÇ,
  iso := as_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ),
  comm := by simp only [as_iso_hom, comp_left_right_homology_comparison'_comp], }

lemma has_homology_of_is_iso_left_right_homology_comparison'
  (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data)
  [is_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ)] :
  S.has_homology :=
has_homology.mk' (of_is_iso_left_right_homology_comparison' h‚ÇÅ h‚ÇÇ)

lemma has_homology_of_is_iso_left_right_homology_comparison [S.has_left_homology]
  [S.has_right_homology] [h : is_iso S.left_right_homology_comparison] :
  S.has_homology :=
begin
  haveI : is_iso (left_right_homology_comparison' S.some_left_homology_data
    S.some_right_homology_data) := h,
  exact has_homology_of_is_iso_left_right_homology_comparison' S.some_left_homology_data
    S.some_right_homology_data,
end

end homology_data

variable (S)

def left_homology_iso_homology [S.has_homology] :
  S.left_homology ‚âÖ S.homology :=
S.some_left_homology_data.homology_iso.symm

def homology_iso_right_homology [S.has_homology] :
  S.homology ‚âÖ S.right_homology :=
S.some_right_homology_data.homology_iso

variable {S}

lemma left_homology_map'_comp_iso_hom_comp_right_homology_map'
  (h : S.homology_data) (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
  left_homology_map' (ùüô S) h‚ÇÅ h.left ‚â´ h.iso.hom ‚â´ right_homology_map' (ùüô S) h.right h‚ÇÇ =
    left_right_homology_comparison' h‚ÇÅ h‚ÇÇ :=
by simpa using (left_right_homology_comparison'_compatibility h‚ÇÅ h.left h‚ÇÇ h.right).symm

variable (S)

lemma left_right_homology_comparison_fac [S.has_homology] :
  S.left_right_homology_comparison =
    S.left_homology_iso_homology.hom ‚â´ S.homology_iso_right_homology.hom :=
begin
  have eq : S.some_homology_data.iso.hom ‚â´ right_homology_map' (ùüô S) _ _ =
    S.homology_iso_right_homology.hom := by simpa only [left_homology_map'_id, id_comp]
    using left_homology_map'_comp_iso_hom_comp_right_homology_map' S.some_homology_data
      S.some_homology_data.left S.some_right_homology_data,
  simpa only [eq.symm] using (left_homology_map'_comp_iso_hom_comp_right_homology_map' _ _ _).symm,
end

variable (C)
/-- We shall say that a category with homology is a category for which
all short complexes have homology. -/
abbreviation _root_.category_with_homology := ‚àÄ (S : short_complex C), S.has_homology

/-- Assuming that all short complexes have homology, this is the homology functor. -/
@[simps]
def homology_functor [category_with_homology C] :
  short_complex C ‚•§ C :=
{ obj := Œª S, S.homology,
  map := Œª S‚ÇÅ S‚ÇÇ, homology_map, }

instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology]
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
  is_iso (homology_map œÜ) :=
by { dsimp only [homology_map, homology_map'], apply_instance, }

end short_complex


/-
@[simp]
lemma category_theory.limits.kernel_is_kernel_lift‚ÇÄ {X Y A : C} (f : X ‚ü∂ Y) (k : A ‚ü∂ X)
  (w : k ‚â´ f = 0) [has_kernel f] :
  (kernel_is_kernel f).lift (kernel_fork.of_Œπ k w) = kernel.lift‚ÇÄ f k w :=
  rfl

@[simp]
lemma category_theory.limits.cokernel_is_cokernel_desc‚ÇÄ {X Y A : C} (f : X ‚ü∂ Y) (k : Y ‚ü∂ A)
  (w : f ‚â´ k = 0) [has_cokernel f] :
  (cokernel_is_cokernel f).desc (cokernel_cofork.of_œÄ k w) = cokernel.desc‚ÇÄ f k w := rfl

open category_theory.limits

namespace short_complex

variable (S : short_complex C)

section instances

variable [S.has_homology]

instance : has_kernel S.g :=
‚ü®nonempty.intro ‚ü®_, S.some_homology_full_data.hi‚ü©‚ü©

instance : has_cokernel S.f :=
‚ü®nonempty.intro ‚ü®_, S.some_homology_full_data.hp‚ü©‚ü©

instance : has_cokernel (kernel.lift‚ÇÄ S.g S.f S.zero) :=
begin
  let h := S.some_homology_full_data,
  let f' := kernel.lift‚ÇÄ S.g S.f S.zero,
  let e‚ÇÅ := is_limit.cone_point_unique_up_to_iso (kernel_is_kernel _) h.hi,
  have hœÄ‚ÇÄ' : f' ‚â´ e‚ÇÅ.hom ‚â´ h.œÄ = 0,
  { dsimp [e‚ÇÅ, is_limit.cone_point_unique_up_to_iso],
    rw ‚Üê assoc,
    convert h.hœÄ‚ÇÄ,
    rw [‚Üê cancel_mono h.i, assoc],
    erw h.hi.fac (kernel_fork.of_Œπ (kernel.Œπ S.g) (kernel.condition _))
      walking_parallel_pair.zero,
    dsimp [f'],
    rw kernel.lift‚ÇÄ_Œπ,
    symmetry,
    exact h.hi.fac _ walking_parallel_pair.zero, },
  refine ‚ü®nonempty.intro ‚ü®cokernel_cofork.of_œÄ _ hœÄ‚ÇÄ', _‚ü©‚ü©,
  let e‚ÇÇ : parallel_pair h.f' 0 ‚âÖ parallel_pair f' 0,
  { refine parallel_pair.ext (iso.refl _) e‚ÇÅ.symm _ (by simp),
    dsimp [e‚ÇÅ, is_limit.cone_point_unique_up_to_iso],
    simp only [kernel_is_kernel_lift‚ÇÄ, id_comp, ‚Üê cancel_mono (kernel.Œπ S.g),
      assoc, kernel.lift‚ÇÄ_Œπ, h.f'_i], },
  equiv_rw (is_colimit.precompose_hom_equiv e‚ÇÇ _).symm,
  refine is_colimit.of_iso_colimit h.hœÄ (cofork.ext (iso.refl _) _),
  change h.œÄ ‚â´ ùüô _ = e‚ÇÅ.inv ‚â´ e‚ÇÅ.hom ‚â´ h.œÄ,
  rw [comp_id, e‚ÇÅ.inv_hom_id_assoc],
end

instance : has_kernel (cokernel.desc‚ÇÄ S.f S.g S.zero) :=
begin
  let h := S.some_homology_full_data,
  let g' := cokernel.desc‚ÇÄ S.f S.g S.zero,
  let e‚ÇÅ := is_colimit.cocone_point_unique_up_to_iso (cokernel_is_cokernel _) h.hp,
  have hŒπ‚ÇÄ' : (h.Œπ ‚â´ e‚ÇÅ.inv) ‚â´ g' = 0,
  { dsimp [e‚ÇÅ, is_colimit.cocone_point_unique_up_to_iso],
    rw assoc,
    convert h.hŒπ‚ÇÄ,
    rw [‚Üê cancel_epi h.p, ‚Üê assoc],
    erw h.hp.fac (cokernel_cofork.of_œÄ (cokernel.œÄ S.f) (cokernel.condition _))
      walking_parallel_pair.one,
    dsimp [g'],
    rw cokernel.œÄ_desc‚ÇÄ,
    symmetry,
    exact h.hp.fac _ walking_parallel_pair.one, },
  refine ‚ü®nonempty.intro ‚ü®kernel_fork.of_Œπ _ hŒπ‚ÇÄ', _‚ü©‚ü©,
  let e‚ÇÇ : parallel_pair h.g' 0 ‚âÖ parallel_pair g' 0,
  { refine parallel_pair.ext e‚ÇÅ.symm (iso.refl _) _ (by simp),
    dsimp [e‚ÇÅ, is_colimit.cocone_point_unique_up_to_iso],
    rw [comp_id, ‚Üê cancel_epi h.p, h.p_g'],
    erw h.hp.fac_assoc _ walking_parallel_pair.one,
    simp only [cofork.of_œÄ_Œπ_app, cokernel.œÄ_desc‚ÇÄ], },
  equiv_rw (is_limit.postcompose_hom_equiv e‚ÇÇ.symm _).symm,
  refine is_limit.of_iso_limit h.hŒπ (fork.ext (iso.refl _) _),
  change ùüô _ ‚â´ ((h.Œπ ‚â´ e‚ÇÅ.inv) ‚â´ e‚ÇÅ.hom) = h.Œπ,
  simp only [assoc, iso.inv_hom_id, comp_id, id_comp],
end

end instances

variable [has_homology S]

def homology_lift {A : C} (f : A ‚ü∂ S.X‚ÇÇ) (hf : f ‚â´ S.g = 0) :
  A ‚ü∂ S.homology :=
S.some_homology_full_data.hi.lift (kernel_fork.of_Œπ f hf) ‚â´ S.some_homology_full_data.œÄ

def homology_lift' (c : kernel_fork S.g) : c.X ‚ü∂ S.homology :=
S.homology_lift c.Œπ (kernel_fork.condition _)

def homology_iso_cokernel_lift' (c : kernel_fork S.g) (hc : is_limit c)
  (c' : cokernel_cofork (hc.lift (kernel_fork.of_Œπ S.f S.zero))) (hc' : is_colimit c') :
  S.homology ‚âÖ c'.X :=
{ hom := sorry,
  inv := begin
    have pif := S.homology_lift' c,
    have pif := hc'.desc (cokernel_cofork.of_œÄ c'.œÄ sorry),
    sorry,
  end,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }
#exit

def homology_iso_cokernel_lift :
  S.homology ‚âÖ cokernel (kernel.lift‚ÇÄ S.g S.f S.zero) :=
begin
  let e := S.homology_iso_cokernel_lift' _ (kernel_is_kernel S.g) _ (cokernel_is_cokernel _),
  exact e,
end

#exit

/-- The cokernel of `kernel.lift g f w`. This is isomorphic to `homology f g w`.
  See `homology_iso_cokernel_lift`. -/
abbreviation homology_c [has_homology S] : C :=
cokernel (kernel.lift S.g S.f S.zero)

/-- The kernel of `cokernel.desc f g w`. This is isomorphic to `homology f g w`.
  See `homology_iso_kernel_desc`. -/
abbreviation homology_k [has_homology S]: C :=
kernel (cokernel.desc S.f S.g S.zero)

/-- The canonical map from `homology_c` to `homology_k`.
  This is an isomorphism, and it is used in obtaining the API for `homology f g w`
  in the bottom of this file. -/
abbreviation homology_c_to_k [has_homology S] : S.homology_c ‚ü∂ S.homology_k :=
cokernel.desc _ (kernel.lift _ (kernel.Œπ _ ‚â´ cokernel.œÄ _) (by simp)) begin
  apply limits.equalizer.hom_ext,
  simp,
end

instance : is_iso (S.homology_c_to_k) :=
begin
  sorry,
end
#exit


end short_complex

-/
