import algebra.homology.short_complex_left_homology

noncomputable theory

open category_theory category_theory.category

namespace category_theory

namespace limits

variables {C : Type*} [category C] [has_zero_morphisms C]

namespace kernel_fork

@[simp]
lemma is_limit.lift_Œπ {X Y : C} {f : X ‚ü∂ Y} {c : kernel_fork f} (hc : is_limit c)
  (c' : kernel_fork f) : hc.lift c' ‚â´ c.Œπ = c'.Œπ :=
by apply fork.is_limit.lift_Œπ

@[simps]
def is_limit.of_Œπ_op {K X Y : C} (i : K ‚ü∂ X) {f : X ‚ü∂ Y}
  (w : i ‚â´ f = 0) (h : is_limit (kernel_fork.of_Œπ i w)) :
  is_colimit (cokernel_cofork.of_œÄ i.op
    (show f.op ‚â´ i.op = 0, by simpa only [‚Üê op_comp, w])) :=
cokernel_cofork.is_colimit.of_œÄ _ _
  (Œª A x hx, (h.lift (kernel_fork.of_Œπ x.unop (quiver.hom.op_inj hx))).op)
  (Œª A x hx, quiver.hom.unop_inj (is_limit.lift_Œπ h _))
  (Œª A x hx b hb, quiver.hom.unop_inj (fork.is_limit.hom_ext h begin
    simp only [quiver.hom.unop_op, is_limit.lift_Œπ],
    exact quiver.hom.op_inj hb,
  end))

@[simps]
def is_limit.of_Œπ_unop {K X Y : C·µí·µñ} (i : K ‚ü∂ X) {f : X ‚ü∂ Y}
  (w : i ‚â´ f = 0) (h : is_limit (kernel_fork.of_Œπ i w)) :
  is_colimit (cokernel_cofork.of_œÄ i.unop
    (show f.unop ‚â´ i.unop = 0, by simpa only [‚Üê unop_comp, w])) :=
cokernel_cofork.is_colimit.of_œÄ _ _
  (Œª A x hx, (h.lift (kernel_fork.of_Œπ x.op (quiver.hom.unop_inj hx))).unop)
  (Œª A x hx, quiver.hom.op_inj (is_limit.lift_Œπ h _))
  (Œª A x hx b hb, quiver.hom.op_inj (fork.is_limit.hom_ext h begin
    simp only [quiver.hom.op_unop, is_limit.lift_Œπ],
    exact quiver.hom.unop_inj hb,
  end))

end kernel_fork

namespace cokernel_cofork

@[simp]
lemma is_colimit.œÄ_desc {X Y : C} {f : X ‚ü∂ Y} {c : cokernel_cofork f} (hc : is_colimit c)
  (c' : cokernel_cofork f) : c.œÄ ‚â´ hc.desc c' = c'.œÄ :=
by apply cofork.is_colimit.œÄ_desc

@[simps]
def is_colimit.of_œÄ_op {X Y Q : C} (p : Y ‚ü∂ Q) {f : X ‚ü∂ Y}
  (w : f ‚â´ p = 0) (h : is_colimit (cokernel_cofork.of_œÄ p w)) :
  is_limit (kernel_fork.of_Œπ p.op
    (show p.op ‚â´ f.op = 0, by simpa only [‚Üê op_comp, w])) :=
kernel_fork.is_limit.of_Œπ _ _
  (Œª A x hx, (h.desc (cokernel_cofork.of_œÄ x.unop (quiver.hom.op_inj hx))).op)
  (Œª A x hx, quiver.hom.unop_inj (is_colimit.œÄ_desc h _))
  (Œª A x hx b hb, quiver.hom.unop_inj (cofork.is_colimit.hom_ext h begin
    simp only [quiver.hom.unop_op, is_colimit.œÄ_desc],
    exact quiver.hom.op_inj hb,
  end))

@[simps]
def is_colimit.of_œÄ_unop {X Y Q : C·µí·µñ} (p : Y ‚ü∂ Q) {f : X ‚ü∂ Y}
  (w : f ‚â´ p = 0) (h : is_colimit (cokernel_cofork.of_œÄ p w)) :
  is_limit (kernel_fork.of_Œπ p.unop
    (show p.unop ‚â´ f.unop = 0, by simpa only [‚Üê unop_comp, w])) :=
kernel_fork.is_limit.of_Œπ _ _
  (Œª A x hx, (h.desc (cokernel_cofork.of_œÄ x.op (quiver.hom.unop_inj hx))).unop)
  (Œª A x hx, quiver.hom.op_inj (is_colimit.œÄ_desc h _))
  (Œª A x hx b hb, quiver.hom.op_inj (cofork.is_colimit.hom_ext h begin
    simp only [quiver.hom.op_unop, is_colimit.œÄ_desc],
    exact quiver.hom.unop_inj hb,
  end))

end cokernel_cofork

end limits

end category_theory

open category_theory.limits
variables {C : Type*} [category C] [has_zero_morphisms C]
  (S : short_complex C)

namespace short_complex

@[nolint has_nonempty_instance]
structure right_homology_data :=
(Q H : C)
(p : S.X‚ÇÇ ‚ü∂ Q)
(Œπ : H ‚ü∂ Q)
(hp‚ÇÄ : S.f ‚â´ p = 0)
(hp : is_colimit (cokernel_cofork.of_œÄ p hp‚ÇÄ))
(hŒπ‚ÇÄ : Œπ ‚â´ hp.desc (cokernel_cofork.of_œÄ _ S.zero) = 0)
(hŒπ : is_limit (kernel_fork.of_Œπ Œπ hŒπ‚ÇÄ))

namespace right_homology_data

@[simp]
def of_coker_of_ker [has_cokernel S.f] [has_kernel (cokernel.desc‚ÇÄ S.f S.g S.zero)] :
  S.right_homology_data :=
{ Q := cokernel S.f,
  H := kernel (cokernel.desc‚ÇÄ S.f S.g S.zero),
  p := cokernel.œÄ _,
  Œπ := kernel.Œπ _,
  hp‚ÇÄ := cokernel.condition _,
  hp := cokernel_is_cokernel _,
  hŒπ‚ÇÄ := kernel.condition _,
  hŒπ := kernel_is_kernel _, }

attribute [simp, reassoc] hp‚ÇÄ hŒπ‚ÇÄ
variables {S} (h : right_homology_data S) {A : C}

instance : epi h.p :=
‚ü®Œª Y l‚ÇÅ l‚ÇÇ, cofork.is_colimit.hom_ext h.hp‚ü©

instance : mono h.Œπ :=
‚ü®Œª Y l‚ÇÅ l‚ÇÇ, fork.is_limit.hom_ext h.hŒπ‚ü©

def desc_Q (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.Q ‚ü∂ A :=
h.hp.desc (cokernel_cofork.of_œÄ k hk)

@[simp, reassoc]
lemma p_desc_Q (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) :
  h.p ‚â´ h.desc_Q k hk = k :=
h.hp.fac _ walking_parallel_pair.one

@[simp]
def desc_H (k : S.X‚ÇÇ ‚ü∂ A) (hk : S.f ‚â´ k = 0) : h.H ‚ü∂ A :=
  h.Œπ ‚â´ h.desc_Q k hk

/-- The morphism `h.Q ‚ü∂ S.X‚ÇÉ` induced by `S.g : S.X‚ÇÇ ‚ü∂ S.X‚ÇÉ` and the fact that
`h.Q` is a cokernel of `S.f : S.X‚ÇÅ ‚ü∂ S.X‚ÇÇ`. -/
def g' : h.Q ‚ü∂ S.X‚ÇÉ := h.desc_Q S.g S.zero

@[simp, reassoc]
lemma p_g' : h.p ‚â´ h.g' = S.g :=
p_desc_Q _ _ _

@[simp, reassoc]
lemma Œπ_g' : h.Œπ ‚â´ h.g' = 0 := h.hŒπ‚ÇÄ

/-- For `h : homology_ful_data S`, this is a restatement of `h.hŒπ`, saying that
`Œπ : h.H ‚ü∂ h.Q` is a kernel of `h.g' : h.Q ‚ü∂ S.X‚ÇÉ`. -/
@[simp]
def hŒπ' : is_limit (kernel_fork.of_Œπ h.Œπ h.Œπ_g') := h.hŒπ

def lift_H (k : A ‚ü∂ h.Q) (hk : k ‚â´ h.g' = 0) :
  A ‚ü∂ h.H :=
h.hŒπ.lift (kernel_fork.of_Œπ k hk)

@[simp, reassoc]
lemma lift_H_Œπ (k : A ‚ü∂ h.Q) (hk : k ‚â´ h.g' = 0) :
  h.lift_H k hk ‚â´ h.Œπ = k :=
h.hŒπ.fac (kernel_fork.of_Œπ k hk) walking_parallel_pair.zero

variable (S)

@[simp]
def of_colimit_cokernel_cofork (hg : S.g = 0) (c : cokernel_cofork S.f) (hc : is_colimit c) :
  S.right_homology_data :=
{ Q := c.X,
  H := c.X,
  p := c.œÄ,
  Œπ := ùüô _,
  hp‚ÇÄ := cokernel_cofork.condition _,
  hp := is_colimit.of_iso_colimit hc (cofork.ext (iso.refl _) (by tidy)),
  hŒπ‚ÇÄ := cofork.is_colimit.hom_ext hc begin
    dsimp,
    simp only [hg, id_comp, cofork.is_colimit.œÄ_desc, cokernel_cofork.œÄ_of_œÄ, comp_zero],
  end,
  hŒπ := kernel_zero _ begin
    apply cofork.is_colimit.hom_ext hc,
    dsimp,
    simp only [hg, id_comp, cofork.is_colimit.œÄ_desc, cokernel_cofork.œÄ_of_œÄ, comp_zero],
  end }

@[simp]
def of_has_cokernel [has_cokernel S.f] (hg : S.g = 0) : S.right_homology_data :=
of_colimit_cokernel_cofork S hg _ (cokernel_is_cokernel _)

@[simp]
def of_limit_kernel_fork (hf : S.f = 0) (c : kernel_fork S.g) (hc : is_limit c) :
  S.right_homology_data :=
{ Q := S.X‚ÇÇ,
  H := c.X,
  p := ùüô _,
  Œπ := c.Œπ,
  hp‚ÇÄ := by rw [comp_id, hf],
  hp := cokernel_zero _ hf,
  hŒπ‚ÇÄ := kernel_fork.condition _,
  hŒπ := is_limit.of_iso_limit hc (fork.ext (iso.refl _) (by tidy)), }

@[simp]
def of_has_kernel [has_kernel S.g] (hf : S.f = 0) : S.right_homology_data :=
of_limit_kernel_fork S hf _ (kernel_is_kernel _)

@[simp]
def of_zeros (hf : S.f = 0) (hg : S.g = 0) :
  S.right_homology_data :=
{ Q := S.X‚ÇÇ,
  H := S.X‚ÇÇ,
  p := ùüô _,
  Œπ := ùüô _,
  hp‚ÇÄ := by rw [comp_id, hf],
  hp := cokernel_zero _ hf,
  hŒπ‚ÇÄ := by { dsimp, rw [id_comp, hg], },
  hŒπ := kernel_zero _ hg, }

end right_homology_data

class has_right_homology : Prop :=
(cond : nonempty S.right_homology_data)

def some_right_homology_data [has_right_homology S] :
  S.right_homology_data := has_right_homology.cond.some

variable {S}

lemma has_right_homology.mk' (h : S.right_homology_data) : has_right_homology S :=
‚ü®nonempty.intro h‚ü©

@[priority 100]
instance has_right_homology_of_coker_of_ker
  [has_cokernel S.f] [has_kernel (cokernel.desc‚ÇÄ S.f S.g S.zero)] :
  S.has_right_homology := has_right_homology.mk' (right_homology_data.of_coker_of_ker S)

instance has_right_homology_of_has_cokernel {X Y : C} (f : X ‚ü∂ Y) (Z : C)
  [has_cokernel f] :
  (short_complex.mk f (0 : Y ‚ü∂ Z) comp_zero).has_right_homology :=
has_right_homology.mk' (right_homology_data.of_has_cokernel _ rfl)

instance has_right_homology_of_has_kernel {Y Z : C} (g : Y ‚ü∂ Z) (X : C)
  [has_kernel g] :
  (short_complex.mk (0 : X ‚ü∂ Y) g zero_comp).has_right_homology :=
has_right_homology.mk' (right_homology_data.of_has_kernel _ rfl)

instance has_right_homology_of_zeros (X Y Z : C) :
  (short_complex.mk (0 : X ‚ü∂ Y) (0 : Y ‚ü∂ Z) zero_comp).has_right_homology :=
has_right_homology.mk' (right_homology_data.of_zeros _ rfl rfl)

@[simp]
def left_homology_data.op (h : left_homology_data S) :
  right_homology_data S.op :=
{ Q := opposite.op h.K,
  H := opposite.op h.H,
  p := h.i.op,
  Œπ := h.œÄ.op,
  hp‚ÇÄ := quiver.hom.unop_inj h.hi‚ÇÄ,
  hp := kernel_fork.is_limit.of_Œπ_op _ _ h.hi,
  hŒπ‚ÇÄ := quiver.hom.unop_inj h.hœÄ‚ÇÄ,
  hŒπ := cokernel_cofork.is_colimit.of_œÄ_op _ _ h.hœÄ, }

@[simp] lemma left_homology_data.op_p (h : left_homology_data S) : h.op.p = h.i.op := rfl
@[simp] lemma left_homology_data.op_Œπ (h : left_homology_data S) : h.op.Œπ = h.œÄ.op := rfl
@[simp] lemma left_homology_data.op_g' (h : left_homology_data S) : h.op.g' = h.f'.op := rfl

@[simp]
def right_homology_data.op (h : right_homology_data S) :
  left_homology_data S.op :=
{ K := opposite.op h.Q,
  H := opposite.op h.H,
  i := h.p.op,
  œÄ := h.Œπ.op,
  hi‚ÇÄ := quiver.hom.unop_inj h.hp‚ÇÄ,
  hi := cokernel_cofork.is_colimit.of_œÄ_op _ _ h.hp,
  hœÄ‚ÇÄ := quiver.hom.unop_inj h.hŒπ‚ÇÄ,
  hœÄ := kernel_fork.is_limit.of_Œπ_op _ _ h.hŒπ, }

@[simp] lemma right_homology_data.op_i (h : right_homology_data S) : h.op.i = h.p.op := rfl
@[simp] lemma right_homology_data.op_œÄ (h : right_homology_data S) : h.op.œÄ = h.Œπ.op := rfl
@[simp] lemma right_homology_data.op_f' (h : right_homology_data S) : h.op.f' = h.g'.op := rfl

instance [has_left_homology S] : has_right_homology S.op :=
has_right_homology.mk' S.some_left_homology_data.op

instance [has_right_homology S] : has_left_homology S.op :=
has_left_homology.mk' S.some_right_homology_data.op

@[simp]
def left_homology_data.unop (h : left_homology_data S.op) :
  right_homology_data S :=
{ Q := opposite.unop h.K,
  H := opposite.unop h.H,
  p := h.i.unop,
  Œπ := h.œÄ.unop,
  hp‚ÇÄ := quiver.hom.op_inj h.hi‚ÇÄ,
  hp := kernel_fork.is_limit.of_Œπ_unop _ _ h.hi,
  hŒπ‚ÇÄ := quiver.hom.op_inj h.hœÄ‚ÇÄ,
  hŒπ := cokernel_cofork.is_colimit.of_œÄ_unop _ _ h.hœÄ, }

@[simp] lemma left_homology_data.unop_p (h : left_homology_data S.op) : h.unop.p = h.i.unop := rfl
@[simp] lemma left_homology_data.unop_Œπ (h : left_homology_data S.op) : h.unop.Œπ = h.œÄ.unop := rfl
@[simp] lemma left_homology_data.unop_g' (h : left_homology_data S.op) : h.unop.g' = h.f'.unop := rfl

@[simp]
def right_homology_data.unop (h : right_homology_data S.op) :
  left_homology_data S :=
{ K := opposite.unop h.Q,
  H := opposite.unop h.H,
  i := h.p.unop,
  œÄ := h.Œπ.unop,
  hi‚ÇÄ := quiver.hom.op_inj h.hp‚ÇÄ,
  hi := cokernel_cofork.is_colimit.of_œÄ_unop _ _ h.hp,
  hœÄ‚ÇÄ := quiver.hom.op_inj h.hŒπ‚ÇÄ,
  hœÄ := kernel_fork.is_limit.of_Œπ_unop _ _ h.hŒπ, }

@[simp] lemma right_homology_data.unop_i (h : right_homology_data S.op) : h.unop.i = h.p.unop := rfl
@[simp] lemma right_homology_data.unop_œÄ (h : right_homology_data S.op) : h.unop.œÄ = h.Œπ.unop := rfl
@[simp] lemma right_homology_data.unop_f' (h : right_homology_data S.op) :
  h.unop.f' = h.g'.unop := rfl

section

variable {S' : short_complex C·µí·µñ}

@[simp]
def left_homology_data.unop' (h : left_homology_data S') :
  right_homology_data S'.unop :=
{ Q := opposite.unop h.K,
  H := opposite.unop h.H,
  p := h.i.unop,
  Œπ := h.œÄ.unop,
  hp‚ÇÄ := quiver.hom.op_inj h.hi‚ÇÄ,
  hp := kernel_fork.is_limit.of_Œπ_unop _ _ h.hi,
  hŒπ‚ÇÄ := quiver.hom.op_inj h.hœÄ‚ÇÄ,
  hŒπ := cokernel_cofork.is_colimit.of_œÄ_unop _ _ h.hœÄ, }

@[simp] lemma left_homology_data.unop'_p (h : left_homology_data S') : h.unop'.p = h.i.unop := rfl
@[simp] lemma left_homology_data.unop'_Œπ (h : left_homology_data S') : h.unop'.Œπ = h.œÄ.unop := rfl
@[simp] lemma left_homology_data.unop'_g' (h : left_homology_data S') : h.unop'.g' = h.f'.unop := rfl

@[simp]
def right_homology_data.unop' (h : right_homology_data S') :
  left_homology_data S'.unop :=
{ K := opposite.unop h.Q,
  H := opposite.unop h.H,
  i := h.p.unop,
  œÄ := h.Œπ.unop,
  hi‚ÇÄ := quiver.hom.op_inj h.hp‚ÇÄ,
  hi := cokernel_cofork.is_colimit.of_œÄ_unop _ _ h.hp,
  hœÄ‚ÇÄ := quiver.hom.op_inj h.hŒπ‚ÇÄ,
  hœÄ := kernel_fork.is_limit.of_Œπ_unop _ _ h.hŒπ, }

@[simp] lemma right_homology_data.unop'_i (h : right_homology_data S') : h.unop'.i = h.p.unop := rfl
@[simp] lemma right_homology_data.unop'_œÄ (h : right_homology_data S') : h.unop'.œÄ = h.Œπ.unop := rfl
@[simp] lemma right_homology_data.unop'_f' (h : right_homology_data S') :
  h.unop'.f' = h.g'.unop := rfl

end

variables {S‚ÇÅ S‚ÇÇ S‚ÇÉ : short_complex C}

namespace right_homology_data

@[simp]
def of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÅ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] : right_homology_data S‚ÇÇ :=
begin
  haveI : epi (op_map œÜ).œÑ‚ÇÅ := by { dsimp, apply_instance, },
  haveI : is_iso (op_map œÜ).œÑ‚ÇÇ := by { dsimp, apply_instance, },
  haveI : mono (op_map œÜ).œÑ‚ÇÉ := by { dsimp, apply_instance, },
  exact (left_homology_data.of_epi_of_is_iso_of_mono' (op_map œÜ) h.op).unop,
end

@[simp]
lemma of_epi_of_is_iso_of_mono_p (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÅ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    (right_homology_data.of_epi_of_is_iso_of_mono œÜ h).p = inv œÜ.œÑ‚ÇÇ ‚â´ h.p :=
begin
  change (h.p.op ‚â´ inv œÜ.œÑ‚ÇÇ.op).unop = _,
  simp only [quiver.hom.unop_op, unop_comp, unop_inv],
end

@[simp]
lemma of_epi_of_is_iso_of_mono_g' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÅ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    (of_epi_of_is_iso_of_mono œÜ h).g' = h.g' ‚â´ œÜ.œÑ‚ÇÉ :=
begin
  rw [‚Üê cancel_epi (of_epi_of_is_iso_of_mono œÜ h).p, p_g'],
  simp only [of_epi_of_is_iso_of_mono_p, assoc, p_g'_assoc, is_iso.eq_inv_comp, œÜ.comm‚ÇÇ‚ÇÉ],
end

@[simp]
lemma of_epi_of_is_iso_of_mono_Œπ (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÅ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    (of_epi_of_is_iso_of_mono œÜ h).Œπ = h.Œπ := rfl

@[simp]
def of_epi_of_is_iso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÇ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] : right_homology_data S‚ÇÅ :=
begin
  haveI : epi (op_map œÜ).œÑ‚ÇÅ := by { dsimp, apply_instance, },
  haveI : is_iso (op_map œÜ).œÑ‚ÇÇ := by { dsimp, apply_instance, },
  haveI : mono (op_map œÜ).œÑ‚ÇÉ := by { dsimp, apply_instance, },
  exact (left_homology_data.of_epi_of_is_iso_of_mono (op_map œÜ) h.op).unop,
end

@[simp]
lemma of_epi_of_is_iso_of_mono'_p (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÇ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    (of_epi_of_is_iso_of_mono' œÜ h).p = œÜ.œÑ‚ÇÇ ‚â´ h.p := rfl

@[simp]
lemma of_epi_of_is_iso_of_mono'_g'_œÑ‚ÇÉ (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÇ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
  (of_epi_of_is_iso_of_mono' œÜ h).g' ‚â´ œÜ.œÑ‚ÇÉ = h.g' :=
by rw [‚Üê cancel_epi (of_epi_of_is_iso_of_mono' œÜ h).p, p_g'_assoc,
    of_epi_of_is_iso_of_mono'_p, assoc, p_g', œÜ.comm‚ÇÇ‚ÇÉ]

@[simp]
lemma of_epi_of_is_iso_of_mono'_Œπ (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÇ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    (of_epi_of_is_iso_of_mono' œÜ h).Œπ = h.Œπ := rfl

def of_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : right_homology_data S‚ÇÅ) : right_homology_data S‚ÇÇ :=
h‚ÇÅ.of_epi_of_is_iso_of_mono e.hom

end right_homology_data

lemma has_right_homology_of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [has_right_homology S‚ÇÅ]
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] : has_right_homology S‚ÇÇ :=
has_right_homology.mk' (right_homology_data.of_epi_of_is_iso_of_mono œÜ S‚ÇÅ.some_right_homology_data)

lemma has_right_homology_of_epi_of_is_iso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [has_right_homology S‚ÇÇ]
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] : has_right_homology S‚ÇÅ :=
has_right_homology.mk' (right_homology_data.of_epi_of_is_iso_of_mono' œÜ S‚ÇÇ.some_right_homology_data)

lemma has_right_homology_of_iso {S‚ÇÅ S‚ÇÇ : short_complex C}
  (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [has_right_homology S‚ÇÅ] : has_right_homology S‚ÇÇ :=
has_right_homology_of_epi_of_is_iso_of_mono e.hom

variables (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data)

structure right_homology_map_data :=
(œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q)
(œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H)
(commp : h‚ÇÅ.p ‚â´ œÜQ = œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p)
(commg' : h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ = œÜQ ‚â´ h‚ÇÇ.g')
(commŒπ : h‚ÇÅ.Œπ ‚â´ œÜQ = œÜH ‚â´ h‚ÇÇ.Œπ)

namespace right_homology_map_data

attribute [reassoc] commp commg' commŒπ

@[simps]
def zero (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  right_homology_map_data 0 h‚ÇÅ h‚ÇÇ :=
{ œÜQ := 0,
  œÜH := 0,
  commp := by simp,
  commg' := by simp,
  commŒπ := by simp, }

@[simps]
def id (h : S.right_homology_data) : right_homology_map_data (ùüô S) h h :=
{ œÜQ := ùüô _,
  œÜH := ùüô _,
  commp := by simp only [id_œÑ‚ÇÇ, comp_id, id_comp],
  commg' := by simp only [comp_id, id_œÑ‚ÇÉ, id_comp],
  commŒπ := by simp only [comp_id, id_comp], }

@[simps]
def comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ} {h‚ÇÅ : S‚ÇÅ.right_homology_data}
  {h‚ÇÇ : S‚ÇÇ.right_homology_data} {h‚ÇÉ : S‚ÇÉ.right_homology_data}
  (œà : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) (œà' : right_homology_map_data œÜ' h‚ÇÇ h‚ÇÉ) :
  right_homology_map_data (œÜ ‚â´ œÜ') h‚ÇÅ h‚ÇÉ :=
{ œÜQ := œà.œÜQ ‚â´ œà'.œÜQ,
  œÜH := œà.œÜH ‚â´ œà'.œÜH,
  commp := by simp only [comp_œÑ‚ÇÇ, assoc, œà.commp_assoc, œà'.commp],
  commg' := by simp only [comp_œÑ‚ÇÉ, assoc, œà.commg'_assoc, œà'.commg'],
  commŒπ := by simp only [assoc, œà.commŒπ_assoc, œà'.commŒπ], }

instance : subsingleton (right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :=
‚ü®begin
  rintros ‚ü®œÜQ‚ÇÅ, œÜH‚ÇÅ, commp‚ÇÅ, commg'‚ÇÅ, commŒπ‚ÇÅ‚ü© ‚ü®œÜQ‚ÇÇ, œÜH‚ÇÇ, commp‚ÇÇ, commg'‚ÇÇ, commŒπ‚ÇÇ‚ü©,
  have hQ : œÜQ‚ÇÅ = œÜQ‚ÇÇ := by rw [‚Üê cancel_epi h‚ÇÅ.p, commp‚ÇÅ, commp‚ÇÇ],
  have hH : œÜH‚ÇÅ = œÜH‚ÇÇ := by rw [‚Üê cancel_mono h‚ÇÇ.Œπ, ‚Üê commŒπ‚ÇÅ, ‚Üê commŒπ‚ÇÇ, hQ],
  simp only,
  split; assumption,
end‚ü©

instance : inhabited (right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :=
‚ü®begin
  let œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q := h‚ÇÅ.desc_Q (œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p)
    (by rw [‚Üê œÜ.comm‚ÇÅ‚ÇÇ_assoc, h‚ÇÇ.hp‚ÇÄ, comp_zero]),
  have commp : h‚ÇÅ.p ‚â´ œÜQ = œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p := right_homology_data.p_desc_Q _ _ _,
  have commg' : h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ = œÜQ ‚â´ h‚ÇÇ.g',
  { simp only [‚Üê cancel_epi h‚ÇÅ.p, assoc, right_homology_data.p_desc_Q_assoc,
      right_homology_data.p_g'_assoc, right_homology_data.p_g', œÜ.comm‚ÇÇ‚ÇÉ], },
  let œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := h‚ÇÇ.lift_H (h‚ÇÅ.Œπ ‚â´ œÜQ)
    (by rw [assoc, ‚Üê commg', h‚ÇÅ.Œπ_g'_assoc, zero_comp]),
  have commŒπ : h‚ÇÅ.Œπ ‚â´ œÜQ = œÜH ‚â´ h‚ÇÇ.Œπ := by rw right_homology_data.lift_H_Œπ,
  exact ‚ü®œÜQ, œÜH, commp, commg', commŒπ‚ü©,
end‚ü©

instance : unique (right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) := unique.mk' _

def some : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ := default

variables {œÜ h‚ÇÅ h‚ÇÇ}

lemma congr_œÜH {Œ≥‚ÇÅ Œ≥‚ÇÇ : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) :
  Œ≥‚ÇÅ.œÜH = Œ≥‚ÇÇ.œÜH := by rw eq
lemma congr_œÜQ {Œ≥‚ÇÅ Œ≥‚ÇÇ : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) :
  Œ≥‚ÇÅ.œÜQ = Œ≥‚ÇÇ.œÜQ := by rw eq

end right_homology_map_data

variable (S)

def right_homology [has_right_homology S] : C := S.some_right_homology_data.H
def cycles_co [has_right_homology S] : C := S.some_right_homology_data.Q
def right_homology_Œπ [has_right_homology S] : S.right_homology ‚ü∂ S.cycles_co :=
  S.some_right_homology_data.Œπ
def p_cycles_co [has_right_homology S] : S.X‚ÇÇ ‚ü∂ S.cycles_co := S.some_right_homology_data.p

variables {S S‚ÇÅ S‚ÇÇ S‚ÇÉ}

def right_homology_map' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := (right_homology_map_data.some œÜ _ _).œÜH

def cycles_co_map' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q := (right_homology_map_data.some œÜ _ _).œÜQ

@[simp, reassoc]
lemma p_cycles_co_map' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  h‚ÇÅ.p ‚â´ cycles_co_map' œÜ h‚ÇÅ h‚ÇÇ = œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p :=
right_homology_map_data.commp _

@[reassoc]
lemma right_homology_Œπ_naturality' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  right_homology_map' œÜ h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.Œπ ‚â´ cycles_co_map' œÜ h‚ÇÅ h‚ÇÇ :=
by { symmetry, apply right_homology_map_data.commŒπ }

def right_homology_map [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ]
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) : S‚ÇÅ.right_homology ‚ü∂ S‚ÇÇ.right_homology :=
right_homology_map' œÜ _ _

def cycles_co_map [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ]
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) : S‚ÇÅ.cycles_co ‚ü∂ S‚ÇÇ.cycles_co :=
cycles_co_map' œÜ _ _

@[simp, reassoc]
lemma p_cycles_co_map (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.has_right_homology] [S‚ÇÇ.has_right_homology] :
  S‚ÇÅ.p_cycles_co ‚â´ cycles_co_map œÜ = œÜ.œÑ‚ÇÇ ‚â´ S‚ÇÇ.p_cycles_co :=
p_cycles_co_map' _ _ _

@[reassoc]
lemma right_homology_Œπ_naturality [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ]
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  right_homology_map œÜ ‚â´ S‚ÇÇ.right_homology_Œπ = S‚ÇÅ.right_homology_Œπ ‚â´ cycles_co_map œÜ :=
right_homology_Œπ_naturality' _ _ _

namespace right_homology_map_data

variables (Œ≥ : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) {œÜ h‚ÇÅ h‚ÇÇ}

lemma right_homology_map'_eq : right_homology_map' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.œÜH :=
right_homology_map_data.congr_œÜH (subsingleton.elim _ _)

lemma cycles_co_map'_eq : cycles_co_map' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.œÜQ :=
right_homology_map_data.congr_œÜQ (subsingleton.elim _ _)

end right_homology_map_data

@[simp]
lemma right_homology_map'_id (h : S.right_homology_data) :
  right_homology_map' (ùüô S) h h = ùüô _ :=
(right_homology_map_data.id h).right_homology_map'_eq

@[simp]
lemma cycles_co_map'_id (h : S.right_homology_data) :
  cycles_co_map' (ùüô S) h h = ùüô _ :=
(right_homology_map_data.id h).cycles_co_map'_eq

variable (S)

@[simp]
lemma right_homology_map_id [has_right_homology S] :
  right_homology_map (ùüô S) = ùüô _ :=
right_homology_map'_id _

@[simp]
lemma cycles_co_map_id [has_right_homology S] :
  cycles_co_map (ùüô S) = ùüô _ :=
cycles_co_map'_id _

@[simp]
lemma right_homology_map'_zero (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data):
  right_homology_map' 0 h‚ÇÅ h‚ÇÇ = 0 :=
(right_homology_map_data.zero h‚ÇÅ h‚ÇÇ).right_homology_map'_eq

@[simp]
lemma cycles_co_map'_zero (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data):
  cycles_co_map' 0 h‚ÇÅ h‚ÇÇ = 0 :=
(right_homology_map_data.zero h‚ÇÅ h‚ÇÇ).cycles_co_map'_eq

variables (S‚ÇÅ S‚ÇÇ)

@[simp]
lemma right_homology_map_zero [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ]:
  right_homology_map (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
right_homology_map'_zero _ _

@[simp]
lemma cycles_co_map_zero [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ] :
  cycles_co_map (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
cycles_co_map'_zero _ _

variables {S‚ÇÅ S‚ÇÇ}

lemma right_homology_map'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
  (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) (h‚ÇÉ : S‚ÇÉ.right_homology_data) :
  right_homology_map' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = right_homology_map' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´
    right_homology_map' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ :=
begin
  let Œ≥‚ÇÅ := right_homology_map_data.some œÜ‚ÇÅ _ _,
  let Œ≥‚ÇÇ := right_homology_map_data.some œÜ‚ÇÇ _ _,
  rw [Œ≥‚ÇÅ.right_homology_map'_eq, Œ≥‚ÇÇ.right_homology_map'_eq, (Œ≥‚ÇÅ.comp Œ≥‚ÇÇ).right_homology_map'_eq,
    right_homology_map_data.comp_œÜH],
end

lemma cycles_co_map'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
  (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) (h‚ÇÉ : S‚ÇÉ.right_homology_data) :
  cycles_co_map' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = cycles_co_map' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´
    cycles_co_map' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ :=
begin
  let Œ≥‚ÇÅ := right_homology_map_data.some œÜ‚ÇÅ _ _,
  let Œ≥‚ÇÇ := right_homology_map_data.some œÜ‚ÇÇ _ _,
  rw [Œ≥‚ÇÅ.cycles_co_map'_eq, Œ≥‚ÇÇ.cycles_co_map'_eq, (Œ≥‚ÇÅ.comp Œ≥‚ÇÇ).cycles_co_map'_eq,
    right_homology_map_data.comp_œÜQ],
end

@[simp]
lemma right_homology_map_comp [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ]
  [has_right_homology S‚ÇÉ] (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  right_homology_map (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = right_homology_map œÜ‚ÇÅ ‚â´ right_homology_map œÜ‚ÇÇ :=
right_homology_map'_comp _ _ _ _ _

@[simp]
lemma cycles_co_map_comp [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ]
  [has_right_homology S‚ÇÉ] (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  cycles_co_map (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = cycles_co_map œÜ‚ÇÅ ‚â´ cycles_co_map œÜ‚ÇÇ :=
cycles_co_map'_comp _ _ _ _ _

@[simps]
def right_homology_map_iso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data)
  (h‚ÇÇ : S‚ÇÇ.right_homology_data) : h‚ÇÅ.H ‚âÖ h‚ÇÇ.H :=
{ hom := right_homology_map' e.hom h‚ÇÅ h‚ÇÇ,
  inv := right_homology_map' e.inv h‚ÇÇ h‚ÇÅ,
  hom_inv_id' := by rw [‚Üê right_homology_map'_comp, e.hom_inv_id, right_homology_map'_id],
  inv_hom_id' := by rw [‚Üê right_homology_map'_comp, e.inv_hom_id, right_homology_map'_id], }

instance is_iso_right_homology_map'_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ]
  (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  is_iso (right_homology_map' œÜ h‚ÇÅ h‚ÇÇ) :=
by { change is_iso (right_homology_map_iso' (as_iso œÜ) h‚ÇÅ h‚ÇÇ).hom, apply_instance, }

@[simps]
def cycles_co_map_iso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data)
  (h‚ÇÇ : S‚ÇÇ.right_homology_data) : h‚ÇÅ.Q ‚âÖ h‚ÇÇ.Q :=
{ hom := cycles_co_map' e.hom h‚ÇÅ h‚ÇÇ,
  inv := cycles_co_map' e.inv h‚ÇÇ h‚ÇÅ,
  hom_inv_id' := by rw [‚Üê cycles_co_map'_comp, e.hom_inv_id, cycles_co_map'_id],
  inv_hom_id' := by rw [‚Üê cycles_co_map'_comp, e.inv_hom_id, cycles_co_map'_id], }

instance is_iso_cycles_co_map'_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ]
  (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  is_iso (cycles_co_map' œÜ h‚ÇÅ h‚ÇÇ) :=
by { change is_iso (cycles_co_map_iso' (as_iso œÜ) h‚ÇÅ h‚ÇÇ).hom, apply_instance, }

@[simps]
def right_homology_map_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.has_right_homology]
  [S‚ÇÇ.has_right_homology] : S‚ÇÅ.right_homology ‚âÖ S‚ÇÇ.right_homology :=
{ hom := right_homology_map e.hom,
  inv := right_homology_map e.inv,
  hom_inv_id' := by rw [‚Üê right_homology_map_comp, e.hom_inv_id, right_homology_map_id],
  inv_hom_id' := by rw [‚Üê right_homology_map_comp, e.inv_hom_id, right_homology_map_id], }

instance is_iso_right_homology_map_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ] [S‚ÇÅ.has_right_homology]
  [S‚ÇÇ.has_right_homology] :
  is_iso (right_homology_map œÜ) :=
by { change is_iso (right_homology_map_iso (as_iso œÜ)).hom, apply_instance, }

@[simps]
def cycles_co_map_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.has_right_homology]
  [S‚ÇÇ.has_right_homology] : S‚ÇÅ.cycles_co ‚âÖ S‚ÇÇ.cycles_co :=
{ hom := cycles_co_map e.hom,
  inv := cycles_co_map e.inv,
  hom_inv_id' := by rw [‚Üê cycles_co_map_comp, e.hom_inv_id, cycles_co_map_id],
  inv_hom_id' := by rw [‚Üê cycles_co_map_comp, e.inv_hom_id, cycles_co_map_id], }

instance is_iso_cycles_co_map_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ] [S‚ÇÅ.has_right_homology]
  [S‚ÇÇ.has_right_homology] :
  is_iso (cycles_co_map œÜ) :=
by { change is_iso (cycles_co_map_iso (as_iso œÜ)).hom, apply_instance, }

variable {S}

def right_homology_data.right_homology_iso (h‚ÇÅ : S.right_homology_data) [S.has_right_homology] :
  S.right_homology ‚âÖ h‚ÇÅ.H := right_homology_map_iso' (iso.refl _) _ _

def right_homology_data.cycles_co_iso (h‚ÇÅ : S.right_homology_data) [S.has_right_homology] :
  S.cycles_co ‚âÖ h‚ÇÅ.Q := cycles_co_map_iso' (iso.refl _) _ _

@[simps]
def left_homology_map_data.op {S‚ÇÅ S‚ÇÇ : short_complex C} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
  {h‚ÇÅ : S‚ÇÅ.left_homology_data} {h‚ÇÇ : S‚ÇÇ.left_homology_data}
  (œà : left_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  right_homology_map_data (op_map œÜ) h‚ÇÇ.op h‚ÇÅ.op :=
{ œÜQ := œà.œÜK.op,
  œÜH := œà.œÜH.op,
  commp := by simp only [op_map_œÑ‚ÇÇ, ‚Üê op_comp, left_homology_data.op_p, œà.commi],
  commg' := by simp only [left_homology_data.op_g', op_map_œÑ‚ÇÉ, ‚Üê op_comp, œà.commf'],
  commŒπ := by simp only [left_homology_data.op_Œπ, ‚Üê op_comp, œà.commœÄ], }

@[simps]
def left_homology_map_data.unop' {S‚ÇÅ S‚ÇÇ : short_complex C·µí·µñ} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
  {h‚ÇÅ : S‚ÇÅ.left_homology_data} {h‚ÇÇ : S‚ÇÇ.left_homology_data}
  (œà : left_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  right_homology_map_data (unop'_map œÜ) h‚ÇÇ.unop' h‚ÇÅ.unop' :=
{ œÜQ := œà.œÜK.unop,
  œÜH := œà.œÜH.unop,
  commp := by simp only [unop'_map_œÑ‚ÇÇ, ‚Üê unop_comp, left_homology_data.unop'_p, œà.commi],
  commg' := by simp only [left_homology_data.unop'_g', unop'_map_œÑ‚ÇÉ, ‚Üê unop_comp, œà.commf'],
  commŒπ := by simp only [left_homology_data.unop'_Œπ, ‚Üê unop_comp, œà.commœÄ], }

@[simps]
def left_homology_map_data.unop {S‚ÇÅ S‚ÇÇ : short_complex C} {œÜ : S‚ÇÅ.op ‚ü∂ S‚ÇÇ.op}
  {h‚ÇÅ : S‚ÇÅ.op.left_homology_data} {h‚ÇÇ : S‚ÇÇ.op.left_homology_data}
  (œà : left_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  right_homology_map_data (unop_map œÜ) h‚ÇÇ.unop h‚ÇÅ.unop :=
{ œÜQ := œà.œÜK.unop,
  œÜH := œà.œÜH.unop,
  commp := by simp only [unop_map_œÑ‚ÇÇ, ‚Üê unop_comp, left_homology_data.unop_p, œà.commi],
  commg' := by simp only [left_homology_data.unop_g', unop_map_œÑ‚ÇÉ, ‚Üê unop_comp, œà.commf'],
  commŒπ := by simp only [left_homology_data.unop_Œπ, ‚Üê unop_comp, œà.commœÄ], }

@[simps]
def right_homology_map_data.op {S‚ÇÅ S‚ÇÇ : short_complex C} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
  {h‚ÇÅ : S‚ÇÅ.right_homology_data} {h‚ÇÇ : S‚ÇÇ.right_homology_data}
  (œà : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  left_homology_map_data (op_map œÜ) h‚ÇÇ.op h‚ÇÅ.op :=
{ œÜK := œà.œÜQ.op,
  œÜH := œà.œÜH.op,
  commi := by simp only [right_homology_data.op_i, op_map_œÑ‚ÇÇ, ‚Üê op_comp, œà.commp],
  commf' := by simp only [right_homology_data.op_f', op_map_œÑ‚ÇÅ, ‚Üê op_comp, œà.commg'],
  commœÄ := by simp only [right_homology_data.op_œÄ, ‚Üê op_comp, œà.commŒπ], }

@[simps]
def right_homology_map_data.unop' {S‚ÇÅ S‚ÇÇ : short_complex C·µí·µñ} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
  {h‚ÇÅ : S‚ÇÅ.right_homology_data} {h‚ÇÇ : S‚ÇÇ.right_homology_data}
  (œà : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  left_homology_map_data (unop'_map œÜ) h‚ÇÇ.unop' h‚ÇÅ.unop' :=
{ œÜK := œà.œÜQ.unop,
  œÜH := œà.œÜH.unop,
  commi := by simp only [right_homology_data.unop'_i, unop'_map_œÑ‚ÇÇ, ‚Üê unop_comp, œà.commp],
  commf' := by simp only [right_homology_data.unop'_f', unop'_map_œÑ‚ÇÅ, ‚Üê unop_comp, œà.commg'],
  commœÄ := by simp only [right_homology_data.unop'_œÄ, ‚Üê unop_comp, œà.commŒπ], }

@[simps]
def right_homology_map_data.unop {S‚ÇÅ S‚ÇÇ : short_complex C} {œÜ : S‚ÇÅ.op ‚ü∂ S‚ÇÇ.op}
  {h‚ÇÅ : S‚ÇÅ.op.right_homology_data} {h‚ÇÇ : S‚ÇÇ.op.right_homology_data}
  (œà : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  left_homology_map_data (unop_map œÜ) h‚ÇÇ.unop h‚ÇÅ.unop :=
{ œÜK := œà.œÜQ.unop,
  œÜH := œà.œÜH.unop,
  commi := by simp only [right_homology_data.unop_i, unop_map_œÑ‚ÇÇ, ‚Üê unop_comp, œà.commp],
  commf' := by simp only [right_homology_data.unop_f', unop_map_œÑ‚ÇÅ, ‚Üê unop_comp, œà.commg'],
  commœÄ := by simp only [right_homology_data.unop_œÄ, ‚Üê unop_comp, œà.commŒπ], }

namespace right_homology_map_data

variables (Œ≥ : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) {œÜ h‚ÇÅ h‚ÇÇ}

lemma right_homology_map_eq [S‚ÇÅ.has_right_homology] [S‚ÇÇ.has_right_homology] :
  right_homology_map œÜ = h‚ÇÅ.right_homology_iso.hom ‚â´ Œ≥.œÜH ‚â´ h‚ÇÇ.right_homology_iso.inv :=
begin
  dsimp [right_homology_data.right_homology_iso, right_homology_map_iso'],
  rw [‚Üê Œ≥.right_homology_map'_eq, ‚Üê right_homology_map'_comp, ‚Üê right_homology_map'_comp, id_comp, comp_id],
  refl,
end

lemma cycles_co_map_eq [S‚ÇÅ.has_right_homology] [S‚ÇÇ.has_right_homology] :
  cycles_co_map œÜ = h‚ÇÅ.cycles_co_iso.hom ‚â´ Œ≥.œÜQ ‚â´ h‚ÇÇ.cycles_co_iso.inv :=
begin
  dsimp [right_homology_data.cycles_co_iso, cycles_co_map_iso'],
  rw [‚Üê Œ≥.cycles_co_map'_eq, ‚Üê cycles_co_map'_comp, ‚Üê cycles_co_map'_comp, id_comp, comp_id],
  refl,
end

lemma right_homology_map_comm [S‚ÇÅ.has_right_homology] [S‚ÇÇ.has_right_homology] :
  right_homology_map œÜ ‚â´ h‚ÇÇ.right_homology_iso.hom = h‚ÇÅ.right_homology_iso.hom ‚â´ Œ≥.œÜH :=
by simp only [Œ≥.right_homology_map_eq, assoc, iso.inv_hom_id, comp_id]

lemma cycles_co_map_comm [S‚ÇÅ.has_right_homology] [S‚ÇÇ.has_right_homology] :
  cycles_co_map œÜ ‚â´ h‚ÇÇ.cycles_co_iso.hom = h‚ÇÅ.cycles_co_iso.hom ‚â´ Œ≥.œÜQ :=
by simp only [Œ≥.cycles_co_map_eq, assoc, iso.inv_hom_id, comp_id]

end right_homology_map_data

variable (C)

abbreviation _root_.category_with_right_homology := ‚àÄ (S : short_complex C), S.has_right_homology

@[simps]
def right_homology_functor [category_with_right_homology C] :
  short_complex C ‚•§ C :=
{ obj := Œª S, S.right_homology,
  map := Œª S‚ÇÅ S‚ÇÇ, right_homology_map, }

@[simps]
def cycles_co_functor [category_with_right_homology C] :
  short_complex C ‚•§ C :=
{ obj := Œª S, S.cycles_co,
  map := Œª S‚ÇÅ S‚ÇÇ, cycles_co_map, }

@[simps]
def right_homology_Œπ_nat_trans [category_with_right_homology C] :
  right_homology_functor C ‚ü∂ cycles_co_functor C :=
{ app := Œª S, right_homology_Œπ S,
  naturality' := Œª S‚ÇÅ S‚ÇÇ, right_homology_Œπ_naturality, }

@[simps]
def p_cycles_co_nat_trans [category_with_right_homology C] :
  short_complex.œÄ‚ÇÇ ‚ü∂ cycles_co_functor C :=
{ app := Œª S, p_cycles_co S, }

variables {C} (S)

def op_right_homology_iso [S.has_left_homology] :
  S.op.right_homology ‚âÖ opposite.op S.left_homology :=
S.some_left_homology_data.op.right_homology_iso

def op_left_homology_iso [S.has_right_homology] :
  S.op.left_homology ‚âÖ opposite.op S.right_homology :=
S.some_right_homology_data.op.left_homology_iso

def op_cycles_co_iso [S.has_left_homology] :
  S.op.cycles_co ‚âÖ opposite.op S.cycles :=
S.some_left_homology_data.op.cycles_co_iso

def op_cycles_iso [S.has_right_homology] :
  S.op.cycles ‚âÖ opposite.op S.cycles_co :=
S.some_right_homology_data.op.cycles_iso

variables {S}

@[simp]
lemma left_homology_map'_op
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.left_homology_data) (h‚ÇÇ : S‚ÇÇ.left_homology_data) :
  (left_homology_map' œÜ h‚ÇÅ h‚ÇÇ).op = right_homology_map' (op_map œÜ) h‚ÇÇ.op h‚ÇÅ.op :=
begin
  let Œ≥ : left_homology_map_data œÜ h‚ÇÅ h‚ÇÇ := default,
  simp only [Œ≥.left_homology_map'_eq, Œ≥.op.right_homology_map'_eq,
    left_homology_map_data.op_œÜH],
end

@[simp]
lemma right_homology_map'_op
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  (right_homology_map' œÜ h‚ÇÅ h‚ÇÇ).op = left_homology_map' (op_map œÜ) h‚ÇÇ.op h‚ÇÅ.op :=
begin
  let Œ≥ : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ := default,
  simp only [Œ≥.right_homology_map'_eq, Œ≥.op.left_homology_map'_eq,
    right_homology_map_data.op_œÜH],
end

@[simp]
lemma left_homology_map_op (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [has_left_homology S‚ÇÅ] [has_left_homology S‚ÇÇ] :
  (left_homology_map œÜ).op =
    S‚ÇÇ.op_right_homology_iso.inv ‚â´ right_homology_map (op_map œÜ) ‚â´ S‚ÇÅ.op_right_homology_iso.hom :=
begin
  dsimp only [left_homology_map, right_homology_map,
    op_right_homology_iso, right_homology_data.right_homology_iso,
    right_homology_map_iso', iso.refl],
  rw [left_homology_map'_op, ‚Üê right_homology_map'_comp, ‚Üê right_homology_map'_comp,
    comp_id, id_comp],
end

@[simp]
lemma right_homology_map_op (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [has_right_homology S‚ÇÅ] [has_right_homology S‚ÇÇ] :
  (right_homology_map œÜ).op =
    S‚ÇÇ.op_left_homology_iso.inv ‚â´ left_homology_map (op_map œÜ) ‚â´ S‚ÇÅ.op_left_homology_iso.hom :=
begin
  dsimp only [right_homology_map, left_homology_map,
    op_left_homology_iso, left_homology_data.left_homology_iso,
    left_homology_map_iso', iso.refl],
  rw [right_homology_map'_op, ‚Üê left_homology_map'_comp, ‚Üê left_homology_map'_comp,
    comp_id, id_comp],
end

instance category_with_left_homology_op_of_category_with_right_homology
  [category_with_right_homology C] : category_with_left_homology C·µí·µñ :=
Œª S, has_left_homology_of_iso S.unop_op

instance category_with_right_homology_op_of_category_with_left_homology
  [category_with_left_homology C] : category_with_right_homology C·µí·µñ :=
Œª S, has_right_homology_of_iso S.unop_op

instance category_with_right_homology_of_category_with_left_homology
  [category_with_right_homology C] : category_with_left_homology C·µí·µñ :=
Œª S, has_left_homology_of_iso S.unop_op

@[simps]
def right_homology_functor_op_nat_iso [category_with_right_homology C] :
  (right_homology_functor C).op ‚âÖ op_functor C ‚ãô left_homology_functor C·µí·µñ :=
nat_iso.of_components (Œª S, (op_left_homology_iso S.unop).symm) (by simp)

@[simps]
def left_homology_functor_op_nat_iso [category_with_left_homology C] :
  (left_homology_functor C).op ‚âÖ op_functor C ‚ãô right_homology_functor C·µí·µñ :=
nat_iso.of_components (Œª S, (op_right_homology_iso S.unop).symm) (by simp)

namespace right_homology_map_data

@[simps]
def of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : right_homology_data S‚ÇÅ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    right_homology_map_data œÜ h (right_homology_data.of_epi_of_is_iso_of_mono œÜ h) :=
{ œÜQ := ùüô _,
  œÜH := ùüô _,
  commp := by simp only [comp_id, right_homology_data.of_epi_of_is_iso_of_mono_p, is_iso.hom_inv_id_assoc],
  commg' := by simp only [right_homology_data.of_epi_of_is_iso_of_mono_g', id_comp],
  commŒπ := by simp only [comp_id, right_homology_data.of_epi_of_is_iso_of_mono_Œπ, id_comp], }

end right_homology_map_data

instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.right_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
  is_iso (right_homology_map' œÜ h‚ÇÅ h‚ÇÇ) :=
begin
  let h‚ÇÇ' := right_homology_data.of_epi_of_is_iso_of_mono œÜ h‚ÇÅ,
  haveI : is_iso (right_homology_map' œÜ h‚ÇÅ h‚ÇÇ'),
  { let Œ≥ := right_homology_map_data.of_epi_of_is_iso_of_mono œÜ h‚ÇÅ,
    rw Œ≥.right_homology_map'_eq,
    dsimp,
    apply_instance, },
  have eq := right_homology_map'_comp œÜ (ùüô S‚ÇÇ) h‚ÇÅ h‚ÇÇ' h‚ÇÇ,
  rw comp_id at eq,
  rw eq,
  apply_instance,
end

instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.has_right_homology] [S‚ÇÇ.has_right_homology]
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
  is_iso (right_homology_map œÜ) :=
by { dsimp only [right_homology_map], apply_instance, }

end short_complex
