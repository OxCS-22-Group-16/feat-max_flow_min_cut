import algebra.category.Ring.internal

namespace category_theory

namespace concrete_category

namespace internal

open operations

variables {C : Type*} [category C] (R : internal Ring C) (M : internal Ab C)

class module :=
(smul [] : Ab.yoneda_bilinear R.Ab M M)
(one_smul [] : operations.lift‚ÇÇ (to_functor_const_punit ‚â´ Ring_one.to_internal_yoneda_operation‚ÇÄ R)
   (ùüô _) ‚â´ smul.œÜ = ùüô _)
(mul_smul [] : lift‚ÇÇ (pr‚ÇÅ‚ÇÇ_‚ÇÉ ‚â´ Ring_mul.to_internal_yoneda_operation‚ÇÇ R) pr‚ÇÉ_‚ÇÉ ‚â´ smul.œÜ =
  lift‚ÇÇ pr‚ÇÅ_‚ÇÉ (pr‚ÇÇ‚ÇÉ_‚ÇÉ ‚â´ smul.œÜ) ‚â´ smul.œÜ)

instance : module R R.Ab :=
{ smul :=
  { œÜ := Ring_mul.to_internal_yoneda_operation‚ÇÇ R,
    right_distrib := operation‚ÇÇ.to_internal_yoneda_operation‚ÇÇ_right_distrib _ _ R Ring_right_distrib,
    left_distrib := operation‚ÇÇ.to_internal_yoneda_operation‚ÇÇ_left_distrib _ _ R Ring_left_distrib, },
  one_smul := operation‚ÇÇ.to_internal_yoneda_operation‚ÇÇ_zero_add  _ R _ Ring_one_mul,
  mul_smul := operation‚ÇÇ.to_internal_yoneda_operation‚ÇÇ_assoc Ring_mul R Ring_mul_assoc, }

@[simp]
def is_linear_map {M‚ÇÅ M‚ÇÇ : internal Ab C} [module R M‚ÇÅ] [module R M‚ÇÇ] (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : Prop :=
(module.smul R M‚ÇÅ).œÜ ‚â´ hom.to_internal_yoneda_operation‚ÇÅ f =
  lift‚ÇÇ pr‚ÇÅ (pr‚ÇÇ ‚â´ hom.to_internal_yoneda_operation‚ÇÅ f) ‚â´ (module.smul R M‚ÇÇ).œÜ

class linear_map {M‚ÇÅ M‚ÇÇ : internal Ab C} [module R M‚ÇÅ] [module R M‚ÇÇ] (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :=
(is_linear_map [] : is_linear_map R f)

instance {M : internal Ab C} [module R M] : linear_map R (ùüô M) :=
‚ü®begin
  dsimp only [is_linear_map],
  simp only [hom.to_internal_yoneda_operation‚ÇÅ_id, category.comp_id],
  convert (category.id_comp _).symm,
  tidy,
end‚ü©

instance {M‚ÇÅ M‚ÇÇ M‚ÇÉ : internal Ab C} [module R M‚ÇÅ] [module R M‚ÇÇ] [module R M‚ÇÉ]
  (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (g : M‚ÇÇ ‚ü∂ M‚ÇÉ) [linear_map R f] [linear_map R g] : linear_map R (f ‚â´ g) :=
‚ü®begin
  dsimp only [is_linear_map],
  simp only [hom.to_internal_yoneda_operation‚ÇÅ_comp],
  have hf := linear_map.is_linear_map R f,
  have hg := linear_map.is_linear_map R g,
  dsimp only [is_linear_map] at hf hg,
  rw [reassoc_of hf, hg],
  refl,
end‚ü©

structure Module :=
(Œ± : internal Ab C)
[hŒ± : module R Œ±]

namespace Module

variable {R}

instance (M : Module R) : module R M.Œ± := M.hŒ±

def hom (M‚ÇÅ M‚ÇÇ : Module R) := { f : M‚ÇÅ.Œ± ‚ü∂ M‚ÇÇ.Œ± // is_linear_map R f }

instance (M‚ÇÅ M‚ÇÇ : Module R) (f : hom M‚ÇÅ M‚ÇÇ) : linear_map R f.1 := ‚ü®f.2‚ü©

instance (M‚ÇÅ M‚ÇÇ : Module R) (f‚ÇÅ f‚ÇÇ : M‚ÇÅ.Œ± ‚ü∂ M‚ÇÇ.Œ±) [linear_map R f‚ÇÅ]
  [linear_map R f‚ÇÇ] : linear_map R (f‚ÇÅ + f‚ÇÇ) :=
‚ü®begin
  dsimp only [is_linear_map],
  ext Y x : 3,
  rcases x with ‚ü®a, m‚ü©,
  simp only [nat_trans.comp_app, types_comp_apply, lift‚ÇÇ_app, pr‚ÇÅ_app, pr‚ÇÇ_app],
  -- (module.smul R M‚ÇÇ.Œ±).right_distrib,
  sorry,
end‚ü©

instance zero_linear (M‚ÇÅ M‚ÇÇ : Module R) : linear_map R (0 : M‚ÇÅ.Œ± ‚ü∂ M‚ÇÇ.Œ±) := sorry

instance (M‚ÇÅ M‚ÇÇ : Module R) (f : M‚ÇÅ.Œ± ‚ü∂ M‚ÇÇ.Œ±) [linear_map R f] : linear_map R (-f) := sorry

@[simps]
def hom.mk {M‚ÇÅ M‚ÇÇ : Module R} (f : M‚ÇÅ.Œ± ‚ü∂ M‚ÇÇ.Œ±) [h : linear_map R f] : hom M‚ÇÅ M‚ÇÇ :=
‚ü®f, h.is_linear_map‚ü©

@[simps]
def id (M : Module R) : hom M M := hom.mk (ùüô M.Œ±)

@[simps]
def comp {M‚ÇÅ M‚ÇÇ M‚ÇÉ : Module R} (f : hom M‚ÇÅ M‚ÇÇ) (g : hom M‚ÇÇ M‚ÇÉ) : hom M‚ÇÅ M‚ÇÉ := hom.mk (f.1 ‚â´ g.1)

instance : category (Module R) :=
{ hom := hom,
  id := id,
  comp := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ, comp, }

instance : preadditive (Module R) :=
{ hom_group := Œª M‚ÇÅ M‚ÇÇ,
  { add := Œª f‚ÇÅ f‚ÇÇ, hom.mk (f‚ÇÅ.1 + f‚ÇÇ.1),
    zero := hom.mk 0,
    neg := Œª f, hom.mk (-f.1),
    add_assoc := Œª f‚ÇÅ f‚ÇÇ f‚ÇÉ, by { ext1, apply add_assoc, },
    zero_add := Œª f, by { ext1, apply zero_add, },
    add_zero := Œª f, by { ext1, apply add_zero, },
    add_left_neg := Œª f, by { ext1, apply add_left_neg, },
    add_comm := Œª f‚ÇÅ f‚ÇÇ, by { ext1, apply add_comm, }, },
  add_comp' := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ f‚ÇÅ f‚ÇÇ g, by { ext1, apply preadditive.add_comp, },
  comp_add' := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ f g‚ÇÅ g‚ÇÇ, by { ext1, apply preadditive.comp_add, }, }

end Module

end internal

end concrete_category

end category_theory
