import category_theory.concrete_category.internal
import algebra.category.Group.preadditive
import category_theory.internal_operation
import category_theory.limits.shapes.finite_products

universe u

noncomputable theory

def Ab.mk (A : Type*) (zero' : A) (neg' : A ‚ü∂ A) (add' : A √ó A ‚Üí A)
  (add_assoc' : ‚àÄ (x y z : A), add' ‚ü®add' ‚ü®x, y‚ü©, z‚ü© = add' ‚ü®x, add' ‚ü®y, z‚ü©‚ü©)
  (add_comm' : ‚àÄ (x y : A), add' ‚ü®x, y‚ü© = add' ‚ü®y, x‚ü©)
  (zero_add' : ‚àÄ (x : A), add' ‚ü®zero', x‚ü© = x)
  (add_left_neg' : ‚àÄ (x : A), add' ‚ü®neg' x, x‚ü© = zero') :
  Ab :=
‚ü®A,
{ zero := zero',
  neg := neg',
  add := Œª x y, add' ‚ü®x, y‚ü©,
  add_assoc := add_assoc',
  add_comm := add_comm',
  zero_add := zero_add',
  add_zero := Œª x, by { change add' ‚ü®x, zero'‚ü© = x, rw [add_comm', zero_add'], },
  add_left_neg := add_left_neg', }‚ü©

namespace category_theory

open opposite limits

namespace concrete_category

namespace operations

def Ab_zero : operation‚ÇÄ Ab :=
{ app := Œª M, 0, }

def Ab_neg : operation‚ÇÅ Ab :=
{ app := Œª M x, -x, }

def Ab_add : operation‚ÇÇ Ab :=
{ app := Œª M x, x.1 + x.2, }

lemma Ab_add_comm : Ab_add.comm :=
by { ext M x, apply add_comm, }

lemma Ab_add_assoc : Ab_add.assoc :=
by { ext M x, apply add_assoc, }

lemma Ab_zero_add : Ab_add.zero_add Ab_zero :=
by { ext M x, apply zero_add, }

lemma Ab_add_left_neg : Ab_add.add_left_neg Ab_zero Ab_neg :=
by { ext M x, apply add_left_neg, }

end operations

namespace internal

namespace Ab

open concrete_category.operations limits

variables {C D : Type*} [category C] [category D] (M : internal Ab C)

instance add_comm_group_presheaf_type_obj {Y : C·µí·µñ} :
add_comm_group (M.presheaf_type.obj Y) :=
by { dsimp [presheaf_type], apply_instance, }

instance add_comm_group_presheaf_comp_forget_obj {Y : C·µí·µñ} :
add_comm_group ((M.presheaf ‚ãô forget Ab).obj Y) :=
by { dsimp [presheaf_type], apply_instance, }

@[simps]
def mk (X : C)
  (yoneda_zero : (functor.const C·µí·µñ).obj punit ‚ü∂ yoneda.obj X)
  (yoneda_neg : yoneda.obj X ‚ü∂ yoneda.obj X)
  (yoneda_add : concat‚ÇÇ (yoneda.obj X) (yoneda.obj X) ‚ü∂ yoneda.obj X)
  (yoneda_add_comm : yoneda_add = lift‚ÇÇ pr‚ÇÇ pr‚ÇÅ ‚â´ yoneda_add)
  (yoneda_add_assoc : lift‚ÇÇ (pr‚ÇÅ‚ÇÇ_‚ÇÉ ‚â´ yoneda_add) pr‚ÇÉ_‚ÇÉ ‚â´ yoneda_add =
    lift‚ÇÇ pr‚ÇÅ_‚ÇÉ (pr‚ÇÇ‚ÇÉ_‚ÇÉ ‚â´ yoneda_add) ‚â´ yoneda_add)
  (yoneda_zero_add : lift‚ÇÇ (to_functor_const_punit ‚â´ yoneda_zero) (ùüô _) ‚â´ yoneda_add = ùüô _ )
  (yoneda_add_left_neg : lift‚ÇÇ yoneda_neg (ùüô _) ‚â´ yoneda_add = to_functor_const_punit ‚â´ yoneda_zero) :
  internal Ab C :=
{ obj := X,
  presheaf :=
  { obj := Œª Y, begin
      refine Ab.mk ((yoneda.obj X).obj Y) (yoneda_zero.app Y punit.star)
        (yoneda_neg.app Y) (yoneda_add.app Y) _ _ _ _,
      { intros x y z,
        exact congr_fun (congr_app yoneda_add_assoc Y) ‚ü®x, ‚ü®y, z‚ü©‚ü©, },
      { intros x y,
        exact congr_fun (congr_app yoneda_add_comm Y) ‚ü®x, y‚ü©, },
      { exact congr_fun (congr_app yoneda_zero_add Y), },
      { exact congr_fun (congr_app yoneda_add_left_neg Y), },
    end,
    map := Œª Y Y' f, ‚ü®(yoneda.obj X).map f,
      congr_fun (yoneda_zero.naturality f).symm punit.star,
      Œª x y, congr_fun (yoneda_add.naturality f).symm ‚ü®x, y‚ü©‚ü©, },
  iso := by refl, }

@[simps]
def mk' (X : C) [has_terminal C] [has_binary_product X X] [has_binary_product X (prod X X)]
  (zero : ‚ä§_ C ‚ü∂ X) (neg : X ‚ü∂ X) (add : prod X X ‚ü∂ X) (add_comm : internal_operation‚ÇÇ.comm add)
  (add_assoc : internal_operation‚ÇÇ.assoc add) (add_zero : internal_operation‚ÇÇ.zero_add add zero)
  (add_left_neg : internal_operation‚ÇÇ.add_left_neg add zero neg) :
  internal Ab C :=
Ab.mk X (internal_operation‚ÇÄ.yoneda_equiv X zero)
  (internal_operation‚ÇÅ.yoneda_equiv X neg)
  (internal_operation‚ÇÇ.yoneda_equiv X add)
  (internal_operation‚ÇÇ.yoneda_equiv_comm X add add_comm)
  (internal_operation‚ÇÇ.yoneda_equiv_assoc X add add_assoc)
  (internal_operation‚ÇÇ.yoneda_equiv_zero_add X add zero add_zero)
  (internal_operation‚ÇÇ.yoneda_equiv_add_left_neg X add zero neg add_left_neg)

def yoneda_operation_zero := Ab_zero.to_internal_yoneda_operation‚ÇÄ M
def yoneda_operation_neg := Ab_neg.to_internal_yoneda_operation‚ÇÅ M
def yoneda_operation_add := Ab_add.to_internal_yoneda_operation‚ÇÇ M
def zero [has_terminal C] := (internal_operation‚ÇÄ.yoneda_equiv _).symm (yoneda_operation_zero M)
def neg := (internal_operation‚ÇÅ.yoneda_equiv _).symm (yoneda_operation_neg M)
def add [has_binary_product M.obj M.obj]:= (internal_operation‚ÇÇ.yoneda_equiv _).symm (yoneda_operation_add M)

lemma yoneda_operation_add_comm : yoneda_operation_add M = lift‚ÇÇ pr‚ÇÇ pr‚ÇÅ ‚â´ yoneda_operation_add M :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_comm M Ab_add_comm

lemma yoneda_operation_add_assoc :
  lift‚ÇÇ (pr‚ÇÅ‚ÇÇ_‚ÇÉ ‚â´ yoneda_operation_add M) pr‚ÇÉ_‚ÇÉ ‚â´ yoneda_operation_add M =
    lift‚ÇÇ pr‚ÇÅ_‚ÇÉ (pr‚ÇÇ‚ÇÉ_‚ÇÉ ‚â´ yoneda_operation_add M) ‚â´ yoneda_operation_add M :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_assoc M Ab_add_assoc

lemma yoneda_operation_zero_add :
  lift‚ÇÇ (to_functor_const_punit ‚â´ yoneda_operation_zero M) (ùüô _) ‚â´
    yoneda_operation_add M = ùüô _  :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_zero_add M Ab_zero Ab_zero_add

lemma yoneda_operation_add_left_neg :
lift‚ÇÇ (yoneda_operation_neg M) (ùüô _) ‚â´ yoneda_operation_add M =
  to_functor_const_punit ‚â´ yoneda_operation_zero M :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_add_left_neg M Ab_zero Ab_neg Ab_add_left_neg

lemma add_comm [has_binary_product M.obj M.obj] : (add M).comm :=
internal_operation‚ÇÇ.yoneda_equiv_symm_comm M.obj _ (yoneda_operation_add_comm M)

lemma add_assoc [has_binary_product M.obj M.obj] [has_binary_product M.obj (prod M.obj M.obj)] :
  (add M).assoc :=
internal_operation‚ÇÇ.yoneda_equiv_symm_assoc M.obj _ (yoneda_operation_add_assoc M)

variable {M}

@[simp]
lemma iso_hom_app_yoneda_operation_add_app {Y : C·µí·µñ} (x‚ÇÅ x‚ÇÇ : (yoneda.obj M.obj).obj Y) :
  M.iso.hom.app _ ((yoneda_operation_add M).app Y ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©) =
  M.iso.hom.app Y x‚ÇÅ + M.iso.hom.app Y x‚ÇÇ :=
begin
  dsimp [yoneda_operation_add],
  simpa only [functor_to_types.inv_hom_id_app_apply],
end

lemma yoneda_operation_add_app_eq {Y : C·µí·µñ} (x‚ÇÅ x‚ÇÇ : (yoneda.obj M.obj).obj Y)
  [has_binary_product M.obj M.obj] :
  (yoneda_operation_add M).app Y ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© = prod.lift x‚ÇÅ x‚ÇÇ ‚â´ add M :=
internal_operation‚ÇÇ_gen.app_eq_comp_yoneda_equiv (yoneda_operation_add M) _ _

lemma iso_inv_app_add {Y : C·µí·µñ} (x‚ÇÅ x‚ÇÇ : M.presheaf.obj Y) :
  M.iso.inv.app Y (x‚ÇÅ + x‚ÇÇ) =
    (yoneda_operation_add M).app Y ‚ü®M.iso.inv.app Y x‚ÇÅ, M.iso.inv.app Y x‚ÇÇ‚ü© :=
begin
  have h : function.bijective (M.iso.hom.app Y),
  { rw ‚Üê is_iso_iff_bijective,
    apply_instance, },
  obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© := h.surjective x‚ÇÅ,
  obtain ‚ü®y‚ÇÇ, hy‚ÇÇ‚ü© := h.surjective x‚ÇÇ,
  simp only [‚Üê hy‚ÇÅ, ‚Üê hy‚ÇÇ, functor_to_types.hom_inv_id_app_apply],
  apply h.1,
  rw iso_hom_app_yoneda_operation_add_app y‚ÇÅ y‚ÇÇ,
  simp only [functor_to_types.inv_hom_id_app_apply],
end

def hom.mk' (X‚ÇÅ X‚ÇÇ : internal Ab C) [has_binary_product X‚ÇÅ.obj X‚ÇÅ.obj]
  [has_binary_product X‚ÇÇ.obj X‚ÇÇ.obj] (f : X‚ÇÅ.obj ‚ü∂ X‚ÇÇ.obj)
  (hf : add X‚ÇÅ ‚â´ f = limits.prod.map f f ‚â´ add X‚ÇÇ) :
  X‚ÇÅ ‚ü∂ X‚ÇÇ :=
{ app := Œª Y, add_monoid_hom.mk' ((internal_yoneda_operation‚ÇÅ_gen.on_internal_presheaf
    (internal_operation‚ÇÅ_gen.yoneda_equiv X‚ÇÅ.obj X‚ÇÇ.obj f)).app Y) (Œª a b, begin
      dsimp at a b ‚ä¢,
      have h := congr_fun (congr_app (_root_.congr_arg internal_yoneda_operation‚ÇÇ_gen.on_internal_presheaf
        (_root_.congr_arg (internal_operation‚ÇÇ_gen.yoneda_equiv _ _ _) hf)) Y) ‚ü®a, b‚ü©,
      dsimp at h,
      rw [iso_inv_app_add, yoneda_operation_add_app_eq, category.assoc, h,
        ‚Üê iso_hom_app_yoneda_operation_add_app, yoneda_operation_add_app_eq, prod.lift_map_assoc],
    end),
  naturality' := Œª Y Y' g, begin
    ext x,
    exact congr_fun ((internal_yoneda_operation‚ÇÅ_gen.on_internal_presheaf
      (internal_operation‚ÇÅ_gen.yoneda_equiv X‚ÇÅ.obj X‚ÇÇ.obj f)).naturality g) x,
  end, }

variables (M‚ÇÅ M‚ÇÇ M‚ÇÉ : internal Ab C)

structure yoneda_bilinear :=
(œÜ : internal_yoneda_operation‚ÇÇ_gen M‚ÇÅ.obj M‚ÇÇ.obj M‚ÇÉ.obj)
(right_distrib : internal_yoneda_operation‚ÇÇ_gen.right_distrib œÜ (Ab.yoneda_operation_add _)
    (Ab.yoneda_operation_add _))
(left_distrib : internal_yoneda_operation‚ÇÇ_gen.left_distrib œÜ (Ab.yoneda_operation_add _)
    (Ab.yoneda_operation_add _))

namespace yoneda_bilinear

variables (bil : yoneda_bilinear M‚ÇÅ M‚ÇÇ M‚ÇÉ) {M‚ÇÅ M‚ÇÇ M‚ÇÉ} {Y Y' : C·µí·µñ}

@[simp]
lemma on_internal_presheaf_right_distrib
  (x‚ÇÅ x‚ÇÅ' : M‚ÇÅ.presheaf_type.obj Y) (x‚ÇÇ : M‚ÇÇ.presheaf_type.obj Y) :
bil.œÜ.on_internal_presheaf_curry (x‚ÇÅ + x‚ÇÅ') x‚ÇÇ =
  bil.œÜ.on_internal_presheaf_curry x‚ÇÅ x‚ÇÇ + bil.œÜ.on_internal_presheaf_curry x‚ÇÅ' x‚ÇÇ :=
begin
  have h := congr_fun (nat_trans.congr_app bil.right_distrib Y)
    ‚ü®M‚ÇÅ.iso.inv.app _ x‚ÇÅ, M‚ÇÅ.iso.inv.app _ x‚ÇÅ', M‚ÇÇ.iso.inv.app _ x‚ÇÇ‚ü©,
  have h‚ÇÇ := congr_arg (M‚ÇÉ.iso.hom.app _) h,
  simp only [functor_to_types.comp, lift‚ÇÇ_app, pr‚ÇÅ‚ÇÇ_‚ÇÉ_app, pr‚ÇÉ_‚ÇÉ_app, has_coe_to_fun_Type,
    pr‚ÇÅ‚ÇÉ_‚ÇÉ_app, pr‚ÇÇ‚ÇÉ_‚ÇÉ_app, iso_hom_app_yoneda_operation_add_app] at h‚ÇÇ,
  convert h‚ÇÇ;
  { dsimp, simp only [functor_to_types.inv_hom_id_app_apply], },
end

@[simp]
lemma on_internal_presheaf_left_distrib
  (x‚ÇÅ : M‚ÇÅ.presheaf_type.obj Y) (x‚ÇÇ x‚ÇÇ': M‚ÇÇ.presheaf_type.obj Y) :
bil.œÜ.on_internal_presheaf_curry x‚ÇÅ (x‚ÇÇ + x‚ÇÇ') =
  bil.œÜ.on_internal_presheaf_curry x‚ÇÅ x‚ÇÇ + bil.œÜ.on_internal_presheaf_curry x‚ÇÅ x‚ÇÇ' :=
begin
  have h := congr_fun (nat_trans.congr_app bil.left_distrib Y)
    ‚ü®M‚ÇÅ.iso.inv.app _ x‚ÇÅ, M‚ÇÇ.iso.inv.app _ x‚ÇÇ, M‚ÇÇ.iso.inv.app _ x‚ÇÇ'‚ü©,
  have h‚ÇÇ := congr_arg (M‚ÇÉ.iso.hom.app _) h,
  simp only [functor_to_types.comp, lift‚ÇÇ_app, pr‚ÇÅ_‚ÇÉ_app, pr‚ÇÇ‚ÇÉ_‚ÇÉ_app,
    has_coe_to_fun_Type, pr‚ÇÅ‚ÇÇ_‚ÇÉ_app, pr‚ÇÅ‚ÇÉ_‚ÇÉ_app, iso_hom_app_yoneda_operation_add_app] at h‚ÇÇ,
  convert h‚ÇÇ;
  { dsimp, simp only [functor_to_types.inv_hom_id_app_apply], },
end

end yoneda_bilinear

variable (M)

@[simps]
def apply_functor (F : C ‚•§ D) [has_terminal C] [has_terminal D]
  [has_binary_product M.obj M.obj] [has_binary_product (F.obj M.obj) (F.obj M.obj)]
  [has_binary_product (F.obj M.obj) (prod (F.obj M.obj) (F.obj M.obj))]
  [preserves_limit (functor.empty.{0} C) F] [preserves_limit (pair M.obj M.obj) F] :
  internal Ab D :=
mk' (F.obj M.obj) ((zero M).map F) ((neg M).map F) ((add M).map F)
  ((add_comm M).map F) sorry sorry sorry

variables {M‚ÇÅ M‚ÇÇ}

@[simps]
def apply_functor_map (F : C ‚•§ D) [has_terminal C] [has_terminal D]
  [has_binary_product M‚ÇÅ.obj M‚ÇÅ.obj] [has_binary_product (F.obj M‚ÇÅ.obj) (F.obj M‚ÇÅ.obj)]
  [has_binary_product (F.obj M‚ÇÅ.obj) (prod (F.obj M‚ÇÅ.obj) (F.obj M‚ÇÅ.obj))]
  [preserves_limit (functor.empty.{0} C) F] [preserves_limit (pair M‚ÇÅ.obj M‚ÇÅ.obj) F]
  [has_binary_product M‚ÇÇ.obj M‚ÇÇ.obj] [has_binary_product (F.obj M‚ÇÇ.obj) (F.obj M‚ÇÇ.obj)]
  [has_binary_product (F.obj M‚ÇÇ.obj) (prod (F.obj M‚ÇÇ.obj) (F.obj M‚ÇÇ.obj))]
  [preserves_limit (pair M‚ÇÇ.obj M‚ÇÇ.obj) F] (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :
  apply_functor M‚ÇÅ F ‚ü∂ apply_functor M‚ÇÇ F :=
{ app := Œª Y, add_monoid_hom.mk' (((internal_operation‚ÇÅ_gen.yoneda_equiv _ _)
      (internal_operation‚ÇÅ_gen.map ((internal.obj_functor Ab C).map f) F)).app Y) sorry, }

end Ab

end internal

end concrete_category

namespace functor

open limits concrete_category

variables {C D : Type*} [category C] [category D] (F : C ‚•§ D)
  [has_finite_products C] [has_finite_products D]
  [preserves_limits_of_shape (discrete walking_pair) F]
  [preserves_limit (empty.{0} C) F]

include F

@[simps]
def map_internal_Ab : internal Ab C ‚•§ internal Ab D :=
{ obj := Œª M, internal.Ab.apply_functor M F,
  map := Œª M‚ÇÅ M‚ÇÇ f, internal.Ab.apply_functor_map F f,
  map_id' := Œª M, begin
    ext Y x,
    dsimp [internal_operation‚ÇÅ_gen.map],
    simpa only [functor.map_id, category.comp_id],
  end,
  map_comp' := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ f g, begin
    ext Y x,
    dsimp [internal_operation‚ÇÅ_gen.map],
    erw [nat_trans.comp_app, functor.map_comp, functor.map_comp, ‚Üê category.assoc],
    refl,
  end, }

end functor

namespace concrete_category

namespace internal

namespace Ab

namespace equivalence

open operations

instance (M : Ab.{u}) (Y : Type.{u}·µí·µñ) :
  add_comm_group ((yoneda.obj ((forget Ab).obj M)).obj Y) :=
by { dsimp, apply_instance, }

@[simps]
def functor : Ab.{u} ‚•§ internal Ab Type.{u} :=
{ obj := Œª M, mk ((forget Ab).obj M) { app := Œª Y s, 0, } { app := Œª Y x, -x, }
    { app := Œª Y x, x.1 + x.2, }
    (by { ext Y x a, apply _root_.add_comm, })
    (by { ext Y x a, apply _root_.add_assoc, })
    (by { ext Y x a, apply zero_add, })
    (by { ext Y x a, apply add_left_neg, }),
  map := Œª M‚ÇÅ M‚ÇÇ f,
  { app := Œª Y, add_monoid_hom.mk' (Œª g, f ‚àò g) (by tidy), }, }

@[simps]
def inverse : internal Ab Type.{u} ‚•§ Ab.{u} :=
internal.presheaf_functor _ _ ‚ãô (evaluation _ _).obj (op punit)

def unit_iso : (ùü≠ Ab.{u}) ‚âÖ equivalence.functor ‚ãô equivalence.inverse :=
nat_iso.of_components (Œª M,
  { hom := add_monoid_hom.mk' (Œª x s, x) (by tidy),
    inv := add_monoid_hom.mk' (Œª x, x punit.star) (by tidy),
    hom_inv_id' := by tidy,
    inv_hom_id' := by tidy, }) (by tidy)

@[simps]
def counit_iso_inv (M : internal Ab Type.{u}) :
  M ‚ü∂ (inverse ‚ãô functor).obj M :=
{ app := Œª Y, add_monoid_hom.mk' (Œª f x,
  M.iso.hom.app _ ((by exact Œª s, x) ‚â´ M.iso.inv.app _ f)) (Œª f g, begin
    ext,
    dsimp at f g ‚ä¢,
    rw [‚Üê iso_hom_app_yoneda_operation_add_app, iso_inv_app_add],
    congr' 1,
    let x' : punit ‚ü∂ unop Y := Œª s, x,
    have h := congr_fun ((yoneda_operation_add M).naturality x'.op) ‚ü®M.iso.inv.app _ f, M.iso.inv.app _ g‚ü©,
    exact h.symm,
  end),
  naturality' := sorry, }

@[simps]
def counit_iso_hom (M : internal Ab Type.{u}) :
  (inverse ‚ãô functor).obj M ‚ü∂ M :=
{ app := Œª Y, add_monoid_hom.mk' (Œª f, M.iso.hom.app _ (Œª x, M.iso.inv.app _ (f x) punit.star))
    (begin sorry, end),
  naturality' := sorry, }

@[simps]
def counit_iso : equivalence.inverse ‚ãô equivalence.functor ‚âÖ ùü≠ (internal Ab Type.{u}) :=
nat_iso.of_components (Œª M,
  { hom := counit_iso_hom M,
    inv := counit_iso_inv M,
    hom_inv_id' := begin
      ext Y : 2,
      refine (nat_trans.comp_app (counit_iso_hom M) (counit_iso_inv M) Y).trans _,
      ext f x,
      dsimp,
      simp only [comp_apply, add_monoid_hom.mk'_apply, functor_to_types.hom_inv_id_app_apply],
      erw id_apply,
      have h : is_iso (M.iso.inv.app (op punit)) := infer_instance,
      rw is_iso_iff_bijective at h,
      apply h.1,
      simp only [functor_to_types.hom_inv_id_app_apply],
      ext u,
      have hu := subsingleton.elim u punit.star,
      subst hu,
      refl,
    end,
    inv_hom_id' := begin
      ext Y : 2,
      refine (nat_trans.comp_app (counit_iso_inv M) (counit_iso_hom M) Y).trans _,
      ext f x,
      dsimp,
      simpa only [comp_apply, add_monoid_hom.mk'_apply, functor_to_types.hom_inv_id_app_apply,
        types_comp_apply, functor_to_types.inv_hom_id_app_apply],
    end, }) sorry

end equivalence

def equivalence : Ab.{u} ‚âå internal Ab Type.{u} :=
{ functor := equivalence.functor,
  inverse := equivalence.inverse,
  unit_iso := equivalence.unit_iso,
  counit_iso := equivalence.counit_iso, }

end Ab

end internal

end concrete_category

end category_theory
