import category_theory.concrete_category.internal
import algebra.category.Group.preadditive
import category_theory.internal_operation

noncomputable theory

def Ab.mk (A : Type*) (zero' : A) (neg' : A ‚ü∂ A) (add' : A √ó A ‚Üí A)
  (add_assoc' : ‚àÄ (x y z : A), add' ‚ü®add' ‚ü®x, y‚ü©, z‚ü© = add' ‚ü®x, add' ‚ü®y, z‚ü©‚ü©)
  (add_comm' : ‚àÄ (x y : A), add' ‚ü®x, y‚ü© = add' ‚ü®y, x‚ü©)
  (zero_add' : ‚àÄ (x : A), add' ‚ü®zero', x‚ü© = x)
  (add_left_neg' : ‚àÄ (x : A), add' ‚ü®neg' x, x‚ü© = zero') :
  Ab :=
‚ü®A,
{ zero := zero',
  neg := neg',
  add := Œª x y, add' ‚ü®x, y‚ü©,
  add_assoc := add_assoc',
  add_comm := add_comm',
  zero_add := zero_add',
  add_zero := Œª x, by { change add' ‚ü®x, zero'‚ü© = x, rw [add_comm', zero_add'], },
  add_left_neg := add_left_neg', }‚ü©

namespace category_theory

open opposite limits

namespace concrete_category

namespace operations

def Ab_zero : operation‚ÇÄ Ab :=
{ app := Œª M, 0, }

def Ab_neg : operation‚ÇÅ Ab :=
{ app := Œª M x, -x, }

def Ab_add : operation‚ÇÇ Ab :=
{ app := Œª M x, x.1 + x.2, }

lemma Ab_add_comm : Ab_add.comm :=
by { ext M x, apply add_comm, }

lemma Ab_add_assoc : Ab_add.assoc :=
by { ext M x, apply add_assoc, }

lemma Ab_zero_add : Ab_add.add_zero Ab_zero :=
by { ext M x, apply zero_add, }

lemma Ab_add_left_neg : Ab_add.add_left_neg Ab_zero Ab_neg :=
by { ext M x, apply add_left_neg, }

end operations

namespace internal

namespace Ab

open concrete_category.operations limits

variables {C : Type*} [category C] (M : internal Ab C)

instance add_comm_group_presheaf_type_obj {Y : C·µí·µñ} :
add_comm_group (M.presheaf_type.obj Y) :=
by { dsimp [presheaf_type], apply_instance, }

instance add_comm_group_presheaf_comp_forget_obj {Y : C·µí·µñ} :
add_comm_group ((M.presheaf ‚ãô forget Ab).obj Y) :=
by { dsimp [presheaf_type], apply_instance, }

def mk (X : C)
  (yoneda_zero : (functor.const C·µí·µñ).obj punit ‚ü∂ yoneda.obj X)
  (yoneda_neg : yoneda.obj X ‚ü∂ yoneda.obj X)
  (yoneda_add : concat‚ÇÇ (yoneda.obj X) (yoneda.obj X) ‚ü∂ yoneda.obj X)
  (yoneda_add_comm : yoneda_add = lift‚ÇÇ pr‚ÇÇ pr‚ÇÅ ‚â´ yoneda_add)
  (yoneda_add_assoc : lift‚ÇÇ (pr‚ÇÅ‚ÇÇ_‚ÇÉ ‚â´ yoneda_add) pr‚ÇÉ_‚ÇÉ ‚â´ yoneda_add =
    lift‚ÇÇ pr‚ÇÅ_‚ÇÉ (pr‚ÇÇ‚ÇÉ_‚ÇÉ ‚â´ yoneda_add) ‚â´ yoneda_add)
  (yoneda_zero_add : lift‚ÇÇ (to_functor_const_punit ‚â´ yoneda_zero) (ùüô _) ‚â´ yoneda_add = ùüô _ )
  (yoneda_add_left_neg : lift‚ÇÇ yoneda_neg (ùüô _) ‚â´ yoneda_add = to_functor_const_punit ‚â´ yoneda_zero) :
  internal Ab C :=
{ obj := X,
  presheaf :=
  { obj := Œª Y, begin
      refine Ab.mk ((yoneda.obj X).obj Y) (yoneda_zero.app Y punit.star)
        (yoneda_neg.app Y) (yoneda_add.app Y) _ _ _ _,
      { intros x y z,
        exact congr_fun (congr_app yoneda_add_assoc Y) ‚ü®x, ‚ü®y, z‚ü©‚ü©, },
      { intros x y,
        exact congr_fun (congr_app yoneda_add_comm Y) ‚ü®x, y‚ü©, },
      { exact congr_fun (congr_app yoneda_zero_add Y), },
      { exact congr_fun (congr_app yoneda_add_left_neg Y), },
    end,
    map := Œª Y Y' f, ‚ü®(yoneda.obj X).map f,
      congr_fun (yoneda_zero.naturality f).symm punit.star,
      Œª x y, congr_fun (yoneda_add.naturality f).symm ‚ü®x, y‚ü©‚ü©, },
  iso := by refl, }

def mk' (X : C) [has_terminal C] [has_binary_product X X] [has_binary_product X (prod X X)]
  (zero : ‚ä§_ C ‚ü∂ X) (neg : X ‚ü∂ X) (add : prod X X ‚ü∂ X) (add_comm : internal_operation‚ÇÇ.comm add)
  (add_assoc : internal_operation‚ÇÇ.assoc add) (add_zero : internal_operation‚ÇÇ.zero_add add zero)
  (add_left_neg : internal_operation‚ÇÇ.add_left_neg add zero neg) :
  internal Ab C :=
Ab.mk X (internal_operation‚ÇÄ.yoneda_equiv X zero)
  (internal_operation‚ÇÅ.yoneda_equiv X neg)
  (internal_operation‚ÇÇ.yoneda_equiv X add)
  (internal_operation‚ÇÇ.yoneda_equiv_comm X add add_comm)
  (internal_operation‚ÇÇ.yoneda_equiv_assoc X add add_assoc)
  (internal_operation‚ÇÇ.yoneda_equiv_zero_add X add zero add_zero)
  (internal_operation‚ÇÇ.yoneda_equiv_add_left_neg X add zero neg add_left_neg)

def yoneda_operation_zero := Ab_zero.to_internal_yoneda_operation‚ÇÄ M
def yoneda_operation_neg := Ab_neg.to_internal_yoneda_operation‚ÇÅ M
def yoneda_operation_add := Ab_add.to_internal_yoneda_operation‚ÇÇ M
def zero [has_terminal C] := (internal_operation‚ÇÄ.yoneda_equiv _).symm (yoneda_operation_zero M)
def neg := (internal_operation‚ÇÅ.yoneda_equiv _).symm (yoneda_operation_neg M)
def add [has_binary_product M.obj M.obj]:= (internal_operation‚ÇÇ.yoneda_equiv _).symm (yoneda_operation_add M)

lemma yoneda_operation_add_comm : yoneda_operation_add M = lift‚ÇÇ pr‚ÇÇ pr‚ÇÅ ‚â´ yoneda_operation_add M :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_comm M Ab_add_comm

lemma yoneda_operation_add_assoc :
  lift‚ÇÇ (pr‚ÇÅ‚ÇÇ_‚ÇÉ ‚â´ yoneda_operation_add M) pr‚ÇÉ_‚ÇÉ ‚â´ yoneda_operation_add M =
    lift‚ÇÇ pr‚ÇÅ_‚ÇÉ (pr‚ÇÇ‚ÇÉ_‚ÇÉ ‚â´ yoneda_operation_add M) ‚â´ yoneda_operation_add M :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_assoc M Ab_add_assoc

lemma yoneda_operation_zero_add :
  lift‚ÇÇ (to_functor_const_punit ‚â´ yoneda_operation_zero M) (ùüô _) ‚â´
    yoneda_operation_add M = ùüô _  :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_add_zero M Ab_zero Ab_zero_add

lemma yoneda_operation_add_left_neg :
lift‚ÇÇ (yoneda_operation_neg M) (ùüô _) ‚â´ yoneda_operation_add M =
  to_functor_const_punit ‚â´ yoneda_operation_zero M :=
Ab_add.to_internal_yoneda_operation‚ÇÇ_add_left_neg M Ab_zero Ab_neg Ab_add_left_neg

lemma add_comm [has_binary_product M.obj M.obj] : (add M).comm :=
internal_operation‚ÇÇ.yoneda_equiv_symm_comm M.obj _ (yoneda_operation_add_comm M)

lemma add_assoc [has_binary_product M.obj M.obj] [has_binary_product M.obj (prod M.obj M.obj)] :
  (add M).assoc :=
internal_operation‚ÇÇ.yoneda_equiv_symm_assoc M.obj _ (yoneda_operation_add_assoc M)

variable {M}

@[simp]
lemma iso_hom_app_yoneda_operation_add_app {Y : C·µí·µñ} (x‚ÇÅ x‚ÇÇ : (yoneda.obj M.obj).obj Y) :
  M.iso.hom.app _ ((yoneda_operation_add M).app Y ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©) =
  M.iso.hom.app Y x‚ÇÅ + M.iso.hom.app Y x‚ÇÇ :=
begin
  dsimp [yoneda_operation_add],
  simpa only [functor_to_types.inv_hom_id_app_apply],
end

variables (M‚ÇÅ M‚ÇÇ M‚ÇÉ : internal Ab C)

structure yoneda_bilinear :=
(œÜ : internal_yoneda_operation‚ÇÇ_gen M‚ÇÅ.obj M‚ÇÇ.obj M‚ÇÉ.obj)
(right_distrib : internal_yoneda_operation‚ÇÇ_gen.right_distrib œÜ (Ab.yoneda_operation_add _)
    (Ab.yoneda_operation_add _))
(left_distrib : internal_yoneda_operation‚ÇÇ_gen.left_distrib œÜ (Ab.yoneda_operation_add _)
    (Ab.yoneda_operation_add _))

namespace yoneda_bilinear

variables (bil : yoneda_bilinear M‚ÇÅ M‚ÇÇ M‚ÇÉ) {M‚ÇÅ M‚ÇÇ M‚ÇÉ} {Y Y' : C·µí·µñ}

@[simp]
lemma on_internal_presheaf_right_distrib
  (x‚ÇÅ x‚ÇÅ' : M‚ÇÅ.presheaf_type.obj Y) (x‚ÇÇ : M‚ÇÇ.presheaf_type.obj Y) :
bil.œÜ.on_internal_presheaf_curry (x‚ÇÅ + x‚ÇÅ') x‚ÇÇ =
  bil.œÜ.on_internal_presheaf_curry x‚ÇÅ x‚ÇÇ + bil.œÜ.on_internal_presheaf_curry x‚ÇÅ' x‚ÇÇ :=
begin
  have h := congr_fun (nat_trans.congr_app bil.right_distrib Y)
    ‚ü®M‚ÇÅ.iso.inv.app _ x‚ÇÅ, M‚ÇÅ.iso.inv.app _ x‚ÇÅ', M‚ÇÇ.iso.inv.app _ x‚ÇÇ‚ü©,
  have h‚ÇÇ := congr_arg (M‚ÇÉ.iso.hom.app _) h,
  simp only [functor_to_types.comp, lift‚ÇÇ_app, pr‚ÇÅ‚ÇÇ_‚ÇÉ_app, pr‚ÇÉ_‚ÇÉ_app, has_coe_to_fun_Type,
    pr‚ÇÅ‚ÇÉ_‚ÇÉ_app, pr‚ÇÇ‚ÇÉ_‚ÇÉ_app, iso_hom_app_yoneda_operation_add_app] at h‚ÇÇ,
  convert h‚ÇÇ;
  { dsimp, simp only [functor_to_types.inv_hom_id_app_apply], },
end

@[simp]
lemma on_internal_presheaf_left_distrib
  (x‚ÇÅ : M‚ÇÅ.presheaf_type.obj Y) (x‚ÇÇ x‚ÇÇ': M‚ÇÇ.presheaf_type.obj Y) :
bil.œÜ.on_internal_presheaf_curry x‚ÇÅ (x‚ÇÇ + x‚ÇÇ') =
  bil.œÜ.on_internal_presheaf_curry x‚ÇÅ x‚ÇÇ + bil.œÜ.on_internal_presheaf_curry x‚ÇÅ x‚ÇÇ' :=
begin
  have h := congr_fun (nat_trans.congr_app bil.left_distrib Y)
    ‚ü®M‚ÇÅ.iso.inv.app _ x‚ÇÅ, M‚ÇÇ.iso.inv.app _ x‚ÇÇ, M‚ÇÇ.iso.inv.app _ x‚ÇÇ'‚ü©,
  have h‚ÇÇ := congr_arg (M‚ÇÉ.iso.hom.app _) h,
  simp only [functor_to_types.comp, lift‚ÇÇ_app, pr‚ÇÅ_‚ÇÉ_app, pr‚ÇÇ‚ÇÉ_‚ÇÉ_app,
    has_coe_to_fun_Type, pr‚ÇÅ‚ÇÇ_‚ÇÉ_app, pr‚ÇÅ‚ÇÉ_‚ÇÉ_app, iso_hom_app_yoneda_operation_add_app] at h‚ÇÇ,
  convert h‚ÇÇ;
  { dsimp, simp only [functor_to_types.inv_hom_id_app_apply], },
end

end yoneda_bilinear

end Ab

end internal

end concrete_category

end category_theory
