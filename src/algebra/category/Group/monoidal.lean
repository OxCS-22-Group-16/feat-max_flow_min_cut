import category_theory.monoidal.Mon_
import algebra.category.Group
import algebra.category.Ring
import linear_algebra.tensor_product
import category_theory.closed.monoidal
import category_theory.monoidal.Mod
import algebra.category.Module.basic

noncomputable theory

universes u v w

open category_theory category_theory.monoidal_category category_theory.limits

namespace AddCommGroup

@[simps] def to_int_linear_map {X Y : AddCommGroup.{u}} (f : X ‚ü∂ Y) : X ‚Üí‚Çó[‚Ñ§] Y :=
{ to_fun := f,
  map_add' := f.map_add,
  map_smul' := Œª n x, by rw [ring_hom.id_apply, map_zsmul] }

@[simps] def to_int_linear_map‚ÇÇ {X Y Z : AddCommGroup.{u}}
  (f : X ‚ü∂  of (Y ‚ü∂ Z)) : X ‚Üí‚Çó[‚Ñ§] (Y ‚Üí‚Çó[‚Ñ§] Z) :=
{ to_fun := Œª x,
  { to_fun := Œª y, (f x).to_fun y,
    map_add' := Œª y y', by rw [add_monoid_hom.to_fun_eq_coe, map_add],
    map_smul' := Œª r y, by rw [add_monoid_hom.to_fun_eq_coe, map_zsmul, ring_hom.id_apply] },
  map_add' := Œª x y,
  begin
    ext z,
    simp only [linear_map.coe_mk, linear_map.add_apply, add_monoid_hom.to_fun_eq_coe, map_add,
      add_monoid_hom.add_apply],
  end,
  map_smul' := Œª r x,
  begin
    ext z,
    simpa only [linear_map.coe_mk, linear_map.smul_apply, add_monoid_hom.to_fun_eq_coe, map_zsmul,
      ring_hom.id_apply],
  end }

namespace monoidal

namespace tensor_monoidal_category

open_locale zero_object tensor_product

def tensor_obj' (X Y : AddCommGroup.{u}) : AddCommGroup := AddCommGroup.of (X ‚äó[‚Ñ§] Y)

@[simps] def tensor_hom' {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : AddCommGroup.{u}} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  tensor_obj' X‚ÇÅ X‚ÇÇ ‚ü∂ tensor_obj' Y‚ÇÅ Y‚ÇÇ :=
(tensor_product.map (to_int_linear_map f) (to_int_linear_map g)).to_add_monoid_hom

lemma tensor_id' (X Y : AddCommGroup.{u}) : tensor_hom' (ùüô X) (ùüô Y) = ùüô (tensor_obj' X Y) :=
begin
  ext z,
  induction z using tensor_product.induction_on with _ _ x y ihx ihy,
  { rw [id_apply, map_zero] },
  { erw [tensor_product.map_tmul], },
  { rw [map_add, ihx, ihy, map_add], },
end

lemma tensor_comp' {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : AddCommGroup}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) :
  tensor_hom' (f‚ÇÅ ‚â´ g‚ÇÅ) (f‚ÇÇ ‚â´ g‚ÇÇ) = tensor_hom' f‚ÇÅ f‚ÇÇ ‚â´ tensor_hom' g‚ÇÅ g‚ÇÇ :=
begin
  ext1 z,
  induction z using tensor_product.induction_on with _ _ x y ihx ihy,
  { rw [comp_apply, map_zero, map_zero, map_zero], },
  { erw [tensor_product.map_tmul], },
  { rw [map_add, ihx, ihy, map_add], },
end

def tensor_unit' : AddCommGroup.{u} := AddCommGroup.of (ulift.{u} ‚Ñ§)

@[simps] def associator' (X Y Z : AddCommGroup) :
  tensor_obj' (tensor_obj' X Y) Z ‚âÖ tensor_obj' X (tensor_obj' Y Z) :=
{ hom :=
  { to_fun := (tensor_product.assoc ‚Ñ§ X Y Z),
    map_zero' := (tensor_product.assoc ‚Ñ§ X Y Z).map_zero,
    map_add' := (tensor_product.assoc ‚Ñ§ X Y Z).map_add },
  inv :=
  { to_fun := (tensor_product.assoc ‚Ñ§ X Y Z).symm,
    map_zero' := (tensor_product.assoc ‚Ñ§ X Y Z).symm.map_zero,
    map_add' := (tensor_product.assoc ‚Ñ§ X Y Z).symm.map_add },
  hom_inv_id' :=
  begin
    ext1,
    simp only [comp_apply, add_monoid_hom.coe_mk, linear_equiv.symm_apply_apply, id_apply],
  end,
  inv_hom_id' :=
  begin
    ext1,
    simp only [comp_apply, add_monoid_hom.coe_mk, linear_equiv.apply_symm_apply, id_apply],
  end }

lemma associator_naturality' {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : AddCommGroup}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
  tensor_hom' (tensor_hom' f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator' Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
  (associator' X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensor_hom' f‚ÇÅ (tensor_hom' f‚ÇÇ f‚ÇÉ) :=
begin
  ext1 z,
  induction z using tensor_product.induction_on with x y x y ihx ihy,
  { rw [map_zero, comp_apply, map_zero, map_zero], },
  { simp only [comp_apply, add_monoid_hom.coe_mk, linear_map.to_add_monoid_hom_coe,
      tensor_product.map_tmul, to_int_linear_map_apply],
    induction x using tensor_product.induction_on with a b a b iha ihb,
    { rw [tensor_product.zero_tmul, map_zero, map_zero, map_zero, map_zero], },
    { simp only [tensor_hom'_apply, tensor_product.map_tmul, to_int_linear_map_apply,
        associator'_hom_apply, tensor_product.assoc_tmul], },
    { simp only [map_add, iha, ihb, tensor_product.add_tmul], }, },
  { simp only [map_add, ihx, ihy], },
end

@[simps] def left_unitor' (X : AddCommGroup.{u}) :
  AddCommGroup.of (AddCommGroup.of (ulift.{u} ‚Ñ§) ‚äó[‚Ñ§] X) ‚âÖ X :=
{ hom :=
  { to_fun := tensor_product.lift
    { to_fun := Œª (z : ulift ‚Ñ§),
      { to_fun := Œª (x : X), ulift.down z ‚Ä¢ x,
        map_add' := Œª (x y : X), smul_add _ _ _,
        map_smul' := Œª (r : ‚Ñ§) (x : X), by rw [smul_comm, ring_hom.id_apply] },
      map_add' := Œª ‚ü®m‚ü© ‚ü®n‚ü©,
      begin
        ext1 x,
        simpa only [ulift.add_down, linear_map.coe_mk, linear_map.add_apply] using add_smul _ _ _,
      end,
      map_smul' := Œª r ‚ü®r'‚ü©,
      begin
        ext1 x,
        simpa only [zsmul_eq_mul, ulift.mul_down, ulift.int_cast_down, int.cast_id,
          linear_map.coe_mk, eq_int_cast, linear_map.mul_apply, module.End.int_cast_apply] using
          mul_smul _ _ _,
      end },
    map_zero' := map_zero _,
    map_add' := map_add _ },
  inv :=
  { to_fun := Œª x, ulift.up 1 ‚äó‚Çú x,
    map_zero' := tensor_product.tmul_zero _ _,
    map_add' := tensor_product.tmul_add _ },
  hom_inv_id' :=
  begin
    ext1,
    induction x using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero], },
    { simp only [comp_apply, add_monoid_hom.coe_mk, tensor_product.lift.tmul, linear_map.coe_mk,
        tensor_product.tmul_smul, id_apply],
      rw [tensor_product.smul_tmul'],
      congr' 1,
      ext1,
      simp only [ulift.smul_down, algebra.id.smul_eq_mul, mul_one], },
    { simp only [map_add, ha, hb] }
  end,
  inv_hom_id' :=
  begin
    ext1,
    simp only [comp_apply, add_monoid_hom.coe_mk, tensor_product.lift.tmul, linear_map.coe_mk,
      one_zsmul, id_apply],
  end }

@[simps] def right_unitor' (X : AddCommGroup.{u}) :
  AddCommGroup.of (X ‚äó[‚Ñ§] AddCommGroup.of (ulift.{u} ‚Ñ§)) ‚âÖ X :=
{ hom := (tensor_product.lift
  { to_fun := Œª (x : X),
    { to_fun := Œª z, ulift.down z ‚Ä¢ x,
      map_add' := Œª (a b : ulift ‚Ñ§), by { rw ‚Üêadd_smul, refl, },
      map_smul' := Œª (r : ‚Ñ§) ‚ü®r'‚ü©, by { rw [ring_hom.id_apply, ‚Üêsmul_assoc], refl, } },
    map_add' := Œª x y,
    begin
      ext1 ‚ü®m‚ü©,
      simp only [smul_add, linear_map.coe_mk, linear_map.add_apply],
    end,
    map_smul' := Œª r x,
    begin
      ext1 ‚ü®m‚ü©,
      simp only [linear_map.coe_mk, eq_int_cast, int.cast_id, linear_map.smul_apply],
      rw smul_comm,
    end }).to_add_monoid_hom,
  inv :=
  { to_fun := Œª x, x ‚äó‚Çú ulift.up 1,
    map_zero' := tensor_product.zero_tmul _ _,
    map_add' := Œª _ _, tensor_product.add_tmul _ _ _, },
  hom_inv_id' :=
  begin
    ext1 x,
    induction x using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero] },
    { simp only [linear_map.coe_mk, comp_apply, linear_map.to_add_monoid_hom_coe,
        tensor_product.lift.tmul, add_monoid_hom.coe_mk, id_apply],
      rw tensor_product.smul_tmul,
      congr' 1, ext1,
      simp only [ulift.smul_down, algebra.id.smul_eq_mul, mul_one], },
    { simp only [map_add, ha, hb], },
  end,
  inv_hom_id' :=
  begin
    ext1,
    simp only [linear_map.coe_mk, comp_apply, add_monoid_hom.coe_mk, one_zsmul, id_apply,
      linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul],
  end }

lemma left_unitor_naturality' {X Y : AddCommGroup} (f : X ‚ü∂ Y) :
  tensor_hom' (ùüô tensor_unit') f ‚â´ (left_unitor' Y).hom = (left_unitor' X).hom ‚â´ f :=
begin
  ext1 z,
  induction z using tensor_product.induction_on with x y x y ihx ihy,
  { simp only [map_zero], },
  { simp only [comp_apply, tensor_hom'_apply, tensor_product.map_tmul, to_int_linear_map_apply,
      id_apply, left_unitor'_hom_apply, tensor_product.lift.tmul, linear_map.coe_mk],
    rw map_zsmul f, },
  { simp only [map_add, ihx, ihy], },
end

lemma right_unitor_naturality' {X Y : AddCommGroup} (f : X ‚ü∂ Y) :
  tensor_hom' f (ùüô tensor_unit') ‚â´ (right_unitor' Y).hom = (right_unitor' X).hom ‚â´ f :=
begin
  ext1 z,
  induction z using tensor_product.induction_on with x y x y ihx ihy,
  { simp only [map_zero], },
  { simp only [right_unitor'_hom, comp_apply, tensor_hom'_apply, tensor_product.map_tmul,
      to_int_linear_map_apply, id_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
      linear_map.coe_mk],
    rw map_zsmul f, },
  { simp only [map_add, ihx, ihy], },
end

lemma pentagon' (W X Y Z : AddCommGroup) :
  tensor_hom' (associator' W X Y).hom (ùüô Z) ‚â´
    (associator' W (tensor_obj' X Y) Z).hom ‚â´ tensor_hom' (ùüô W) (associator' X Y Z).hom =
  (associator' (tensor_obj' W X) Y Z).hom ‚â´ (associator' W X (tensor_obj' Y Z)).hom :=
begin
  ext1 z,
  induction z using tensor_product.induction_on with x d x d ihx ihd,
  { simp only [map_zero] },
  { induction x using tensor_product.induction_on with x c x c ihx ihc,
    { simp only [map_zero, tensor_product.zero_tmul], },
    { induction x using tensor_product.induction_on with a b a b ihx ihy,
      { simp only [map_zero, tensor_product.zero_tmul], },
      { simp only [comp_apply, tensor_hom'_apply, tensor_product.map_tmul, to_int_linear_map_apply,
          associator'_hom_apply, tensor_product.assoc_tmul, id_apply], },
      { simp only [map_add, ihx, ihy, tensor_product.add_tmul], }, },
    { simp only [map_add, ihx, ihc, tensor_product.add_tmul], }, },
  { simp only [map_add, ihx, ihd] },
end

lemma triangle' (X Y : AddCommGroup) :
  (associator' X tensor_unit' Y).hom ‚â´ tensor_hom' (ùüô X) (left_unitor' Y).hom =
  tensor_hom' (right_unitor' X).hom (ùüô Y) :=
begin
  ext1 z,
  induction z using tensor_product.induction_on with x y x y ihx ihy,
  { simp only [map_zero] },
  { induction x using tensor_product.induction_on with x z x z ihx ihz,
    { simp only [map_zero, tensor_product.zero_tmul] },
    { simp only [comp_apply, associator'_hom_apply, tensor_product.assoc_tmul, tensor_hom'_apply,
        tensor_product.map_tmul, to_int_linear_map_apply, id_apply, left_unitor'_hom_apply,
        tensor_product.lift.tmul, linear_map.coe_mk, tensor_product.tmul_smul, right_unitor'_hom,
        linear_map.to_add_monoid_hom_coe],
      rw [tensor_product.smul_tmul', tensor_product.smul_tmul], },
    { simp only [map_add, ihx, ihz, tensor_product.add_tmul], }, },
  { simp only [map_add, ihx, ihy], },
end

end tensor_monoidal_category

section

open tensor_monoidal_category

@[simps] def tensor_monoidal_category : category_theory.monoidal_category AddCommGroup.{u} :=
{ tensor_obj := tensor_obj',
  tensor_hom := Œª _ _ _ _, tensor_hom',
  tensor_unit := tensor_unit',
  associator := associator',
  left_unitor := left_unitor',
  right_unitor := right_unitor',

  tensor_id' := tensor_id',
  tensor_comp' := Œª _ _ _ _ _ _, tensor_comp',
  associator_naturality' := Œª _ _ _ _ _ _, associator_naturality',
  left_unitor_naturality' := Œª _ _, left_unitor_naturality',
  right_unitor_naturality' := Œª _ _, right_unitor_naturality',
  pentagon' := pentagon',
  triangle' := triangle' }

end

local attribute [instance] tensor_monoidal_category

section closed

open tensor_product

@[simps] def ihom_obj' (A B : AddCommGroup.{u}) : AddCommGroup.{u} :=
of (A ‚ü∂ B)

@[simps] def ihom_map' (A : AddCommGroup.{u}) {X Y : AddCommGroup} (f : X ‚ü∂ Y) :
  (ihom_obj' A X ‚ü∂ ihom_obj' A Y) :=
{ to_fun := Œª (g : A ‚ü∂ X), g ‚â´ f,
  map_zero' := zero_comp,
  map_add' := Œª g‚ÇÅ g‚ÇÇ, preadditive.add_comp _ _ _ _ _ _ }

lemma ihom_map'_id (A X : AddCommGroup) : ihom_map' A (ùüô X) = ùüô (ihom_obj' A X) :=
begin
  ext g a y,
  simp only [ihom_map'_apply, category.comp_id, id_apply],
end

lemma ihom_map'_comp (A) {X Y Z : AddCommGroup} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  ihom_map' A (f ‚â´ g) = ihom_map' A f ‚â´ ihom_map' A g :=
begin
  ext g a y,
  simp only [ihom_map'_apply, comp_apply],
end

@[simps] def ihom (A : AddCommGroup.{u}) : AddCommGroup.{u} ‚•§ AddCommGroup.{u} :=
{ obj := ihom_obj' A,
  map := Œª _ _, ihom_map' A,
  map_id' := ihom_map'_id A,
  map_comp' := Œª _ _ _, ihom_map'_comp A }

namespace tensor_left_ihom_adj

@[simps] def hom_equiv'.from_tensor (A X Y : AddCommGroup.{u}) (f : (tensor_left A).obj X ‚ü∂ Y) :
  X ‚ü∂ (ihom A).obj Y :=
{ to_fun := Œª x, ({ to_fun := Œª a, a ‚äó‚Çú x,
    map_zero' := zero_tmul _ _,
    map_add' := Œª _ _, add_tmul _ _ _ } : A ‚ü∂ AddCommGroup.of (tensor_product ‚Ñ§ A X)) ‚â´ f,
  map_zero' := add_monoid_hom.ext $ Œª a,
  begin
    simp only [tmul_zero, comp_apply, add_monoid_hom.coe_mk, map_zero, ihom_obj'_str_zero_apply],
  end,
  map_add' := Œª x‚ÇÅ x‚ÇÇ, add_monoid_hom.ext $ Œª a,
  begin
    simp only [comp_apply, add_monoid_hom.coe_mk, ihom_obj'_str_add_apply, tmul_add, map_add],
  end }

@[simps] def hom_equiv'.to_tensor (A X Y : AddCommGroup.{u}) (f : X ‚ü∂ (ihom A).obj Y) :
  ((tensor_left A).obj X ‚ü∂ Y) :=
{ to_fun := tensor_product.lift
  { to_fun := Œª (a : A), to_int_linear_map
    ({ to_fun := Œª x, (f x).to_fun a,
      map_zero' := by rw [map_zero, add_monoid_hom.to_fun_eq_coe, ihom_obj'_str_zero_apply],
      map_add' := Œª x y, by rw [map_add, add_monoid_hom.to_fun_eq_coe, add_monoid_hom.to_fun_eq_coe,
        add_monoid_hom.to_fun_eq_coe, add_monoid_hom.add_apply] } : X ‚ü∂ Y),
    map_add' := Œª a‚ÇÅ a‚ÇÇ,
    begin
      ext x,
      simp only [add_monoid_hom.to_fun_eq_coe, map_add, to_int_linear_map_apply,
        add_monoid_hom.coe_mk, linear_map.add_apply],
    end,
    map_smul' := Œª z a,
    begin
      ext x,
      simp only [add_monoid_hom.to_fun_eq_coe, to_int_linear_map_apply, add_monoid_hom.coe_mk,
        eq_int_cast, int.cast_id, linear_map.smul_apply],
      rw map_zsmul,
    end },
  map_zero' := map_zero _,
  map_add' := Œª z‚ÇÅ z‚ÇÇ, map_add _ _ _ }

@[simps] def hom_equiv' (A X Y : AddCommGroup) : ((tensor_left A).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ (ihom A).obj Y) :=
{ to_fun := hom_equiv'.from_tensor A _ _,
  inv_fun := hom_equiv'.to_tensor A _ _,
  left_inv := Œª g,
  begin
    ext z,
    simp only [hom_equiv'.from_tensor_apply, add_monoid_hom.to_fun_eq_coe, comp_apply,
      add_monoid_hom.coe_mk, hom_equiv'.to_tensor_apply],
    induction z using tensor_product.induction_on,
    { simp only [map_zero] },
    { simp only [add_monoid_hom.coe_mk, lift.tmul, linear_map.coe_mk, to_int_linear_map_apply], },
    { simp only [map_add, *], },
  end,
  right_inv := Œª g,
  begin
    ext z,
    simp only [add_monoid_hom.to_fun_eq_coe, hom_equiv'.from_tensor_apply, comp_apply,
      add_monoid_hom.coe_mk, hom_equiv'.to_tensor_apply, lift.tmul, linear_map.coe_mk,
      to_int_linear_map_apply],
  end }

@[simps] def unit' (A : AddCommGroup.{u}) :
  ùü≠ AddCommGroup ‚ü∂ tensor_left A ‚ãô ihom A :=
{ app := Œª X,
  { to_fun := Œª (x : X),
    { to_fun := Œª a, a ‚äó‚Çú x,
      map_zero' := zero_tmul _ _,
      map_add' := Œª _ _, add_tmul _ _ _ },
    map_zero' := add_monoid_hom.ext $ Œª x, by simp only [tmul_zero, add_monoid_hom.coe_mk,
      ihom_obj'_str_zero_apply],
    map_add' := Œª (x x' : X), add_monoid_hom.ext $ Œª a,
    begin
      simpa only [add_monoid_hom.coe_mk, ihom_obj'_str_add_apply] using tmul_add _ _ _,
    end },
  naturality' := Œª X Y f,
  begin
    ext (x : X) a,
    simp only [add_monoid_hom.coe_mk, functor.id_map, comp_apply, functor.comp_map, tensor_left_map,
      tensor_monoidal_category_tensor_hom, ihom_map, ihom_map'_apply, map_tmul,  id_apply,
      tensor_monoidal_category.tensor_hom'_apply, to_int_linear_map_apply],
  end }

@[simps] def counit' (A : AddCommGroup.{u}) : ihom A ‚ãô tensor_left A ‚ü∂ ùü≠ AddCommGroup :=
{ app := Œª X, (tensor_product.lift
  { to_fun := Œª a,
    { to_fun := Œª (g : A ‚Üí+ X), g a,
      map_add' := Œª g h, add_monoid_hom.add_apply _ _ _,
      map_smul' := Œª (z : ‚Ñ§) g, by { simp only [add_monoid_hom.coe_smul, pi.smul_apply,
        eq_int_cast, int.cast_id], } },
    map_add' := Œª a b,
    begin
      ext g,
      simp only [map_add, linear_map.coe_mk, linear_map.add_apply],
    end,
    map_smul' := Œª (z : ‚Ñ§) a,
    begin
      ext g,
      simp only [eq_int_cast, int.cast_id, linear_map.coe_mk, linear_map.smul_apply],
      rw map_zsmul,
    end }).to_add_monoid_hom,
  naturality' := Œª X Y f,
  begin
    ext z,
    simp only [functor.comp_map, ihom_map, tensor_left_map, tensor_monoidal_category_tensor_hom,
      comp_apply, tensor_monoidal_category.tensor_hom'_apply, linear_map.to_add_monoid_hom_coe,
      functor.id_map],
    induction z using tensor_product.induction_on,
    { simp only [map_zero] },
    { simp only [linear_map.coe_mk, map_tmul, to_int_linear_map_apply, id_apply, ihom_map'_apply,
        lift.tmul, comp_apply] },
    { simp only [map_add, *] }
  end }

lemma hom_equiv_unit' (A : AddCommGroup.{u}) {X Y : AddCommGroup.{u}}
  {f : (tensor_left A).obj X ‚ü∂ Y} :
  (hom_equiv' A X Y) f = (unit' A).app X ‚â´ (ihom A).map f :=
begin
  ext x a,
  simp only [hom_equiv'_apply, hom_equiv'.from_tensor_apply, comp_apply, add_monoid_hom.coe_mk,
    ihom_map, ihom_map'_apply, unit'_app_apply_apply],
end

lemma hom_equiv_counit' (A : AddCommGroup.{u}) {X Y : AddCommGroup.{u}}
  {g : X ‚ü∂ (ihom A).obj Y} :
  ((hom_equiv' A X Y).symm) g = (tensor_left A).map g ‚â´ (counit' A).app Y :=
begin
  ext x a,
  simp only [add_monoid_hom.to_fun_eq_coe, hom_equiv'_symm_apply, hom_equiv'.to_tensor_apply,
    tensor_left_map, tensor_monoidal_category_tensor_hom, counit'_app, comp_apply,
    tensor_monoidal_category.tensor_hom'_apply, linear_map.to_add_monoid_hom_coe],
  induction x using tensor_product.induction_on,
  { simp only [map_zero] },
  { simp only [lift.tmul, linear_map.coe_mk, to_int_linear_map_apply, add_monoid_hom.coe_mk,
      map_tmul, id_apply] },
  { simp only [map_add, *] }
end

end tensor_left_ihom_adj

open tensor_left_ihom_adj

instance (A : AddCommGroup.{u}) : closed A :=
{ is_adj :=
  { right := ihom A,
    adj :=
    { hom_equiv := hom_equiv' A,
      unit := unit' A,
      counit := counit' A,
      hom_equiv_unit' := Œª _ _ _, hom_equiv_unit' A,
      hom_equiv_counit' := Œª _ _ _, hom_equiv_counit' A } } }

instance : monoidal_closed AddCommGroup.{u} :=
{ closed' := Œª A, infer_instance }

@[simps] def curry {A B C : AddCommGroup.{u}} (f : A ‚äó B ‚ü∂ C) : B ‚ü∂ of (A ‚ü∂ C) :=
hom_equiv'.from_tensor A B C f

@[simps] def curry' {A B C : AddCommGroup.{u}} (f : A ‚äó B ‚ü∂ C) : A ‚ü∂ of (B ‚ü∂ C) :=
{ to_fun := Œª a,
  { to_fun := Œª b, (curry f b).to_fun a,
    map_zero' := by rw [add_monoid_hom.to_fun_eq_coe, map_zero, zero_apply],
    map_add' := Œª x y, by simp only [add_monoid_hom.to_fun_eq_coe, map_add,
      add_monoid_hom.add_apply] },
  map_zero' := add_monoid_hom.ext $ Œª b, by simp only [add_monoid_hom.to_fun_eq_coe, map_zero,
    add_monoid_hom.coe_mk, ihom_obj'_str_zero_apply],
  map_add' := Œª x y, add_monoid_hom.ext $ Œª z, by simp only [add_monoid_hom.to_fun_eq_coe,
    curry_apply_apply, add_monoid_hom.coe_mk, ihom_obj'_str_add_apply, add_tmul, map_add] }

@[simps] def uncurry {A B C : AddCommGroup.{u}} (f : B ‚ü∂ of (A ‚ü∂ C)) : A ‚äó B ‚ü∂ C :=
hom_equiv'.to_tensor A B C f

@[simps] def uncurry' {A B C : AddCommGroup.{u}} (f : A ‚ü∂ of (B ‚ü∂ C)) : A ‚äó B ‚ü∂ C :=
(tensor_product.lift
  { to_fun := Œª a,
    { to_fun := Œª b, uncurry f (b ‚äó‚Çú a),
      map_add' := Œª x y, by rw [add_tmul, map_add],
      map_smul' := Œª (z : ‚Ñ§) x, by simp only [uncurry_apply, lift.tmul, ring_hom.id_apply,
        map_zsmul, linear_map.smul_apply] },
    map_add' :=
    begin
      intros a b,
      ext c,
      simp only [map_add, uncurry_apply, lift.tmul, linear_map.coe_mk, linear_map.add_apply],
    end,
    map_smul' :=
    begin
      intros z a,
      ext b,
      simp only [map_zsmul, linear_map.smul_apply, tmul_smul, linear_map.coe_mk, eq_int_cast,
        int.cast_id],
    end }).to_add_monoid_hom

end closed

section Mon_

instance (R : Mon_ AddCommGroup.{u}) : has_one R.X :=
‚ü®R.one (ulift.up 1 : of (ulift.{u} ‚Ñ§))‚ü©

lemma one_def {R : Mon_ AddCommGroup.{u}} : 1 = R.one (ulift.up 1) := rfl

instance (R : Mon_ AddCommGroup.{u}) : has_mul R.X :=
‚ü®Œª x y, R.mul (x ‚äó‚Çú y)‚ü©

lemma mul_def {R : Mon_ AddCommGroup.{u}} (x y : R.X) : x * y = R.mul (x ‚äó‚Çú y) := rfl

lemma one_mul' {R : Mon_ AddCommGroup.{u}} (x : R.X) : (1 : R.X) * x = x :=
begin
  rw [mul_def, one_def],
  convert add_monoid_hom.congr_fun R.one_mul (ulift.up 1 ‚äó‚Çú x),
  simp only [tensor_monoidal_category_left_unitor, tensor_monoidal_category.left_unitor'_hom_apply,
    tensor_product.lift.tmul, linear_map.coe_mk, one_zsmul],
end

lemma mul_one' {R : Mon_ AddCommGroup.{u}} (x : R.X) : x * (1 : R.X)= x :=
begin
  rw [mul_def, one_def],
  convert add_monoid_hom.congr_fun R.mul_one (x ‚äó‚Çú ulift.up 1),
  simp only [tensor_monoidal_category_right_unitor, tensor_monoidal_category.right_unitor'_hom,
    linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul, linear_map.coe_mk, one_zsmul],
end

lemma mul_assoc' {R : Mon_ AddCommGroup.{u}} (x y z : R.X) :
  x * y * z = x * (y * z) :=
add_monoid_hom.congr_fun R.mul_assoc ((x ‚äó‚Çú y) ‚äó‚Çú z)

lemma mul_add' {R : Mon_ AddCommGroup.{u}} (x y z : R.X) :
  x * (y + z) = x * y + x * z :=
begin
  rw [mul_def, mul_def, mul_def, ‚ÜêR.mul.map_add (x ‚äó‚Çú y) (x ‚äó‚Çú z)],
  congr,
  rw tensor_product.tmul_add,
end

lemma add_mul' {R : Mon_ AddCommGroup.{u}} (x y z : R.X) :
  (x + y) * z = x * z + y * z :=
begin
  rw [mul_def, mul_def, mul_def, ‚ÜêR.mul.map_add (x ‚äó‚Çú z) (y ‚äó‚Çú z)],
  congr,
  rw tensor_product.add_tmul,
end

def Mon_is_ring (R : Mon_ AddCommGroup.{u}) : ring R.X :=
{ one := 1,
  mul := (*),
  one_mul := one_mul',
  mul_one := mul_one',
  mul_assoc := mul_assoc',
  left_distrib := mul_add',
  right_distrib := add_mul',
  ..(infer_instance : add_comm_group R.X) }

local attribute [instance] Mon_is_ring

@[simps] def Mon_to_Ring : Mon_ AddCommGroup.{u} ‚•§ Ring.{u} :=
{ obj := Œª M, Ring.of M.X,
  map := Œª _ _ f,
  { to_fun := f.hom,
    map_one' := add_monoid_hom.congr_fun f.one_hom (ulift.up 1),
    map_mul' := Œª x y, add_monoid_hom.congr_fun f.mul_hom _,
  map_zero' := map_zero _,
  map_add' := map_add _ },
  map_id' := Œª M, ring_hom.ext $ Œª x,
  begin
    simp only [Mon_.id_hom', ring_hom.coe_mk, id_apply],
  end,
  map_comp' := Œª A B C f g, ring_hom.ext $ Œª x,
  begin
    simp only [Mon_.comp_hom', ring_hom.coe_mk, comp_apply],
  end }

lemma zmul_comm {R : Type u} [ring R] (x : R) (z : ‚Ñ§) :
  (z : R) * x = x * z :=
int.induction_on z (by simp only [algebra_map.coe_zero, zero_mul, mul_zero])
(Œª n hn, begin
  simp only [int.cast_add, int.cast_coe_nat, algebra_map.coe_one] at hn ‚ä¢,
  rw [add_mul, hn, one_mul, mul_add, mul_one],
end) $ Œª n hn, begin
  simp only [int.cast_sub, int.cast_neg, int.cast_coe_nat, algebra_map.coe_one, neg_mul, mul_neg, neg_inj] at hn ‚ä¢,
  rw [sub_mul, neg_mul, hn, one_mul, mul_sub, mul_one, mul_neg],
end

lemma one_map_ulift_int {A : Mon_ AddCommGroup.{u}} (z : ‚Ñ§) :
  A.one (ulift.up z) = z :=
begin
  induction z using int.induction_on with n hn n hn,
  { simpa only [algebra_map.coe_zero] using A.one.map_zero, },
  { simp only [int.cast_add, int.cast_coe_nat, algebra_map.coe_one] at hn ‚ä¢,
    erw [‚Üêhn, A.one.map_add (ulift.up n) (ulift.up 1)],
    congr' 1, },
  { simp only [int.cast_sub, int.cast_neg, int.cast_coe_nat, algebra_map.coe_one] at hn ‚ä¢,
    erw [‚Üêhn, A.one.map_sub (ulift.up (-n)) (ulift.up 1)],
    congr' 1 },
end

@[simps] def Ring_to_Mon_.obj (R : Ring.{u}) : Mon_ AddCommGroup.{u} :=
{ X := of R,
  one :=
  { to_fun := Œª (z : ulift ‚Ñ§), (algebra_map ‚Ñ§ R) z.down,
    map_zero' := map_zero _,
    map_add' := Œª ‚ü®m‚ü© ‚ü®n‚ü©, map_add _ _ _ },
  mul := (tensor_product.lift
  { to_fun := Œª x,
    { to_fun := Œª y, (x * y : R),
      map_add' := mul_add x,
      map_smul' := Œª (z : ‚Ñ§) r,
      begin
        rw [ring_hom.id_apply, zsmul_eq_mul, zsmul_eq_mul, ‚Üêmul_assoc, ‚Üêzmul_comm, mul_assoc],
      end },
    map_add' := Œª x y, linear_map.ext $ Œª z,
    begin
      simp only [linear_map.coe_mk, linear_map.add_apply],
      rw add_mul,
    end,
    map_smul' := Œª z r, begin
      rw [ring_hom.id_apply],
      ext1,
      simp only [zsmul_eq_mul, linear_map.coe_mk, linear_map.mul_apply, module.End.int_cast_apply],
      rw mul_assoc,
    end }).to_add_monoid_hom,
  one_mul' := begin
    ext1 z,
    induction z using tensor_product.induction_on with z x z x ihz ihx,
    { simp only [map_zero] },
    { simp only [zsmul_eq_mul, linear_map.coe_mk, eq_int_cast, tensor_monoidal_category_tensor_hom,
        comp_apply, tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
        to_int_linear_map_apply, add_monoid_hom.coe_mk, id_apply, linear_map.to_add_monoid_hom_coe,
        tensor_product.lift.tmul, tensor_monoidal_category_left_unitor,
        tensor_monoidal_category.left_unitor'_hom_apply], },
    { simp only [map_add, ihz, ihx], },
  end,
  mul_one' := begin
    ext1 z,
    induction z using tensor_product.induction_on with x z x z ihx ihz,
    { simp only [map_zero] },
    { simp only [zsmul_eq_mul, linear_map.coe_mk, eq_int_cast, tensor_monoidal_category_tensor_hom,
        comp_apply, tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul, id_apply,
        to_int_linear_map_apply, add_monoid_hom.coe_mk, linear_map.to_add_monoid_hom_coe,
        tensor_product.lift.tmul, tensor_monoidal_category_right_unitor,
        tensor_monoidal_category.right_unitor'_hom],
      rw zmul_comm, },
    { simp only [map_add, ihx, ihz], },
  end,
  mul_assoc' := begin
    ext1 z,
    induction z using tensor_product.induction_on with z c z c ihz ihc,
    { simp only [map_zero], },
    {
      simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_monoidal_category_tensor_hom,
        tensor_product.map_tmul, to_int_linear_map_apply, id_apply,
        tensor_monoidal_category.associator'_hom_apply],
      induction z using tensor_product.induction_on with z b z b ihz ihb,
      { simp only [map_zero, tensor_product.zero_tmul], },
      { simp only [linear_map.coe_mk, tensor_monoidal_category.tensor_hom'_apply,
          tensor_product.map_tmul, to_int_linear_map_apply, linear_map.to_add_monoid_hom_coe,
          tensor_product.lift.tmul, id_apply, tensor_monoidal_category_associator,
          tensor_monoidal_category.associator'_hom_apply, tensor_product.assoc_tmul],
        rw mul_assoc, },
      { simp only [map_add, ihz, ihb, tensor_product.add_tmul], }, },
    { simp only [map_add, ihz, ihc], },
  end }

@[simps] def Ring_to_Mon_ : Ring.{u} ‚•§ Mon_ AddCommGroup.{u} :=
{ obj := Ring_to_Mon_.obj,
  map := Œª X Y f,
  { hom := f.to_add_monoid_hom,
    one_hom' :=
    begin
      ext1 ‚ü®z‚ü©,
      simp only [ring_hom.to_add_monoid_hom_eq_coe, comp_apply, Ring_to_Mon_.obj_one_apply,
        eq_int_cast, ring_hom.coe_add_monoid_hom, map_int_cast],
    end,
    mul_hom' :=
    begin
      ext1 z,
      induction z using tensor_product.induction_on with x y x y hx hy,
      { simp only [map_zero], },
      { simp only [Ring_to_Mon_.obj_mul, ring_hom.to_add_monoid_hom_eq_coe, comp_apply,  map_mul,
          linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul, linear_map.coe_mk,
          ring_hom.coe_add_monoid_hom, tensor_monoidal_category_tensor_hom, to_int_linear_map_apply,
          tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul], },
      { simp only [map_add, hx, hy], },
    end },
  map_id' := Œª R,
  begin
    ext,
    simp only [ring_hom.to_add_monoid_hom_eq_coe, ring_hom.coe_add_monoid_hom, id_apply,
      Mon_.id_hom'],
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext,
    simp only [ring_hom.to_add_monoid_hom_eq_coe, comp_apply, ring_hom.coe_add_monoid_hom,
      Mon_.comp_hom'],
  end }

@[simps] def Mon_equiv_Ring.unit_iso.components_hom (A : Mon_ AddCommGroup.{u}) :
  A ‚ü∂ Ring_to_Mon_.obj (Ring.of A.X) :=
{ hom := add_monoid_hom.id _,
  one_hom' := add_monoid_hom.ext $ Œª ‚ü®z‚ü©,
  begin
    simp only [comp_apply, add_monoid_hom.id_apply],
    erw one_map_ulift_int,
    refl,
  end,
  mul_hom' := add_monoid_hom.ext $ Œª z, tensor_product.induction_on z
    (by simp only [map_zero]) (Œª (x : A.X) (y : A.X),
    begin
      rw [comp_apply, add_monoid_hom.id_apply, tensor_monoidal_category_tensor_hom,
        comp_apply, tensor_monoidal_category.tensor_hom', linear_map.to_add_monoid_hom_coe,
        tensor_product.map_tmul, to_int_linear_map_apply, to_int_linear_map_apply,
        add_monoid_hom.id_apply, add_monoid_hom.id_apply],
      change A.mul _ = (Ring_to_Mon_.obj (Ring.of A.X)).mul _,
      rw [Ring_to_Mon_.obj_mul, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
        linear_map.coe_mk, linear_map.coe_mk, mul_def],
    end) $ Œª x y h‚ÇÅ h‚ÇÇ, by simp only [map_add, h‚ÇÅ, h‚ÇÇ] }

@[simps] def Mon_equiv_Ring.unit_iso.components_inv (A : Mon_ AddCommGroup.{u}) :
  Ring_to_Mon_.obj (Ring.of A.X) ‚ü∂ A :=
{ hom := add_monoid_hom.id _,
  one_hom' := add_monoid_hom.ext $ Œª ‚ü®z‚ü©,
  begin
    simp only [comp_apply, add_monoid_hom.id_apply],
    change (Ring_to_Mon_.obj (Ring.of A.X)).one (ulift.up z) = A.one (ulift.up z),
    rw [Ring_to_Mon_.obj_one_apply, one_map_ulift_int z],
    refl,
  end,
  mul_hom' := add_monoid_hom.ext $ Œª z, tensor_product.induction_on z
    (by simp only [map_zero]) (Œª (x y : A.X),
    begin
      rw [comp_apply, add_monoid_hom.id_apply, tensor_monoidal_category_tensor_hom, comp_apply,
        tensor_monoidal_category.tensor_hom', linear_map.to_add_monoid_hom_coe,
        tensor_product.map_tmul, to_int_linear_map_apply, to_int_linear_map_apply,
        add_monoid_hom.id_apply, add_monoid_hom.id_apply],
      change (Ring_to_Mon_.obj (Ring.of A.X)).mul _ = A.mul _,
      rw [Ring_to_Mon_.obj_mul, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
        linear_map.coe_mk, linear_map.coe_mk, mul_def],
    end) $ Œª a b ha hb, by simp only [map_add, ha, hb] }


@[simps] def Mon_equiv_Ring.unit_iso :
  ùü≠ (Mon_ AddCommGroup.{u}) ‚âÖ Mon_to_Ring.{u} ‚ãô Ring_to_Mon_.{u} :=
nat_iso.of_components (Œª A,
{ hom := Mon_equiv_Ring.unit_iso.components_hom A,
  inv := Mon_equiv_Ring.unit_iso.components_inv A,
  hom_inv_id' :=
  begin
    ext,
    simp only [Mon_.comp_hom', comp_apply, Mon_.id_hom', id_apply],
    refl,
  end,
  inv_hom_id' :=
  begin
    ext,
    simp only [Mon_.comp_hom', comp_apply, Mon_.id_hom', id_apply],
    refl,
  end }) $ Œª X Y f,
begin
  ext,
  simp only [Mon_.comp_hom', comp_apply, functor.id_map, functor.comp_map, Ring_to_Mon__map_hom,
    ring_hom.to_add_monoid_hom_eq_coe, ring_hom.coe_add_monoid_hom, Mon_to_Ring_map_apply],
  refl,
end

@[simps] def Mon_equiv_Ring.counit_iso.component_hom (R : Ring.{u}) :
  Ring.of (Ring_to_Mon_.obj R).X ‚ü∂ R :=
{ to_fun := Œª x, x,
  map_one' :=
  begin
    rw [one_def],
    change (algebra_map _ _) _ = _,
    rw map_one,
  end,
  map_mul' := Œª x y, by rw [mul_def, Ring_to_Mon_.obj_mul, linear_map.to_add_monoid_hom_coe,
    tensor_product.lift.tmul, linear_map.coe_mk, linear_map.coe_mk],
  map_zero' := rfl,
  map_add' := Œª _ _, rfl }

@[simps] def Mon_equiv_Ring.counit_iso.component_inv (R : Ring.{u}) :
  R ‚ü∂ Ring.of (Ring_to_Mon_.obj R).X :=
{ to_fun := Œª x, x,
  map_one' :=
  begin
    rw one_def,
    change _ = (algebra_map _ _) _,
    rw (algebra_map _ _).map_one,
  end,
  map_mul' := Œª x y, by erw [mul_def, Ring_to_Mon_.obj_mul, linear_map.to_add_monoid_hom_coe,
    tensor_product.lift.tmul, linear_map.coe_mk],
  map_zero' := rfl,
  map_add' := Œª _ _, rfl }

@[simps] def Mon_equiv_Ring.counit_iso :
  Ring_to_Mon_ ‚ãô Mon_to_Ring ‚âÖ ùü≠ Ring.{u} :=
nat_iso.of_components (Œª R,
{ hom := Mon_equiv_Ring.counit_iso.component_hom _,
  inv := Mon_equiv_Ring.counit_iso.component_inv _,
  hom_inv_id' :=
  begin
    ext,
    simp only [comp_apply, Mon_equiv_Ring.counit_iso.component_hom_apply,
      Mon_equiv_Ring.counit_iso.component_inv_apply, id_apply],
  end,
  inv_hom_id' :=
  begin
    ext,
    simp only [comp_apply, Mon_equiv_Ring.counit_iso.component_inv_apply,
      Mon_equiv_Ring.counit_iso.component_hom_apply, id_apply],
  end }) $ Œª X Y f,
begin
  ext,
  simp only [comp_apply, Mon_equiv_Ring.counit_iso.component_hom_apply, functor.comp_map,
    Mon_to_Ring_map_apply, Ring_to_Mon__map_hom, ring_hom.to_add_monoid_hom_eq_coe,
    ring_hom.coe_add_monoid_hom, functor.id_map],
end

@[simps] def Mon_equiv_Ring : Mon_ AddCommGroup.{u} ‚âå Ring.{u} :=
{ functor := Mon_to_Ring,
  inverse := Ring_to_Mon_,
  unit_iso := Mon_equiv_Ring.unit_iso,
  counit_iso := Mon_equiv_Ring.counit_iso,
  functor_unit_iso_comp' := Œª A,
  begin
    ext,
    simp only [comp_apply, Mon_to_Ring_map_apply, Mon_equiv_Ring.unit_iso_hom_app_hom_apply,
      Mon_equiv_Ring.counit_iso_hom_app_apply, id_apply],
  end }

end Mon_

section Mod

variables (R : Mon_ AddCommGroup) (M : Mod R)

instance has_smul_Mon_Mod : has_smul (Mon_to_Ring.obj R) M.X :=
{ smul := Œª r x, M.act (r ‚äó‚Çú x) }

instance mul_action_Mon_Mod : mul_action (Mon_to_Ring.obj R) M.X :=
{ one_smul := Œª x,
  begin
    convert fun_like.congr_fun M.one_act ((ulift.up 1 : ulift ‚Ñ§) ‚äó‚Çú x),
    simp only [tensor_monoidal_category_left_unitor, linear_map.coe_mk, one_zsmul,
      tensor_monoidal_category.left_unitor'_hom_apply, tensor_product.lift.tmul],
  end,
  mul_smul := Œª x y b, fun_like.congr_fun M.assoc ((x ‚äó‚Çú y) ‚äó‚Çú b),
  ..AddCommGroup.monoidal.has_smul_Mon_Mod R M }

instance distrib_mul_action_Mon_Mod : distrib_mul_action (Mon_to_Ring.obj R) M.X :=
{ smul_zero := Œª r, show (M.act) (r ‚äó‚Çú 0) = 0, by rw [tensor_product.tmul_zero, map_zero],
  smul_add := Œª r x y, show M.act _ = M.act _ + M.act _, by rw [tensor_product.tmul_add, map_add],
  ..AddCommGroup.monoidal.mul_action_Mon_Mod R M }

instance module_Mon_Mod : module (Mon_to_Ring.obj R) M.X :=
{ add_smul := Œª r x y, show M.act _ = M.act _ + M.act _, by rw [tensor_product.add_tmul, map_add],
  zero_smul := Œª x, show M.act _ = _, by rw [tensor_product.zero_tmul, map_zero],
  ..AddCommGroup.monoidal.distrib_mul_action_Mon_Mod R M }

def Module_from_Mod_obj (M : Mod R) : Module (Mon_to_Ring.obj R) :=
Module.of _ M.X

@[simps] def Module_from_Mod_map {M M' : Mod R} (f : M ‚ü∂ M') :
  Module_from_Mod_obj _ M ‚ü∂ Module_from_Mod_obj _ M' :=
{ to_fun := Œª x, f.hom x,
  map_add' := f.hom.map_add,
  map_smul' := Œª r x, fun_like.congr_fun f.act_hom (r ‚äó‚Çú x) }

@[simps] def Module_from_Mod : Mod R ‚•§ Module (Mon_to_Ring.obj R) :=
{ obj := Module_from_Mod_obj _,
  map := Œª _ _, Module_from_Mod_map _,
  map_id' := Œª M,
  begin
    ext,
    simp only [Module_from_Mod_map_apply, Mod.id_hom', id_apply],
  end,
  map_comp' := Œª M M' M'' f g,
  begin
    ext,
    simp only [Module_from_Mod_map_apply, Mod.comp_hom', comp_apply],
  end }

end Mod

end monoidal

end AddCommGroup
