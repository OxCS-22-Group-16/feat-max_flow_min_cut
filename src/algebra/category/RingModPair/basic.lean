/-
Copyright (c) 2021 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import algebra.category.Ring.basic
import algebra.category.Module.change_of_rings

/-!
# The category of ring-module pair

`RingModPair` is the category of pairs of the shape `(R, M)` where `R` is
a ring and `M` is an `R`-module. A morphism between `M1 = (R, M)`
and `M2 = (S, N)` is a pair of morphism `(f, g)` where `f : R ‚ü∂ S` is a ring
homomorphism and `g : M ‚ü∂ f* N` is a module homomorphism (linear map).
-/

namespace category_theory

open category_theory.Module

section RingModPair

universes u v

/--
A ring-module pair is a pair `(R, M)` such that `R : Ring` and `M` is an `R`-module.
-/
@[nolint has_inhabited_instance]
structure RingModPair :=
(ring : Ring.{u})
(mod : Module.{v} ring)

namespace RingModPair

/--
A morphism between `M1 = (R, M)`
and `M2 = (S, N)` is a pair of morphism `(f, g)` where `f : R ‚ü∂ S` is a ring
homomorphism and `g : M ‚ü∂ f* N` is a module homomorphism (linear map)
-/
def hom (P Q : RingModPair) :=
Œ£ (ring_hom : P.ring ‚ü∂ Q.ring),
  P.mod ‚ü∂ (category_theory.Module.restrict_scalars ring_hom).obj Q.mod

instance : category RingModPair :=
{ hom := hom,
  id := Œª P, sigma.mk (ùüô _)
  { to_fun := Œª x, x,
    map_add' := Œª _ _, rfl,
    map_smul' := Œª _ _, rfl },
  comp := Œª X Y Z f g, sigma.mk (f.1 ‚â´ g.1)
  { to_fun := Œª x, g.2 $ f.2 x,
    map_add' := Œª x y, by simp only [map_add],
    map_smul' := Œª r x,
      by simp only [map_smul, ring_hom.id_apply, restrict_scalars.smul_def, comp_apply] },
  id_comp' := Œª X Y ‚ü®f, g‚ü©, sigma.ext (category.id_comp _) $ heq_of_eq $ linear_map.ext $ Œª x, rfl,
  comp_id' := Œª X Y ‚ü®f, g‚ü©, sigma.ext (category.comp_id _) $ heq_of_eq $ linear_map.ext $ Œª x, rfl,
  assoc' := Œª A B C D ‚ü®a, b‚ü© ‚ü®c, d‚ü© ‚ü®e, f‚ü©, sigma.ext (category.assoc _ _ _) $ heq_of_eq $
    linear_map.ext $ Œª x, rfl }

/--
The underlying ring homomorphism of a morphism between two ring-module pairs.
-/
def hom.ring_hom {P Q : RingModPair} (f : P ‚ü∂ Q) : P.ring ‚ü∂ Q.ring := f.1
/--
The underlying module homomorphism of a morphism between two ring-module pairs.
-/
def hom.mod_hom {P Q : RingModPair} (f : P ‚ü∂ Q) :
  P.mod ‚ü∂ (category_theory.Module.restrict_scalars f.ring_hom).obj Q.mod := f.2

/--
The canonical functor sending a ring-module pair to its underlying ring
-/
def forget_to_Ring : RingModPair ‚•§ Ring :=
{ obj := Œª P, P.ring,
  map := Œª _ _ f, f.ring_hom,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

/--
The canonical functor sending a ring-module pair to its underlying abelian group
-/
def forget_to_Ab : RingModPair ‚•§ Ab :=
{ obj := Œª P, ‚ü®P.mod‚ü©,
  map := Œª _ _ f, f.mod_hom.to_add_monoid_hom,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

end RingModPair

end RingModPair

end category_theory
