import topology.algebra.infinite_sum

noncomputable theory
open finset filter function classical
open_locale topology classical big_operators nnreal

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

section has_prod
variables [comm_monoid Œ±] [topological_space Œ±]

def has_prod (f : Œ≤ ‚Üí Œ±) (a : Œ±) : Prop := tendsto (Œªs:finset Œ≤, ‚àè b in s, f b) at_top (ùìù a)

/-- `proddable f` means that `f` has some (infinite) product. Use `tprod` to get the value. -/
def proddable (f : Œ≤ ‚Üí Œ±) : Prop := ‚àÉa, has_prod f a

/-- `‚àè' i, f i` is the product of `f` it exists, or 1 otherwise -/
@[irreducible] def tprod {Œ≤} (f : Œ≤ ‚Üí Œ±) := if h : proddable f then classical.some h else 1

notation `‚àè'` binders `, ` r:(scoped:67 f, tprod f) := r

lemma proddable.has_prod {f : Œ≤ ‚Üí Œ±} (ha : proddable f) : has_prod f (‚àè' b, f b) :=
by simp [ha, tprod]; exact some_spec ha

lemma has_prod.proddable {f : Œ≤ ‚Üí Œ±} {a : Œ±} (h : has_prod f a) : proddable f := ‚ü®a, h‚ü©

lemma has_sum_of_mul_iff_has_prod {f : Œ≤ ‚Üí Œ±} {a : Œ±} :
  has_sum (additive.of_mul ‚àò f) (additive.of_mul a) ‚Üî has_prod f a := iff.rfl

lemma summable_of_mul_iff_proddable {f : Œ≤ ‚Üí Œ±} :
  summable (additive.of_mul ‚àò f) ‚Üî proddable f := iff.rfl

lemma tsum_of_mul_eq_of_mul_tprod (f : Œ≤ ‚Üí Œ±) :
  ‚àë' i, additive.of_mul (f i) = additive.of_mul (‚àè' i, f i) :=
begin
  rw [tprod, tsum],
  by_cases h : proddable f,
  { rw [dif_pos h, dif_pos],
    refl },
  { rw [dif_neg h, dif_neg],
    { refl },
    { rwa summable_of_mul_iff_proddable } }
end

lemma to_mul_tsum_of_mul_eq_tprod (f : Œ≤ ‚Üí Œ±) :
  additive.to_mul (‚àë' i, additive.of_mul (f i)) = ‚àè' i, f i := tsum_of_mul_eq_of_mul_tprod f

lemma proddable_of_zero {R : Type*} [comm_semiring R] [topological_space R]
  (f : Œ≤ ‚Üí R) (hf : ‚àÉ b, f b = 0) : proddable f :=
begin
  refine ‚ü®0, _‚ü©,
  obtain ‚ü®b, hb‚ü© := hf,
  rw has_prod,
  rw tendsto_at_top_nhds,
  intros U hU hU',
  refine ‚ü®{b}, Œª V hV, _‚ü©,
  have hb' : b ‚àà V := singleton_subset_iff.mp hV,
  rwa prod_eq_zero hb' hb
end

lemma has_prod.mul_compl [has_continuous_mul Œ±] {s : set Œ≤} {f : Œ≤ ‚Üí Œ±} {a b : Œ±}
  (ha : has_prod (f ‚àò coe : s ‚Üí Œ±) a) (hb : has_prod (f ‚àò coe : s·∂ú ‚Üí Œ±) b) :
  has_prod f (a * b) :=
begin
  have : ‚àÄ Œ± (g : Œ± ‚Üí Œ≤), additive.to_mul ‚àò f ‚àò g = (additive.to_mul ‚àò f) ‚àò g,
  { intros, refl },
  rw ‚Üêhas_sum_of_mul_iff_has_prod at ha hb ‚ä¢,
  replace ha : has_sum ((additive.of_mul ‚àò f) ‚àò (coe : s ‚Üí Œ≤)) (additive.of_mul a),
  { exact ha },
  replace hb : has_sum ((additive.of_mul ‚àò f) ‚àò (coe : s·∂ú ‚Üí Œ≤)) (additive.of_mul b),
  { exact hb },
  exact ha.add_compl hb
end

lemma proddable.mul_compl [has_continuous_mul Œ±] {s : set Œ≤} {f : Œ≤ ‚Üí Œ±}
  (hs : proddable (f ‚àò coe : s ‚Üí Œ±)) (hsc : proddable (f ‚àò coe : s·∂ú ‚Üí Œ±)) :
  proddable f :=
(hs.has_prod.mul_compl hsc.has_prod).proddable

end has_prod
