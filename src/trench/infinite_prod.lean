import analysis.specific_limits.basic
import topology.algebra.infinite_sum
import trench.prod_le_sum

noncomputable theory
open finset filter function classical
open_locale topology classical big_operators nnreal filter

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

section
variables [comm_monoid Œ±] [topological_space Œ±]

structure has_prod (f : Œ≤ ‚Üí Œ±) (a : Œ±) : Prop :=
(finite_not_unit : {b | ¬¨ is_unit (f b)}.finite)
(tendsto_units : ‚àÉ x : Œ±À£, tendsto
  (Œª s : finset Œ≤, ‚àè b in (s.filter (Œª i, is_unit (f i))), f b) at_top (ùìù x))
(prod_eq : a = tendsto_units.some * ‚àè b in finite_not_unit.to_finset, f b)

def converges_prod (f : Œ≤ ‚Üí Œ±) : Prop := ‚àÉ (a : Œ±), has_prod f a

lemma has_prod_is_empty [t2_space Œ±] [h : is_empty Œ≤] (f : Œ≤ ‚Üí Œ±) :
  has_prod f 1 :=
begin
  have : tendsto (Œª (s : finset Œ≤), ‚àè (b : Œ≤) in filter (Œª (i : Œ≤), is_unit (f i)) s, f b)
    at_top (ùìù 1),
  { have : ‚àÄ (s : finset Œ≤), ‚àè i in s, f i = 1,
    { intro s,
      suffices : s = ‚àÖ,
      { simp [this] },
      ext x,
      exact h.elim x },
    simp [this, tendsto_const_nhds] },
  refine ‚ü®set.finite_univ.subset (set.subset_univ _), ‚ü®1, this‚ü©, _‚ü©,
  generalize_proofs H,
  rw tendsto_nhds_unique (Exists.some_spec H) this,
  simp
end

lemma has_prod_unique [t2_space Œ±] [unique Œ≤] (f : Œ≤ ‚Üí Œ±) :
  has_prod f (f default) :=
begin
  by_cases hf : is_unit (f default),
  { have : tendsto (Œª (s : finset Œ≤), ‚àè (b : Œ≤) in filter (Œª (i : Œ≤), is_unit (f i)) s, f b)
      at_top (ùìù (f default)),
    { rw order_top.at_top_eq,
      simp only [prod_filter, tendsto_pure_left, hf, top_eq_univ, fintype.univ_of_subsingleton,
                 is_unit.unit_spec, prod_singleton, if_true, mem_nhds_iff, exists_prop,
                 forall_exists_index, and_imp],
      intros s t hst _ hm,
      exact hst hm },
    refine ‚ü®set.finite_empty.subset _, ‚ü®hf.unit, this‚ü©, _‚ü©,
    { intro x,
      simp [hf, subsingleton.elim x default] },
    { generalize_proofs H,
      rw tendsto_nhds_unique this (Exists.some_spec H),
      simp [prod_filter, hf] } },
  { have : tendsto (Œª (s : finset Œ≤), ‚àè (b : Œ≤) in filter (Œª (i : Œ≤), is_unit (f i)) s, f b)
      at_top (ùìù 1),
    { have : ‚àÄ (s : finset Œ≤), ‚àè i in (s.filter (Œª i, is_unit (f i))), f i = 1,
      { intro s,
        suffices : s.filter (Œª i, is_unit (f i)) = ‚àÖ,
        { simp [this] },
        ext x,
        simp [hf, subsingleton.elim x default] },
      simp [this, tendsto_const_nhds] },
    refine ‚ü®set.finite_univ.subset (set.subset_univ _), ‚ü®1, this‚ü©, _‚ü©,
    generalize_proofs H,
    rw tendsto_nhds_unique (Exists.some_spec H) this,
    simp [prod_filter, hf] }
end

lemma has_prod_zero_iff_converges_prod_and_exists_zero {f : Œ≤ ‚Üí ‚Ñù} :
  has_prod f 0 ‚Üî converges_prod f ‚àß ‚àÉ i, f i = 0 :=
begin
  split,
  { intro h,
    have := h.prod_eq,
    simp only [zero_eq_mul, false_or, prod_eq_zero_iff, units.ne_zero, set.finite.mem_to_finset,
               set.mem_set_of_eq, exists_prop] at this,
    obtain ‚ü®i, -, hi‚ü© := this,
    exact ‚ü®‚ü®_, h‚ü©, i, hi‚ü© },
  { rintro ‚ü®‚ü®a, hf‚ü©, i, h‚ü©,
    refine ‚ü®hf.finite_not_unit, hf.tendsto_units, _‚ü©,
    simp only [prod_eq_zero_iff, zero_eq_mul, units.ne_zero, set.finite.mem_to_finset,
               set.mem_set_of_eq, exists_prop, false_or],
    use i,
    simp [h] }
end

lemma has_prod_ratio {f : Œ≤ ‚Üí ‚Ñù} {a : ‚Ñù} (hf : has_prod f a) :
  tendsto (Œª sb : finset Œ≤ √ó Œ≤, (
      ‚àè b in ((insert sb.2 sb.1).filter (Œª i, is_unit (f i))), f b) /
      ‚àè b in (sb.1.filter (Œª i, is_unit (f i))), f b)
    (at_top.comap prod.fst) (ùìù 1) :=
begin
  obtain ‚ü®x, hx‚ü© := hf.tendsto_units,
  rw ‚Üêdiv_self x.ne_zero,
  simp_rw div_eq_mul_inv,
  refine tendsto.mul _ ((real.tendsto_inv x.ne_zero).comp _),
  { intros U hU,
    specialize hx hU,
    simp only [filter.mem_map, mem_comap, mem_at_top_sets, ge_iff_le, le_eq_subset,
               exists_prop] at hx ‚ä¢,
    obtain ‚ü®s, hs‚ü© := hx,
    simp only [set.mem_preimage] at hs,
    set s' : set (finset Œ≤) := (Œª t, s ‚à™ t) '' set.univ with hs',
    refine ‚ü®s', ‚ü®s, _‚ü©, _‚ü©,
    { simp only [hs', set.image_univ, set.mem_range],
      intros t ht,
      refine ‚ü®t \ s, _‚ü©,
      simp [ht] },
    simp only [hs', set.image_univ],
    rintro ‚ü®t, b‚ü©,
    simp only [set.mem_preimage, set.mem_range, forall_exists_index],
    rintro x rfl,
    refine hs _ _,
    exact (subset_union_left _ _).trans (subset_insert _ _) },
  { refine (hx.comp tendsto_comap).congr _,
    simp }
end

lemma has_prod_ratio' {f : Œ≤ ‚Üí ‚Ñù} {a : ‚Ñù} (hf : has_prod f a) :
  tendsto (Œª sb : finset Œ≤ √ó finset Œ≤, (
      ‚àè b in ((sb.1 ‚à™ sb.2).filter (Œª i, is_unit (f i))), f b) /
      ‚àè b in (sb.1.filter (Œª i, is_unit (f i))), f b)
    at_top (ùìù 1) :=
begin
  obtain ‚ü®x, hx‚ü© := hf.tendsto_units,
  rw ‚Üêdiv_self x.ne_zero,
  simp_rw div_eq_mul_inv,
  refine tendsto.mul _ ((real.tendsto_inv x.ne_zero).comp _),
  { intros U hU,
    specialize hx hU,
    simp only [filter.mem_map, mem_at_top_sets, ge_iff_le, le_eq_subset, set.mem_preimage,
               prod.forall, prod.exists, prod.mk_le_mk, and_imp] at hx ‚ä¢,
    obtain ‚ü®s, hs‚ü© := hx,
    exact ‚ü®s, ‚àÖ, Œª s' t' hs' ht', hs _ (hs'.trans (subset_union_left _ _))‚ü© },
  { rw ‚Üêprod_at_top_at_top_eq,
    exact (hx.comp tendsto_fst) }
end

@[to_additive]
def prod_induction [comm_monoid Œ≥] {C : Œ≥ ‚Üí Prop} (s : finset Œ≤) (f : Œ≤ ‚Üí Œ≥) (h1 : C 1)
  (hmul : ‚àÄ (a ‚àà s) b, C b ‚Üí C (f a * b)) : C (s.prod f) :=
begin
  induction s using finset.cons_induction_on with a s ha IH,
  { exact h1 },
  { rw prod_cons ha,
    refine hmul _ (mem_cons_self _ _) _ (IH _),
    intros a ha,
    exact hmul _ (mem_cons.mpr (or.inr ha)) }
end

@[to_additive]
lemma is_unit_prod [comm_monoid Œ≥] (s : finset Œ≤) (f : Œ≤ ‚Üí Œ≥) (hs : ‚àÄ b ‚àà s, is_unit (f b)) :
  is_unit (s.prod f) :=
prod_induction _ _ is_unit_one (Œª a ha b hb, (hs _ ha).mul hb)

attribute [to_additive] is_unit.decidable

@[to_additive]
lemma is_unit_prod_filter [comm_monoid Œ≥] (s : finset Œ≤) (f : Œ≤ ‚Üí Œ≥) :
  is_unit ((s.filter (Œª b, is_unit (f b))).prod f) :=
is_unit_prod _ _ (by simp)

lemma is_unit.inf [monoid Œ≥] [linear_order Œ≥] {x y : Œ≥} (hx : is_unit x) (hy : is_unit y) :
  is_unit (x ‚äì y) :=
begin
  cases le_total x y with h;
  simp [h, hx, hy]
end

lemma is_unit.sup [monoid Œ≥] [linear_order Œ≥] {x y : Œ≥} (hx : is_unit x) (hy : is_unit y) :
  is_unit (x ‚äî y) :=
@is_unit.inf Œ≥·µí·µà _ _ _ _  hx hy

-- lemma is_unit_supr [monoid Œ≥] [conditionally_complete_lattice Œ≥] {f : Œ≤ ‚Üí Œ≥}
--   (hf : ‚àÄ i, is_unit (f i)) :
--   is_unit (‚®Ü i, f i) :=
-- begin
--   refine (is_unit.mem_submonoid_iff (‚®Ü (i : Œ≤), f i)).mp _,
-- end

lemma converges_prod_fintype [fintype Œ≤] (f : Œ≤ ‚Üí Œ±) :
  converges_prod f :=
begin
  have : ‚àÉ x : Œ±À£, tendsto
    (Œª s : finset Œ≤, ‚àè b in (s.filter (Œª i, is_unit (f i))), f b) at_top (ùìù x),
  { refine ‚ü®is_unit.unit (is_unit_prod_filter univ f), _‚ü©,
    simp [order_top.at_top_eq, tendsto_pure_left, mem_of_mem_nhds] { contextual := tt } },
  exact ‚ü®_, set.finite_univ.subset (set.subset_univ _), this, rfl‚ü©
end

lemma summable_fintype [add_comm_monoid Œ≥] [topological_space Œ≥] [fintype Œ≤] (f : Œ≤ ‚Üí Œ≥) :
  summable f :=
begin
  refine ‚ü®univ.sum f, _‚ü©,
  simp [has_sum, order_top.at_top_eq, tendsto_pure_left, mem_of_mem_nhds] { contextual := tt }
end

@[simp] lemma converges_prod_subsingleton [subsingleton Œ≤] (f : Œ≤ ‚Üí Œ±) :
  converges_prod f :=
begin
  casesI is_empty_or_nonempty Œ≤,
  { haveI : fintype Œ≤ := fintype.of_is_empty,
    exact converges_prod_fintype _ },
  { inhabit Œ≤,
    haveI : fintype Œ≤ := fintype.of_subsingleton default,
    exact converges_prod_fintype _ }
end

@[simp] lemma summable_subsingleton [add_comm_monoid Œ≥] [topological_space Œ≥] [subsingleton Œ≤] (f : Œ≤ ‚Üí Œ≥) :
  summable f :=
begin
  casesI is_empty_or_nonempty Œ≤,
  { haveI : fintype Œ≤ := fintype.of_is_empty,
    exact summable_fintype _ },
  { inhabit Œ≤,
    haveI : fintype Œ≤ := fintype.of_subsingleton default,
    exact summable_fintype _ }
end

lemma converges_prod.vanishing {f : Œ≤ ‚Üí ‚Ñù} (hf : converges_prod f) ‚¶Ée : set ‚Ñù‚¶Ñ
  (he : e ‚àà ùìù (1 : ‚Ñù)) : ‚àÉ s : finset Œ≤, ‚àÄ t, disjoint t s ‚Üí ‚àè k in t, f k ‚àà e :=
begin
  rcases hf with ‚ü®x, hf‚ü©,
  have := has_prod_ratio hf,
  have h := has_prod_ratio' hf he,
  simp only [filter.mem_map, mem_comap, mem_at_top_sets, ge_iff_le, le_eq_subset, exists_prop,
             set.preimage_subset_iff, set.mem_preimage, prod.forall] at h,
  simp only [prod.exists, prod.mk_le_mk, le_eq_subset, and_imp] at h,
  obtain ‚ü®s, t, h‚ü© := h,
  refine ‚ü®s ‚à™ t ‚à™ hf.finite_not_unit.to_finset, Œª u hdisj, _‚ü©,
  specialize h (s ‚à™ (t ‚à™ hf.finite_not_unit.to_finset)) (t ‚à™ u)
    (subset_union_left _ _) (subset_union_left _ _),
  simp_rw [union_assoc s, union_left_comm, ‚Üêunion_assoc t, union_idempotent t, ‚Üêunion_assoc s] at h,
  rw [filter_union, prod_union (disjoint_filter_filter hdisj.symm), is_unit.mul_div_cancel_left] at
    h,
  { suffices : ‚àÄ b ‚àà u, is_unit (f b),
    { rwa (filter_eq_self _).mpr this at h },
    intros b hb,
    have : {b} ‚â§ u := by simp only [hb, le_eq_subset, singleton_subset_iff],
    specialize hdisj this,
    simp only [union_assoc, le_eq_subset, singleton_subset_iff, mem_union, set.finite.mem_to_finset,
               set.mem_set_of_eq, bot_eq_empty, not_mem_empty] at hdisj,
    contrapose! hdisj,
    simp [hdisj] },
  { exact is_unit_prod_filter _ _ },
end

/-- The sequence of the factors in a convergent infinite product always tends to 1. -/
lemma converges_prod.tendsto_nhds_one {f : Œ≤ ‚Üí ‚Ñù} (hf : converges_prod f) :
  tendsto f cofinite (ùìù 1) :=
begin
  intros e he,
  rw [filter.mem_map],
  rcases hf.vanishing he with ‚ü®s, hs‚ü©,
  refine s.eventually_cofinite_nmem.mono (Œª x hx, _),
  simpa using hs {x} (disjoint_singleton_left.2 hx)
end

lemma monotone_prod_of_le_one [ordered_comm_monoid Œ≥] {f : Œ≤ ‚Üí Œ≥} (hf : ‚àÄ b, 1 ‚â§ f b) :
  monotone (Œª s, ‚àè b in s, f b) :=
Œª _ _ hst, prod_le_prod_of_subset_of_one_le' hst (Œª _ _ _, hf _)


lemma one_le_prod‚ÇÄ [ordered_comm_semiring Œ≥] {s : finset Œ≤} {f : Œ≤ ‚Üí Œ≥}
  (h : ‚àÄi ‚àà s, 1 ‚â§ f i) : 1 ‚â§ (‚àè i in s, f i) :=
prod_induction _ _ le_rfl (Œª x hx y hy,
  le_mul_of_le_mul_of_nonneg_left (by simpa using h _ hx) hy (zero_le_one.trans (h _ hx)))

lemma monotone_prod_of_le_one' [ordered_comm_semiring Œ≥] {f : Œ≤ ‚Üí Œ≥} (hf : ‚àÄ b, 1 ‚â§ f b) :
  monotone (Œª s, ‚àè b in s, f b) :=
begin
  intros s t hst,
  simp only [‚Üêprod_sdiff hst],
  refine le_mul_of_one_le_left (zero_le_one.trans _) _;
  exact one_le_prod‚ÇÄ (Œª _ _, hf _)
end

lemma sum_le_prod_one_add_of_nonneg [linear_ordered_comm_semiring Œ≥]
  (s : finset Œ≤) {f : Œ≤ ‚Üí Œ≥} (hf : ‚àÄ b ‚àà s, 0 ‚â§ f b) :
  ‚àë i in s, f i ‚â§ ‚àè (a : Œ≤) in s, (1 + f a) :=
begin
  induction s using finset.cons_induction_on with a s ha IH,
  { simp },
  simp only [ha, add_mul, cons_eq_insert, sum_insert, not_false_iff, prod_insert, one_mul],
  rw [add_comm],
  refine add_le_add (IH (Œª b hb, hf _ (mem_cons.mpr (or.inr hb)))) _,
  refine le_mul_of_one_le_right (hf _ (mem_cons_self _ _)) (one_le_prod‚ÇÄ (Œª b hb, _)),
  simp [hf _ (mem_cons.mpr (or.inr hb))]
end

lemma prod_le_prod_of_nonneg [ordered_comm_semiring Œ≥] (s : finset Œ≤) {f g : Œ≤ ‚Üí Œ≥}
  (h : ‚àÄ b ‚àà s, f b ‚â§ g b) (h' : ‚àÄ b ‚àà s, 0 ‚â§ f b) :
  ‚àè i in s, f i ‚â§ ‚àè i in s, g i :=
begin
  induction s using finset.cons_induction_on with a s ha IH,
  { simp },
  simp only [ha, cons_eq_insert, prod_insert, not_false_iff],
  refine mul_le_mul (h _ (mem_cons_self _ _)) (IH _ _) (prod_nonneg _) ((h' _ _).trans (h _ _)),
  { intros b hb,
    exact h _ (mem_cons.mpr (or.inr hb)) },
  { intros b hb,
    exact h' _ (mem_cons.mpr (or.inr hb)) },
  { intros b hb,
    exact h' _ (mem_cons.mpr (or.inr hb)) },
  { simp },
  { simp }
end

/-- A product `‚àè (1 + a‚Çô)` with positive terms `a‚Çô` is convergent iff the series `‚àë a‚Çô` converges. -/
lemma converges_prod_one_add_iff_summable {f : Œ≤ ‚Üí ‚Ñù} (hf : ‚àÄ b, 0 ‚â§ f b) :
  converges_prod (Œª b, 1 + f b) ‚Üî summable f :=
begin
  nontriviality Œ≤,
  have hu : ‚àÄ b, is_unit (1 + f b),
  { intro b,
    simp [is_unit_iff_ne_zero, add_eq_zero_iff_neg_eq,
          (neg_one_lt_zero.trans_le (hf b)).ne] },
  have hs : ‚àÄ s : finset Œ≤, (s.filter (Œª b, is_unit (1 + f b))) = s,
  { intro,
    rw (filter_eq_self _).mpr _,
    intros b hb,
    exact hu b },
  suffices : bdd_above (set.range (Œª s, ‚àè a in s, (1 + f a))) ‚Üî
    bdd_above (set.range (Œª s, ‚àë a in s, f a)),
  { split; intro h,
    { refine ‚ü®_, has_sum_of_is_lub_of_nonneg _ hf (is_lub_csupr (this.mp _))‚ü©,
      obtain ‚ü®x, h‚ü© := h,
      obtain ‚ü®y, hy‚ü© := h.tendsto_units,
      refine is_lub.bdd_above (is_lub_of_tendsto_at_top _ _ : is_lub _ x),
      { exact monotone_prod_of_le_one' (Œª x, le_add_of_nonneg_right (hf _)) },
      { convert hy,
        { simp [hs] },
        { rw h.prod_eq,
          have he : h.finite_not_unit.to_finset = ‚àÖ,
          { ext x,
            simp [hu] },
          simp only [he, filter_congr_decidable, prod_empty, mul_one],
          refine tendsto_nhds_unique _ hy,
          generalize_proofs H,
          exact Exists.some_spec H } } },
    { have he : {b | ¬¨ is_unit (1 + f b)} = ‚àÖ,
      { ext,
        simp [hu] },
      have hb := (this.mpr
        (is_lub_of_tendsto_at_top (finset.sum_mono_set_of_nonneg hf) h.some_spec).bdd_above),
      have := is_lub_csupr hb,
      have hunit : is_unit (‚®Ü (i : finset Œ≤), (Œª (s : finset Œ≤), ‚àè (a : Œ≤) in s, (1 + f a)) i),
      { rw is_unit_iff_ne_zero,
        refine ne_of_gt (lt_cSup_of_lt hb ‚ü®‚àÖ, _‚ü© zero_lt_one),
        simp },
      refine ‚ü®hunit.unit, set.finite_empty.subset he.le, ‚ü®hunit.unit, _‚ü©, _‚ü©,
      { simp only [hs, is_unit.unit_spec],
        exact tendsto_at_top_is_lub (monotone_prod_of_le_one' (Œª x, le_add_of_nonneg_right (hf _)))
          this },
      { simp only [he, set.finite.to_finset_empty, prod_empty, mul_one],
        generalize_proofs H,
        refine this.unique _,
        refine is_lub_of_tendsto_at_top
          (monotone_prod_of_le_one' (Œª x, le_add_of_nonneg_right (hf _))) _,
        convert Exists.some_spec H,
        simp [hs] } } },
  split; intro h,
  { simp only [bdd_above_iff_exists_ge (1 : ‚Ñù), set.mem_range, forall_exists_index,
      forall_apply_eq_imp_iff'] at h ‚ä¢,
    obtain ‚ü®x, hx, hy‚ü© := h,
    exact ‚ü®x, hx, Œª s, (hy s).trans' (sum_le_prod_one_add_of_nonneg _ (Œª _ _, hf _))‚ü© },
  { have : summable f := ‚ü®_, has_sum_of_is_lub_of_nonneg _ hf (is_lub_csupr h)‚ü©,
    simp only [bdd_above_iff_exists_ge (0 : ‚Ñù), set.mem_range, forall_exists_index,
      forall_apply_eq_imp_iff'] at h,
    simp only [bdd_above_iff_exists_ge (2 : ‚Ñù), set.mem_range, forall_exists_index,
      forall_apply_eq_imp_iff'],
    obtain ‚ü®x, hx, hy‚ü© := h,
    have hball : (set.Ioo (-1 : ‚Ñù) 2‚Åª¬π) ‚àà ùìù (0 : ‚Ñù),
    { exact Ioo_mem_nhds neg_one_lt_zero (inv_pos.mpr zero_lt_two) },
    obtain ‚ü®s, hs‚ü© := this.vanishing hball,
    refine ‚ü®2 * ‚àè b in s, (1 + f b), _, _‚ü©,
    { simp only [le_mul_iff_one_le_right, zero_lt_bit0, zero_lt_one],
      refine one_le_prod‚ÇÄ (Œª b hb, _),
      simp [hf b] },
    { intro t,
      rw ‚Üêsdiff_union_inter t s,
      rw prod_union (disjoint_sdiff_inter t s),
      refine mul_le_mul _ _ (zero_le_one.trans (one_le_prod‚ÇÄ _)) zero_le_two,
      { refine (prod_one_add_le_one_add_sum_sum_pow _ _).trans _,
        { simp [hf] },
        refine ge_of_tendsto has_sum_geometric_two _,
        rw eventually_at_top,
        refine ‚ü®range ((t \ s).card + 1), Œª u hu, _‚ü©,
        refine (sum_le_sum_of_subset_of_nonneg hu _).trans (sum_le_sum _),
        { intros,
          exact pow_nonneg (sum_nonneg (Œª _ _, hf _)) _ },
        { intros,
          refine pow_le_pow_of_le_left (sum_nonneg (Œª _ _, hf _)) _ _,
          simpa using (hs (t \ s) disjoint_sdiff.symm).right.le
        } },
      { rw ‚Üêprod_sdiff (inter_subset_right t s),
        refine le_mul_of_one_le_of_le_of_nonneg _ le_rfl (zero_le_one.trans _);
        refine one_le_prod‚ÇÄ _;
        simp [hf] },
      { simp [hf] } } }
end

end
