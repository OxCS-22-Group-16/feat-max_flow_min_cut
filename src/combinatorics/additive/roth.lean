import order.partition.finpartition
import topology.instances.complex
import combinatorics.additive.salem_spencer
import data.real.pi.bounds

noncomputable theory

-- lemma exists_half_partition_small {Œ± : Type*} [decidable_eq Œ±] (t : ‚Ñù) (s : finset Œ±) (ht : 0 ‚â§ t)
--   (hs : t / 2 < s.card) (hs' : ‚Üës.card ‚â§ 3 * t / 2) :
--   ‚àÉ P : finpartition s, ‚àÄ p : finset Œ±, p ‚àà P.parts ‚Üí t / 2 < p.card ‚àß ‚Üëp.card ‚â§ t :=
-- begin
--   have : ‚àÄ n : ‚Ñï, ‚Üën ‚â§ t ‚Üî n ‚â§ ‚åät‚åã‚Çä,
--   { intro n,
--     rw nat.le_floor_iff ht },

-- end

-- lemma exists_half_partition {Œ± : Type*} [decidable_eq Œ±] (t : ‚Ñù) (s : finset Œ±)
--   (hs : t / 2 < s.card) :
--   ‚àÉ P : finpartition s, ‚àÄ p : finset Œ±, p ‚àà P.parts ‚Üí t / 2 < p.card ‚àß ‚Üëp.card ‚â§ t :=
-- begin

-- end

-- N / d ‚â§ Œµ t / 2 œÄ

-- t = ‚àö N
-- ‚àö N ‚â§ Œµ d / 2 œÄ

def finset.expect {Œ± : Type*} (s : finset Œ±) (f : Œ± ‚Üí ‚ÑÇ) : ‚ÑÇ := (s.sum f) / s.card

localized "notation `ùîº` binders `, ` r:(scoped:67 f, finset.expect finset.univ f) := r" in big_operators

localized "notation `ùîº` binders ` in ` s `, ` r:(scoped:67 f, finset.expect s f) := r" in big_operators

open_locale big_operators real complex_conjugate

lemma expect_sum {Œ± Œ≤ : Type*} {s : finset Œ±} {t : finset Œ≤} (f : Œ± ‚Üí Œ≤ ‚Üí ‚ÑÇ) :
  ùîº x in s, ‚àë y in t, f x y = ‚àë y in t, ùîº x in s, f x y :=
begin
  rw [finset.expect, finset.sum_comm, finset.sum_div],
  refl
end

lemma expect_comm {Œ± Œ≤ : Type*} {s : finset Œ±} {t : finset Œ≤} (f : Œ± ‚Üí Œ≤ ‚Üí ‚ÑÇ) :
  ùîº x in s, ùîº y in t, f x y = ùîº y in t, ùîº x in s, f x y :=
by rw [finset.expect, finset.expect, ‚Üêexpect_sum, ‚Üêexpect_sum, finset.expect, finset.expect,
  div_div, mul_comm, div_div, finset.sum_comm]

lemma expect_mul {Œ± : Type*} {s : finset Œ±} (f : Œ± ‚Üí ‚ÑÇ) (x : ‚ÑÇ) :
  (ùîº i in s, f i) * x = ùîº i in s, f i * x :=
by { rw [finset.expect, div_mul_eq_mul_div, finset.sum_mul], refl }

lemma mul_expect {Œ± : Type*} {s : finset Œ±} (f : Œ± ‚Üí ‚ÑÇ) (x : ‚ÑÇ) :
  x * (ùîº i in s, f i) = ùîº i in s, x * f i :=
by simp_rw [mul_comm x, expect_mul]

variables {N : ‚Ñï} {A : finset (zmod N)} {x : zmod N} {f g : zmod N ‚Üí ‚ÑÇ}

def e (r : ‚Ñù) : ‚ÑÇ := complex.exp (r * (2 * œÄ * complex.I))

lemma e_add {r s : ‚Ñù} : e (r + s) = e r * e s :=
by rw [e, complex.of_real_add, add_mul, complex.exp_add, e, e]

lemma e_int (z : ‚Ñ§) : e z = 1 :=
by rw [e, complex.of_real_int_cast, complex.exp_int_mul_two_pi_mul_I]

lemma e_zero : e 0 = 1 := by simpa using e_int 0

lemma e_add_int {r : ‚Ñù} {z : ‚Ñ§} : e (r + z) = e r :=
by rw [e_add, e_int, mul_one]

lemma conj_e {r : ‚Ñù} : conj (e r) = e (-r) := by { rw [e, e, ‚Üêcomplex.exp_conj], simp }

lemma conj_expect [ne_zero N] : conj (ùîº i, f i) = ùîº i, conj (f i) :=
by simp only [finset.expect, map_div‚ÇÄ, map_nat_cast, map_sum]

def inner {Œ± : Type*} [fintype Œ±] (f g : Œ± ‚Üí ‚ÑÇ) : ‚ÑÇ := ùîº x, f x * conj (g x)
def inner' {Œ± : Type*} [fintype Œ±] (f g : Œ± ‚Üí ‚ÑÇ) : ‚ÑÇ := ‚àë x, f x * conj (g x)

def omega (r x : zmod N) : ‚ÑÇ := e ((r * x) / N)
def hat [ne_zero N] (f : zmod N ‚Üí ‚ÑÇ) (r : zmod N) : ‚ÑÇ := inner f (omega r)

localized "notation (name := hat) n `ÃÇ`:10000 := hat n" in nat

lemma hat_eq_expect [ne_zero N] : fÃÇ x = ùîº i, f i * e (- ((x * i) / N)) :=
begin
  rw [hat, inner],
  simp only [omega, conj_e],
end

lemma hat_eq_sum [ne_zero N] : fÃÇ x = (‚àë i, f i * e (- ((x * i) / N))) / N :=
by rw [hat_eq_expect, finset.expect, finset.card_univ, zmod.card]

lemma orthogonal [ne_zero N] (x y : zmod N) :
  ‚àë (i : zmod N), e (-(i * x / N) + - -(i * y / N)) = N * if x = y then 1 else 0 :=
begin
end

lemma parseval [ne_zero N] : inner' (hat f) (hat g) = inner f g :=
begin
  simp_rw [inner, inner', hat_eq_expect, conj_expect, expect_mul, mul_expect, ‚Üêexpect_sum, map_mul,
    mul_mul_mul_comm, conj_e, ‚Üêe_add, ‚Üêfinset.mul_sum],
  have : ‚àÄ x y : zmod N,
    ‚àë (i : zmod N), e (-(i * x / N) + - -(i * y / N)) = N * if x = y then 1 else 0,
  { intros x y,
    split_ifs,
    { cases h,
      simp [e_zero, finset.card_univ] },


  },

end

#exit

def as_function (A : finset (zmod N)) (x : zmod N) : ‚ÑÇ := if x ‚àà A then 1 else 0

lemma one_five {N : ‚Ñï} {A B C : finset (zmod N)} {Œ± Œ≤ Œ≥ : ‚Ñù}
  (hŒ± : Œ± * N = A.card) (hŒ≤ : Œ≤ * N = B.card) (hŒ≤ : Œ≥ * N = C.card)
  (hN : odd N)
