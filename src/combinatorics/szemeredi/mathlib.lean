/-
Copyright (c) 2022 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import combinatorics.simple_graph.degree_sum

/-! # Things that belong to mathlib -/

open finset function sum
open_locale big_operators

variables {Œ± ùïú Œπ : Type*}

namespace finset

lemma sum_mod (s : finset Œ±) {m : ‚Ñï} (f : Œ± ‚Üí ‚Ñï) : (‚àë i in s, f i) % m = (‚àë i in s, f i % m) % m :=
begin
  classical,
  induction s using finset.induction with i s hi ih,
  { simp },
  rw [sum_insert hi, sum_insert hi, nat.add_mod, ih, nat.add_mod],
  simp,
end

lemma dumb_thing [decidable_eq Œ±]
  {X Y Z : finset Œ±} (hXY : disjoint X Y) (hXZ : disjoint X Z) (hYZ : disjoint Y Z)
  {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ z‚ÇÅ z‚ÇÇ : Œ±} (h : ({x‚ÇÅ, y‚ÇÅ, z‚ÇÅ} : finset Œ±) = {x‚ÇÇ, y‚ÇÇ, z‚ÇÇ})
  (hx‚ÇÅ : x‚ÇÅ ‚àà X) (hx‚ÇÇ : x‚ÇÇ ‚àà X) (hy‚ÇÅ : y‚ÇÅ ‚àà Y) (hy‚ÇÇ : y‚ÇÇ ‚àà Y) (hz‚ÇÅ : z‚ÇÅ ‚àà Z) (hz‚ÇÇ : z‚ÇÇ ‚àà Z) :
  (x‚ÇÅ, y‚ÇÅ, z‚ÇÅ) = (x‚ÇÇ, y‚ÇÇ, z‚ÇÇ) :=
begin
  simp only [finset.subset.antisymm_iff, subset_iff, mem_insert, mem_singleton, forall_eq_or_imp,
    forall_eq] at h,
  rw disjoint_left at hXY hXZ hYZ,
  rw [prod.mk.inj_iff, prod.mk.inj_iff],
  simp only [and.assoc, @or.left_comm _ (y‚ÇÅ = y‚ÇÇ), @or.comm _ (z‚ÇÅ = z‚ÇÇ),
    @or.left_comm _ (z‚ÇÅ = z‚ÇÇ)] at h,
  refine ‚ü®h.1.resolve_right (not_or _ _), h.2.1.resolve_right (not_or _ _),
    h.2.2.1.resolve_right (not_or _ _)‚ü©;
  { rintro rfl,
    solve_by_elim },
end

end finset

namespace nat

lemma annoying_thing {n k : ‚Ñï} (hk : 0 < k) (hn : k ‚â§ n) : n < 2 * k * (n / k) :=
begin
  rw [mul_assoc, two_mul, ‚Üêadd_lt_add_iff_right (n % k), add_right_comm, add_assoc,
    nat.mod_add_div n k, add_comm, add_lt_add_iff_right],
  apply (nat.mod_lt n hk).trans_le,
  have : 1 ‚â§ n / k,
  { rwa [nat.le_div_iff_mul_le hk, one_mul] },
  simpa using nat.mul_le_mul_left k this,
end

lemma thing2 (i j : ‚Ñï) (hj : 0 < j) : j * (j - 1) * (i / j + 1) ^ 2 < (i + j) ^ 2 :=
begin
  have : j * (j-1) < j^2,
  { rw sq,
    exact nat.mul_lt_mul_of_pos_left (nat.sub_lt hj zero_lt_one) hj },
  apply (nat.mul_lt_mul_of_pos_right this $ pow_pos nat.succ_pos' _).trans_le,
  rw ‚Üêmul_pow,
  exact nat.pow_le_pow_of_le_left (add_le_add_right (nat.mul_div_le i j) _) _,
end

end nat

lemma exists_ne_ne_fin {n : ‚Ñï} (hn : 3 ‚â§ n) (a b : fin n) : ‚àÉ c, a ‚â† c ‚àß b ‚â† c :=
begin
  obtain ‚ü®c, hc‚ü© : ({a,b}·∂ú : finset (fin n)).nonempty,
  { rw [‚Üêfinset.card_pos, card_compl, fintype.card_fin],
    apply nat.sub_pos_of_lt ((card_insert_le _ _).trans_lt _),
    rw card_singleton,
    linarith },
  exact ‚ü®c, by simpa [not_or_distrib, @eq_comm _ c] using hc‚ü©,
end

lemma fin3_cases (i j : fin 3) : i = j ‚à® i = j + 1 ‚à® i = j + 2 :=by fin_cases i; fin_cases j; finish

protected lemma set.pairwise_disjoint.disjoint [semilattice_inf Œ±] [order_bot Œ±] {s : set Œ±}
  (h : s.pairwise_disjoint id) :
  ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí ‚àÄ ‚¶Éy‚¶Ñ, y ‚àà s ‚Üí x ‚â† y ‚Üí disjoint x y := h

section linear_ordered_field
variables [linear_ordered_field Œ±] {x y z : Œ±}

lemma one_div_le_one_of_one_le {a : Œ±} (ha : 1 ‚â§ a) : 1 / a ‚â§ 1 :=
(div_le_one $ zero_lt_one.trans_le ha).2 ha

lemma mul_le_of_nonneg_of_le_div (hy : 0 ‚â§ y) (hz : 0 ‚â§ z) (h : x ‚â§ y / z) : x * z ‚â§ y :=
begin
  rcases hz.eq_or_lt with rfl | hz,
  { simpa using hy },
  rwa le_div_iff hz at h,
end

lemma m_bound (hx : 0 < x) : (x + 1) * (1 - 1/x) / x ‚â§ 1 :=
by { rw [div_le_one hx, one_sub_div hx.ne', mul_div_assoc', div_le_iff hx], linarith }

end linear_ordered_field

section linear_ordered_field
variables [linear_ordered_field ùïú] (r : Œ± ‚Üí Œ± ‚Üí Prop) [decidable_rel r] {s t : finset Œ±} {x : ùïú}

lemma sum_mul_sq_le_sq_mul_sq (s : finset Œ±) (f g : Œ± ‚Üí ùïú) :
  (‚àë i in s, f i * g i)^2 ‚â§ (‚àë i in s, (f i)^2) * ‚àë i in s, (g i)^2 :=
begin
  have h : 0 ‚â§ ‚àë i in s, (f i * ‚àë j in s, (g j)^2 - g i * ‚àë j in s, f j * g j)^2 :=
    sum_nonneg (Œª i hi, sq_nonneg _),
  simp_rw [sub_sq, sum_add_distrib, sum_sub_distrib, mul_pow, mul_assoc, ‚Üêmul_sum, ‚Üêsum_mul,
    mul_left_comm, ‚Üêmul_assoc, ‚Üêsum_mul, mul_right_comm, ‚Üêsq, mul_comm, sub_add, two_mul,
    add_sub_cancel, mul_comm (‚àë j in s, (g j)^2), sq (‚àë j in s, (g j)^2),
    ‚Üêmul_assoc, ‚Üêmul_sub_right_distrib] at h,
  obtain h' | h' := (sum_nonneg (Œª i (hi : i ‚àà s), sq_nonneg (g i))).eq_or_lt,
  { have h'' : ‚àÄ i ‚àà s, g i = 0 :=
      Œª i hi, by simpa using (sum_eq_zero_iff_of_nonneg (Œª i _, sq_nonneg (g i))).1 h'.symm i hi,
    rw [‚Üêh', sum_congr rfl (show ‚àÄ i ‚àà s, f i * g i = 0, from Œª i hi, by simp [h'' i hi])],
    simp },
  rw ‚Üêsub_nonneg,
  exact nonneg_of_mul_nonneg_left h h',
end

lemma chebyshev' (s : finset Œ±) (f : Œ± ‚Üí ùïú) :
  (‚àë (i : Œ±) in s, f i) ^ 2 ‚â§ (‚àë (i : Œ±) in s, f i ^ 2) * s.card :=
by simpa using sum_mul_sq_le_sq_mul_sq s f (Œª _, 1)

lemma chebyshev (s : finset Œ±) (f : Œ± ‚Üí ùïú) :
  ((‚àë i in s, f i) / s.card)^2 ‚â§ (‚àë i in s, (f i)^2) / s.card :=
begin
  obtain rfl | hs := s.eq_empty_or_nonempty,
  { simp },
  rw [‚Üêcard_pos, ‚Üê@nat.cast_pos ùïú] at hs,
  rw [div_pow, div_le_div_iff (sq_pos_of_ne_zero _ hs.ne') hs, sq (s.card : ùïú), ‚Üêmul_assoc],
  exact mul_le_mul_of_nonneg_right (chebyshev' _ f) hs.le,
end

lemma lemma_B_ineq_zero (hst : s ‚äÜ t) (f : Œ± ‚Üí ùïú) (hs : x^2 ‚â§ ((‚àë x in s, f x)/s.card)^2)
  (hs' : (s.card : ùïú) ‚â† 0) :
  (s.card : ùïú) * x^2 ‚â§ ‚àë x in t, f x^2 :=
(mul_le_mul_of_nonneg_left (hs.trans (chebyshev s f)) (nat.cast_nonneg _)).trans $
  (mul_div_cancel' _ hs').le.trans $ sum_le_sum_of_subset_of_nonneg hst $ Œª i _ _, sq_nonneg _

lemma lemma_B_ineq (hst : s ‚äÜ t) (f : Œ± ‚Üí ùïú) (d : ùïú) (hx : 0 ‚â§ x)
  (hs : x ‚â§ abs ((‚àë i in s, f i)/s.card - (‚àë i in t, f i)/t.card))
  (ht : d ‚â§ ((‚àë i in t, f i)/t.card)^2) :
  d + s.card/t.card * x^2 ‚â§ (‚àë i in t, f i^2)/t.card :=
begin
  obtain hscard | hscard := (s.card.cast_nonneg : (0 : ùïú) ‚â§ s.card).eq_or_lt,
  { simpa [‚Üêhscard] using ht.trans (chebyshev t f) },
  have htcard : (0:ùïú) < t.card := hscard.trans_le (nat.cast_le.2 (card_le_of_subset hst)),
  have h‚ÇÅ : x^2 ‚â§ ((‚àë i in s, f i)/s.card - (‚àë i in t, f i)/t.card)^2 :=
    sq_le_sq.2 (by rwa [abs_of_nonneg hx]),
  have h‚ÇÇ : x^2 ‚â§ ((‚àë i in s, (f i - (‚àë j in t, f j)/t.card))/s.card)^2,
  { apply h‚ÇÅ.trans,
    rw [sum_sub_distrib, sum_const, nsmul_eq_mul, sub_div, mul_div_cancel_left _ hscard.ne'] },
  apply (add_le_add_right ht _).trans,
  rw [‚Üêmul_div_right_comm, le_div_iff htcard, add_mul, div_mul_cancel _ htcard.ne'],
  have h‚ÇÉ := lemma_B_ineq_zero hst (Œª i, f i - (‚àë j in t, f j) / t.card) h‚ÇÇ hscard.ne',
  apply (add_le_add_left h‚ÇÉ _).trans,
  simp [‚Üêmul_div_right_comm _ (t.card : ùïú), sub_div' _ _ _ htcard.ne', ‚Üêsum_div, ‚Üêadd_div, mul_pow,
    div_le_iff (sq_pos_of_ne_zero _ htcard.ne'), sub_sq, sum_add_distrib, ‚Üêsum_mul, ‚Üêmul_sum],
  ring_nf,
end

end linear_ordered_field

namespace simple_graph
variables {G G' : simple_graph Œ±} {s : finset Œ±}

instance {r : Œ± ‚Üí Œ± ‚Üí Prop} [h : decidable_rel r] : decidable_pred (uncurry r) := Œª x, h x.1 x.2

@[simp] lemma dart.adj (d : G.dart) : G.adj d.fst d.snd := d.is_adj

variables (G G') [decidable_eq Œ±] [decidable_rel G.adj] [decidable_rel G'.adj]

/-- The edges of a graph over a finset as a finset. -/
def edge_finset_on (s : finset Œ±) : finset (sym2 Œ±) :=
((s.product s).filter $ uncurry G.adj).image quotient.mk

variables {G G'}

lemma mem_edge_finset_on {x : sym2 Œ±} :
  x ‚àà G.edge_finset_on s ‚Üî ‚àÉ a b, a ‚àà s ‚àß b ‚àà s ‚àß G.adj a b ‚àß x = ‚ü¶(a, b)‚üß :=
begin
  simp_rw [edge_finset_on, mem_image, exists_prop, mem_filter, mem_product],
  split,
  { rintro ‚ü®‚ü®a, b‚ü©, ‚ü®‚ü®hsa, hsb‚ü©, hGab‚ü©, h‚ü©,
    exact ‚ü®a, b, hsa, hsb, hGab, h.symm‚ü© },
  { rintro ‚ü®a, b, hsa, hsb, hGab, h‚ü©,
    exact ‚ü®‚ü®a, b‚ü©, ‚ü®‚ü®hsa, hsb‚ü©, hGab‚ü©, h.symm‚ü© }
end

variables [fintype Œ±]

lemma double_edge_finset_card_eq :
  2 * G.edge_finset.card = (univ.filter (Œª (xy : Œ± √ó Œ±), G.adj xy.1 xy.2)).card :=
begin
  rw [‚Üêdart_card_eq_twice_card_edges, ‚Üêcard_univ],
  refine card_congr (Œª i _, (i.fst, i.snd)) (by simp) (by simp [dart.ext_iff, ‚Üêand_imp]) _,
  exact Œª xy h, ‚ü®‚ü®xy, (mem_filter.1 h).2‚ü©, mem_univ _, prod.mk.eta‚ü©,
end

end simple_graph
