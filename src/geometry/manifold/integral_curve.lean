/-
Copyright (c) 2022 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import analysis.ODE.picard_lindelof
import geometry.manifold.cont_mdiff
import geometry.manifold.mfderiv

open_locale manifold

/-- Express cont_mdiff_at in a chosen local chart. -/
lemma cont_mdiff_at_fix_ext_chart
  {ùïú : Type*} [nontrivially_normed_field ùïú]
  {E : Type*} [normed_add_comm_group E] [normed_space ùïú E]
  {H : Type*} [topological_space H] {I : model_with_corners ùïú E H}
  {M : Type*} [topological_space M] [charted_space H M] [smooth_manifold_with_corners I M]
  {E' : Type*} [normed_add_comm_group E'] [normed_space ùïú E']
  {H' : Type*} [topological_space H'] {I' : model_with_corners ùïú E' H'}
  {M' : Type*} [topological_space M'] [charted_space H' M'] [smooth_manifold_with_corners I' M']
  {n : ‚Ñï‚àû} {f : M ‚Üí M'} (x‚ÇÄ : M) {x : M}
  (hx : x ‚àà (ext_chart_at I x‚ÇÄ).source) (hfx : f x ‚àà (ext_chart_at I' (f x‚ÇÄ)).source) :
  cont_mdiff_at I I' n f x ‚Üî continuous_at f x ‚àß
    cont_diff_within_at ùïú n (written_in_ext_chart_at I I' x‚ÇÄ f)
      (set.range I) ((ext_chart_at I x‚ÇÄ) x) :=
begin
  rw cont_mdiff_at,
  rw cont_mdiff_within_at,
  rw (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_indep_chart,
  show x ‚àà (chart_at H x‚ÇÄ).source,
  { rw ‚Üêext_chart_at_source I x‚ÇÄ,
    exact hx },
  show f x ‚àà (chart_at H' (f x‚ÇÄ)).source,
  { rw ‚Üêext_chart_at_source I' (f x‚ÇÄ),
    exact hfx },
  { split,
    { rintros ‚ü®h1, h2‚ü©,
      split,
      { apply h1.continuous_at,
        exact is_open.mem_nhds is_open_univ (set.mem_univ _) },
      { unfold cont_diff_within_at_prop at h2,
        rw ext_chart_at_coe,
        rw written_in_ext_chart_at,
        rw ext_chart_at_coe,
        rw function.comp_apply,
        rw ext_chart_at,
        rw local_equiv.coe_trans_symm,
        apply h2.mono_of_mem,
        rw set.inter_comm,
        apply inter_mem_nhds_within,
        rw ‚Üêset.preimage_comp,
        rw ‚Üêext_chart_at_coe_symm,
        rw ‚Üêfunction.comp_apply I,
        rw ‚Üêext_chart_at_coe,
        apply ext_chart_preimage_mem_nhds' I x‚ÇÄ hx,
        exact is_open.mem_nhds is_open_univ (set.mem_univ _) } },
    { rintros ‚ü®h1, h2‚ü©,
      use h1.continuous_within_at,
      unfold cont_diff_within_at_prop,
      rw ext_chart_at_coe at h2,
      rw written_in_ext_chart_at at h2,
      rw ext_chart_at_coe at h2,
      rw ext_chart_at at h2,
      rw function.comp_apply at h2,
      apply h2.mono,
      exact set.inter_subset_right _ _ } },
  { exact smooth_manifold_with_corners.chart_mem_maximal_atlas I x‚ÇÄ },
  { exact smooth_manifold_with_corners.chart_mem_maximal_atlas I' (f x‚ÇÄ) },
  { apply_instance },
  { apply_instance }
end

variables
  {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [proper_space E]
  {H : Type*} [topological_space H] (I : model_with_corners ‚Ñù E H)
  (M : Type*) [topological_space M] [charted_space H M] [smooth_manifold_with_corners I M]

lemma step1
  (v : M ‚Üí tangent_bundle I M) (h‚ÇÅ : ‚àÄ x, (v x).1 = x) (h‚ÇÇ : cont_mdiff I I.tangent 1 v)
  (x‚ÇÄ : M) (hx : (ext_chart_at I x‚ÇÄ) x‚ÇÄ ‚àà interior (ext_chart_at I x‚ÇÄ).target) :
  ‚àÉ (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (Œ≥ : ‚Ñù ‚Üí M), Œ≥ 0 = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà metric.ball (0 : ‚Ñù) Œµ ‚Üí
    (Œ≥ t) ‚àà (ext_chart_at I x‚ÇÄ).source ‚àß
    (ext_chart_at I x‚ÇÄ) (Œ≥ t) ‚àà interior (ext_chart_at I x‚ÇÄ).target ‚àß
    continuous_at Œ≥ t ‚àß
    has_deriv_at ((ext_chart_at I x‚ÇÄ) ‚àò Œ≥) ((ext_chart_at I.tangent (v x‚ÇÄ)) (v (Œ≥ t))).2 t :=
begin
  obtain ‚ü®Œµ, hŒµ, f, hf1, hf2‚ü© := ODE_solution_exists.at_ball_of_cont_diff_on_nhds
    (Œª y, (written_in_ext_chart_at I I.tangent x‚ÇÄ v y).2)
    ((ext_chart_at I x‚ÇÄ) x‚ÇÄ) (ext_chart_at I x‚ÇÄ).target _ _ 0,
  { have h1 : (f ‚Åª¬π' interior (ext_chart_at I x‚ÇÄ).target) ‚àà nhds (0 : ‚Ñù),
    { apply continuous_at.preimage_mem_nhds,
      { exact (hf2 0 (metric.mem_ball_self hŒµ)).continuous_at },
      { apply is_open.mem_nhds is_open_interior,
        rw hf1,
        exact hx } },
    rw metric.mem_nhds_iff at h1,
    obtain ‚ü®r, hr1, hr2‚ü© := h1,
    refine ‚ü®min r Œµ, lt_min hr1 hŒµ, (ext_chart_at I x‚ÇÄ).symm ‚àò f, _, _‚ü©,
    { rw function.comp_apply,
      rw hf1,
      exact ext_chart_at_to_inv I x‚ÇÄ },
    { intros t ht,
      have hf2' := hf2 t
        (set.mem_of_mem_of_subset ht (metric.ball_subset_ball (min_le_right r Œµ))),
      refine ‚ü®_, _, _, _‚ü©,
      { rw function.comp_apply,
        rw ‚Üêset.mem_preimage,
        apply set.mem_of_mem_of_subset _ (local_equiv.target_subset_preimage_source _),
        apply set.mem_of_mem_of_subset _ (interior_subset : interior (ext_chart_at I x‚ÇÄ).target ‚äÜ (ext_chart_at I x‚ÇÄ).target),
        rw ‚Üêset.mem_preimage,
        apply set.mem_of_mem_of_subset _ hr2,
        apply set.mem_of_mem_of_subset ht,
        apply metric.ball_subset_ball,
        exact min_le_left _ _ },
      { rw function.comp_apply,
        rw ‚Üêset.mem_preimage,
        rw ‚Üêset.mem_preimage,
        apply set.mem_of_mem_of_subset _ (set.inter_subset_right (ext_chart_at I x‚ÇÄ).target _),
        rw local_equiv.target_inter_inv_preimage_preimage,
        rw set.inter_eq_self_of_subset_right interior_subset,
        rw ‚Üêset.mem_preimage,
        apply set.mem_of_mem_of_subset ht,
        apply set.subset.trans _ hr2,
        apply metric.ball_subset_ball,
        exact min_le_left _ _ },
      { apply continuous_at.comp,
        { have hft : f t ‚àà (ext_chart_at I x‚ÇÄ).target,
          { rw ‚Üêset.mem_preimage,
            apply set.mem_of_mem_of_subset ht,
            have : f ‚Åª¬π' interior (ext_chart_at I x‚ÇÄ).target ‚äÜ
              f ‚Åª¬π' (ext_chart_at I x‚ÇÄ).target,
            { apply set.preimage_mono,
              exact interior_subset },
            apply set.subset.trans _ this,
            apply set.subset.trans _ hr2,
            apply metric.ball_subset_ball,
            exact min_le_left r Œµ },
          have : (ext_chart_at I x‚ÇÄ) ((ext_chart_at I x‚ÇÄ).symm (f t)) = f t,
          { rw local_equiv.right_inv,
            exact hft },
          rw ‚Üêthis,
          apply ext_chart_continuous_at_symm',
          rw ‚Üêset.mem_preimage,
          apply set.mem_of_mem_of_subset hft,
          exact local_equiv.target_subset_preimage_source _ },
        { exact hf2'.continuous_at } },
      rw function.comp_apply,
      rw ‚Üêfunction.comp_apply v,
      rw ‚Üêfunction.comp_apply (ext_chart_at I.tangent (v x‚ÇÄ)),
      rw ‚Üêwritten_in_ext_chart_at,
      apply has_deriv_at.congr_of_eventually_eq hf2',
      rw filter.eventually_eq_iff_exists_mem,
      use metric.ball 0 (min r Œµ),
      split,
      { rw is_open.mem_nhds_iff metric.is_open_ball,
        exact ht },
      { intros t' ht',
        rw function.comp_apply,
        rw function.comp_apply,
        apply local_equiv.right_inv,
        rw ‚Üêset.mem_preimage,
        apply set.mem_of_mem_of_subset ht',
        have : f ‚Åª¬π' interior (ext_chart_at I x‚ÇÄ).target ‚äÜ
          f ‚Åª¬π' (ext_chart_at I x‚ÇÄ).target,
        { apply set.preimage_mono,
          exact interior_subset },
        apply set.subset.trans _ this,
        apply set.subset.trans _ hr2,
        apply metric.ball_subset_ball,
        exact min_le_left r Œµ } } },
  { rw mem_nhds_iff,
    use interior (ext_chart_at I x‚ÇÄ).target,
    use interior_subset,
    use is_open_interior,
    exact hx },
  { intros y hy,
    have h‚ÇÇ' : ‚àÄ (x : M) (h : x ‚àà (ext_chart_at I x‚ÇÄ).source), continuous_at v x ‚àß
    cont_diff_within_at ‚Ñù 1 ((ext_chart_at I.tangent (v x‚ÇÄ)) ‚àò v ‚àò (ext_chart_at I x‚ÇÄ).symm)
      (set.range I) ((ext_chart_at I x‚ÇÄ) x),
    { intros x h,
      apply (cont_mdiff_at_fix_ext_chart x‚ÇÄ h _).mp (h‚ÇÇ x),
      rw ext_chart_at_source,
      rw basic_smooth_vector_bundle_core.mem_chart_source_iff,
      rw h‚ÇÅ,
      rw h‚ÇÅ,
      rw ‚Üêext_chart_at_source I,
      exact h },
    obtain ‚ü®h1, h2‚ü© := h‚ÇÇ' ((ext_chart_at I x‚ÇÄ).symm y) (local_equiv.map_target _ hy),
    rw local_equiv.right_inv _ hy at h2,
    rw ‚Üêwritten_in_ext_chart_at at h2,
    rw ext_chart_at_target,
    apply cont_diff_within_at.mono _ (set.inter_subset_right _ _),
    exact cont_diff_at.comp_cont_diff_within_at _ cont_diff_at_snd h2 }
end

lemma step2
  (v : M ‚Üí tangent_bundle I M) (h‚ÇÅ : ‚àÄ x, (v x).1 = x) (h‚ÇÇ : cont_mdiff I I.tangent 1 v)
  (x‚ÇÄ : M) (hx : (ext_chart_at I x‚ÇÄ) x‚ÇÄ ‚àà interior (ext_chart_at I x‚ÇÄ).target) :
  ‚àÉ (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (Œ≥ : ‚Ñù ‚Üí M), Œ≥ 0 = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà metric.ball (0 : ‚Ñù) Œµ ‚Üí
    has_mfderiv_at ùìò(‚Ñù, ‚Ñù) I Œ≥ t
      ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smul_right ((ext_chart_at I.tangent (v (Œ≥ t))) (v (Œ≥ t))).2) :=
begin
  obtain ‚ü®Œµ, hŒµ, Œ≥, hf1, hf2‚ü© := step1 I M v h‚ÇÅ h‚ÇÇ x‚ÇÄ hx,
  refine ‚ü®Œµ, hŒµ, Œ≥, hf1, _‚ü©,
  intros t ht,
  rw has_mfderiv_at,
  obtain ‚ü®hf4, hf3, hfcon, hf2'‚ü© := hf2 t ht,
  use hfcon,
  have : differentiable_at ‚Ñù ((ext_chart_at I (Œ≥ t)) ‚àò (ext_chart_at I (x‚ÇÄ)).symm)
    (((ext_chart_at I x‚ÇÄ) ‚àò Œ≥) t),
  { rw function.comp_apply,
    have : differentiable_within_at ‚Ñù ((ext_chart_at I (Œ≥ t)) ‚àò (ext_chart_at I x‚ÇÄ).symm)
      (set.range I) ((ext_chart_at I x‚ÇÄ) (Œ≥ t)) :=
    ((cont_diff_within_at_ext_coord_change I (Œ≥ t) x‚ÇÄ) _).differentiable_within_at le_top,
    { apply differentiable_within_at.differentiable_at this,
      rw mem_nhds_iff,
      use interior (ext_chart_at I x‚ÇÄ).target,
      exact ‚ü®set.subset.trans interior_subset (ext_chart_at_target_subset_range _ _),
        is_open_interior, hf3‚ü© },
    { rw local_equiv.trans_source,
      rw local_equiv.symm_source,
      use set.mem_of_mem_of_subset hf3 interior_subset,
      rw set.mem_preimage,
      rw local_equiv.left_inv _ hf4,
      exact mem_ext_chart_source _ _ } },
  have h := has_fderiv_at.comp_has_deriv_at t this.has_fderiv_at hf2',
  have : (fderiv ‚Ñù ((ext_chart_at I (Œ≥ t)) ‚àò (ext_chart_at I (x‚ÇÄ)).symm)
    (((ext_chart_at I x‚ÇÄ) ‚àò Œ≥) t)) ((ext_chart_at I.tangent (v x‚ÇÄ)) (v (Œ≥ t))).snd =
    ((ext_chart_at I.tangent (v (Œ≥ t))) (v (Œ≥ t))).snd,
  { rw ext_chart_at_coe,
    rw ext_chart_at_coe_symm,
    have hat : ‚àÄ x : M, chart_at H x =
      (‚ü®chart_at H x, charted_space.chart_mem_atlas _ _‚ü© : atlas H M).val := Œª x, rfl,
    have hat' : ‚àÄ x : M, (chart_at H x).symm =
      (‚ü®chart_at H x, charted_space.chart_mem_atlas _ _‚ü© : atlas H M).val.symm := Œª x, rfl,
    rw hat,
    rw hat',
    rw ‚Üêfderiv_within_of_mem_nhds,
    rw ext_chart_at_coe,
    rw function.comp_apply,
    rw function.comp_apply,
    rw ‚Üêtangent_bundle_core_coord_change,
    { rw ext_chart_at_coe,
      rw function.comp_apply,
      rw model_with_corners.prod_apply,
      have h : ‚àÄ (Œ± Œ≤ : Type*) (a : Œ±) (b : Œ≤), (a, b).snd = b := Œª _ _ _ _, rfl,
      rw h,
      rw model_with_corners_self_coe,
      rw id,
      rw basic_smooth_vector_bundle_core.to_charted_space_chart_at,
      have : ‚àÄ (x : M) (z : (tangent_bundle_core I M).to_topological_vector_bundle_core.total_space),
        (tangent_bundle_core I M).chart (chart_mem_atlas H x) z = (chart_at H x z.proj,
        (tangent_bundle_core I M).coord_change (achart H z.proj) (achart H x) (achart H z.proj z.proj) z.2) := Œª x z, rfl,
      rw this (v x‚ÇÄ).fst,
      have h : ‚àÄ (a : H) (b : E), (a, b).snd = b := Œª _ _, rfl,
      rw h,
      rw ‚Üêachart_def,
      rw ‚Üêachart_def,
      rw bundle.total_space.proj,
      rw h‚ÇÅ,
      rw h‚ÇÅ,
      rw hat,
      rw ‚Üêachart_def,
      have : ‚àÄ x, (achart H x‚ÇÄ).val x = (achart H x‚ÇÄ) x := Œª x, rfl,
      rw this,
      have h1 : Œ≥ t ‚àà (achart H (Œ≥ t)).val.source := by simp,
      have h2 : Œ≥ t ‚àà (achart H x‚ÇÄ).val.source,
      { rw achart_val,
        rw ‚Üêext_chart_at_source I,
        exact hf4 },
      rw basic_smooth_vector_bundle_core.coord_change_comp_eq_self' _ h1 h2,
      simp only [local_homeomorph.coe_coe,
        basic_smooth_vector_bundle_core.coe_chart_at_fst,
        model_with_corners_self_local_equiv,
        ext_chart_at.equations._eqn_1,
        function.comp_app,
        local_equiv.prod_coe,
        local_equiv.coe_trans,
        model_with_corners_prod_to_local_equiv],
      rw local_equiv.refl_coe,
      rw id,
      rw basic_smooth_vector_bundle_core.to_charted_space_chart_at,
      rw basic_smooth_vector_bundle_core.chart_apply,
      rw basic_smooth_vector_bundle_core.coord_change_self',
      simp },
    { rw ‚Üêfilter.exists_mem_subset_iff,
      use (ext_chart_at I x‚ÇÄ).target,
      split,
      { rw mem_nhds_iff,
        use interior (ext_chart_at I x‚ÇÄ).target,
        use interior_subset,
        use is_open_interior,
        exact hf3 },
      { rw ext_chart_at_target,
        exact set.inter_subset_right _ _ } } },
  { rw this at h,
    have h1 : written_in_ext_chart_at ùìò(‚Ñù, ‚Ñù) I t Œ≥ = ((ext_chart_at I (Œ≥ t)) ‚àò Œ≥) := rfl,
    have h2 : (ext_chart_at ùìò(‚Ñù, ‚Ñù) t) t = t := rfl,
    rw [h1, h2],
    apply has_deriv_within_at.has_fderiv_within_at,
    apply has_deriv_at.has_deriv_within_at,
    apply has_deriv_at.congr_of_eventually_eq h,
    rw filter.eventually_eq_iff_exists_mem,
    use metric.ball (0 : ‚Ñù) Œµ,
    split,
    { rw is_open.mem_nhds_iff (metric.is_open_ball),
      exact ht },
    { intros t' ht',
      rw function.comp_apply,
      rw function.comp_apply,
      rw function.comp_apply,
      rw local_equiv.left_inv,
      exact (hf2 t' ht').1 } }
end

lemma curve_exists_boundaryless
  [hI : I.boundaryless]
  (v : M ‚Üí tangent_bundle I M) (h‚ÇÅ : ‚àÄ x, (v x).1 = x) (h‚ÇÇ : cont_mdiff I I.tangent 1 v) (x‚ÇÄ : M) :
  ‚àÉ (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (Œ≥ : ‚Ñù ‚Üí M), Œ≥ 0 = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà metric.ball (0 : ‚Ñù) Œµ ‚Üí
    has_mfderiv_at ùìò(‚Ñù, ‚Ñù) I Œ≥ t
      ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smul_right ((ext_chart_at I.tangent (v (Œ≥ t))) (v (Œ≥ t))).2) :=
begin
  apply step2 I M v h‚ÇÅ h‚ÇÇ,
  rw ext_chart_at_target,
  rw model_with_corners.boundaryless.range_eq_univ,
  rw set.inter_univ,
  rw is_open.interior_eq,
  { rw ‚Üêlocal_equiv.image_source_eq_target,
    rw ‚Üêset.univ_inter ((I.symm) ‚Åª¬π' (((chart_at H x‚ÇÄ).to_local_equiv) '' (chart_at H x‚ÇÄ).to_local_equiv.source)),
    have : I.target = set.univ,
    { apply set.eq_univ_of_subset _ hI.range_eq_univ,
      rw set.range_subset_iff,
      intro y,
      apply local_equiv.map_source,
      rw model_with_corners.source_eq,
      exact set.mem_univ _ },
    rw ‚Üêthis,
    rw ‚Üêmodel_with_corners.to_local_equiv_coe_symm,
    rw ‚Üêlocal_equiv.image_eq_target_inter_inv_preimage,
    { rw ‚Üêset.image_comp,
      rw model_with_corners.to_local_equiv_coe,
      rw local_homeomorph.coe_coe,
      rw ‚Üêext_chart_at_coe,
      rw set.mem_image,
      use x‚ÇÄ,
      refine ‚ü®_, rfl‚ü©,
      exact charted_space.mem_chart_source _ _ },
    { rw model_with_corners.source_eq,
      exact set.subset_univ _ } },
  { apply (model_with_corners.continuous_symm _).is_open_preimage,
    exact local_homeomorph.open_target _ }
end
