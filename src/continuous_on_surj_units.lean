import topology.continuous_on
import topology.algebra.group_with_zero

variables {M M‚ÇÄ G‚ÇÄ : Type*} [monoid M] [monoid_with_zero M‚ÇÄ] [group_with_zero G‚ÇÄ]

noncomputable
def surj_units (x : M) [decidable (is_unit x)] : MÀ£ := if h : is_unit x then h.unit else 1

lemma surj_units_apply_is_unit {x : M} [decidable (is_unit x)] (hx : is_unit x) :
  surj_units x = hx.unit :=
dif_pos hx

lemma surj_units_apply_not_is_unit {x : M} [decidable (is_unit x)] (hx : ¬¨ is_unit x) :
  surj_units x = 1 :=
dif_neg hx

@[simp] lemma coe_surj_units_apply_eq_iff {x : M} [decidable (is_unit (x : M))] :
  (surj_units x : M) = x ‚Üî is_unit x :=
begin
  by_cases h : is_unit x,
  { simp [surj_units_apply_is_unit h, h] },
  { simp only [surj_units_apply_not_is_unit h, h, units.coe_one, iff_false],
    contrapose! h,
    simp [‚Üêh] }
end

@[simp] lemma surj_units_apply_coe_units (x : MÀ£) [decidable (is_unit (x : M))] :
  surj_units (x : M) = x :=
by simp only [surj_units_apply_is_unit x.is_unit, is_unit.unit_of_coe_units]

lemma surj_units_apply_eq_mk0_apply {x : G‚ÇÄ} [decidable (is_unit x)] (hx : x ‚â† 0) :
  surj_units x = units.mk0 _ hx :=
begin
  ext,
  simp [is_unit_iff_ne_zero, hx]
end

@[simp] lemma surj_units_apply_zero [decidable (is_unit (0 : M‚ÇÄ))] :
  surj_units (0 : M‚ÇÄ) = 1 :=
begin
  nontriviality M‚ÇÄ,
  exact surj_units_apply_not_is_unit not_is_unit_zero
end

variables {Œ± : Type*} {Œ≤ : Type*} {f : Œ± ‚Üí Œ≤}
open finset filter function classical
open_locale topology classical big_operators filter

instance [has_zero Œ±] [has_mul Œ±] [has_inv Œ±] [topological_space Œ±] [has_continuous_inv‚ÇÄ Œ±] :
  has_continuous_inv‚ÇÄ Œ±·µê·µí·µñ :=
‚ü®Œª x hx, begin
  refine (mul_opposite.continuous_op.continuous_at).comp
    (mul_opposite.continuous_unop.continuous_at.inv‚ÇÄ _),
  simp [hx]
end‚ü©

example {G‚ÇÄ : Type*} [comm_group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ]
  [has_continuous_inv‚ÇÄ G‚ÇÄ]
  {f : Œ≤ ‚Üí G‚ÇÄ} {x : G‚ÇÄ} (hx : x ‚â† 0)
  (h : tendsto (Œª s : finset Œ≤, ‚àè b in s.filter (Œª i, f i ‚â† 0), f b) at_top (ùìù x)) :
  tendsto (Œª s : finset Œ≤, ‚àè b in s, surj_units (f b)) at_top (ùìù (surj_units x)) :=
begin
  have : ‚àÄ m : finset Œ≤, ‚àè b in m.filter (Œª i, f i ‚â† 0), f b = ‚àè b in m, surj_units (f b),
  { intro,
    rw prod_filter,
    refine prod_congr rfl (Œª b _, _),
    split_ifs with hb hb,
    { simp [surj_units_apply_eq_mk0_apply hb] },
    { simp only [not_not] at hb,
      simp [hb], } },
  simp_rw this at h, clear this,
  have h' := h.inv‚ÇÄ hx,
  rw tendsto_at_top_nhds at h h' ‚ä¢,
  intros U hU hU',
  obtain ‚ü®V, hV, hV'‚ü© := hU',
  rw is_open_prod_iff at hV,
  specialize hV x (mul_opposite.op x‚Åª¬π) _,
  { simpa [surj_units_apply_eq_mk0_apply hx, ‚ÜêhV'] using hU, },
  obtain ‚ü®s, t, hs, ht, hxs, hxt, hst‚ü© := hV,
  obtain ‚ü®N, hN‚ü© := h s hxs hs,
  obtain ‚ü®M, hM‚ü© := h' (mul_opposite.op ‚Åª¬π' t) hxt
    (mul_opposite.continuous_op.is_open_preimage _ ht),
  refine ‚ü®N ‚à™ M, Œª u hu, _‚ü©,
  specialize hN u ((finset.subset_union_left _ _).trans hu),
  specialize hM u ((finset.subset_union_right _ _).trans hu),
  rw ‚ÜêhV',
  refine hst _,
  simp only [set.mem_preimage, units.embed_product_apply, units.coe_prod, units.coe_inv,
             mul_opposite.op_inv, set.prod_mk_mem_set_prod_eq],
  exact ‚ü®hN, hM‚ü©
end

lemma continuous_on_surj_units [topological_space G‚ÇÄ] [has_continuous_inv‚ÇÄ G‚ÇÄ] :
  continuous_on (Œª x : G‚ÇÄ, surj_units x) ({x : G‚ÇÄ | is_unit x}) :=
begin
  intros x hx U,
  simp only [filter.mem_map, nhds_induced],
  simp only [units.embed_product_apply, units.coe_inv, mul_opposite.op_inv, mem_comap, exists_prop,
             forall_exists_index, and_imp, mem_nhds_prod_iff],
  intros V s hs t ht hst hVU,
  rw [surj_units_apply_is_unit hx, is_unit.unit_spec] at hs ht,
  refine mem_of_superset _ (set.preimage_mono hVU),
  rw set.preimage_preimage,
  rw [‚Üêmul_opposite.op_inv] at ht,
  have hne : mul_opposite.op x ‚â† 0,
  { simpa [is_unit_iff_ne_zero] using hx },
  have ht' := (mul_opposite.continuous_op.tendsto _).inv‚ÇÄ hne ht,
  rw filter.mem_map at ht',
  rw [nhds_within, mem_inf_iff_superset],
  refine ‚ü®_, inter_mem hs ht', _, mem_principal_self _, _‚ü©,
  intros y,
  simp only [set.mem_inter_iff, set.mem_preimage, set.mem_set_of_eq, units.embed_product_apply,
             units.coe_inv, mul_opposite.op_inv, and_imp],
  intros hxs hxt hy,
  simp_rw [surj_units_apply_is_unit hy, is_unit.unit_spec],
  refine hst _,
  simp [hxs, hxt]
end

example {G‚ÇÄ : Type*} [comm_group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ]
  [has_continuous_inv‚ÇÄ G‚ÇÄ] [t1_space G‚ÇÄ]
  {f : Œ≤ ‚Üí G‚ÇÄ} {x : G‚ÇÄ} (hx : x ‚â† 0)
  (h : tendsto (Œª s : finset Œ≤, ‚àè b in s.filter (Œª i, f i ‚â† 0), f b) at_top (ùìù x)) :
  tendsto (Œª s : finset Œ≤, ‚àè b in s, surj_units (f b)) at_top (ùìù (surj_units x)) :=
begin
  have : ‚àÄ m : finset Œ≤, ‚àè b in m.filter (Œª i, f i ‚â† 0), f b = ‚àè b in m, surj_units (f b),
  { intro,
    rw prod_filter,
    refine prod_congr rfl (Œª b _, _),
    split_ifs with hb hb,
    { simp [surj_units_apply_eq_mk0_apply hb] },
    { simp only [not_not] at hb,
      simp [hb] } },
  simp_rw this at h, clear this,
  have key : tendsto id (ùìù x) (ùìù[set_of is_unit] x),
  { intro,
    simp only [nhds_within, mem_inf_iff_superset, mem_principal, exists_prop, map_id,
              forall_exists_index, and_imp],
    intros V hV W hW hVW,
    refine mem_of_superset _ hVW,
    refine inter_mem hV (mem_of_superset _ hW),
    have : set_of (is_unit : G‚ÇÄ ‚Üí Prop) = set.univ \ {0},
    { ext,
      simp [is_unit_iff_ne_zero] },
    rw [this, mem_nhds_iff],
    -- here is where I use that G‚ÇÄ is T1
    refine ‚ü®_, subset_refl _, is_open_univ.sdiff is_closed_singleton, _‚ü©,
    simp [hx] },
  refine ((continuous_on_surj_units _ _).tendsto.comp (tendsto.comp key h)).congr _,
  { simp [‚Üêunits.coe_prod, surj_units_apply_coe_units] },
  { simp [is_unit_iff_ne_zero, hx] }
end
