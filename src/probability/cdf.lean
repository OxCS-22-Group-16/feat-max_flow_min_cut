/-
Copyright (c) 2022 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/

import measure_theory.constructions.borel_space

/-!
# Cdf

## Main definitions

* `foo_bar`

## Main statements

* `foo_bar_unique`

## Notation



## Implementation details



## References

* [F. Bar, *Quuxes*][bibkey]

-/


open measure_theory topological_space set measure_theory.measure filter

open_locale topological_space ennreal

section cdf

variables {Œ± Œ≤ : Type*} {X : Œ± ‚Üí Œ≤} {m‚ÇÄ : measurable_space Œ±} {Œº : measure Œ±}

/-- Cumulative distribution function -/
def cdf [preorder Œ≤] {m‚ÇÄ : measurable_space Œ±} (X : Œ± ‚Üí Œ≤) (Œº : measure Œ±) : Œ≤ ‚Üí ‚Ñù‚â•0‚àû :=
Œª b, Œº (X ‚Åª¬π' Iic b)

lemma monotone_cdf [preorder Œ≤] {m‚ÇÄ : measurable_space Œ±} (X : Œ± ‚Üí Œ≤) (Œº : measure Œ±) :
  monotone (cdf X Œº) :=
Œª x y hxy, measure_mono (Œª a ha, le_trans ha hxy)

lemma cdf_eq_map_Iic [preorder Œ≤] [measurable_space Œ≤] [topological_space Œ≤]
  [order_closed_topology Œ≤] [opens_measurable_space Œ≤] (hX : ae_measurable X Œº) (x : Œ≤) :
cdf X Œº x = Œº.map X (Iic x) :=
by { rw [cdf, map_apply_of_ae_measurable hX], exact measurable_set_Iic, }

lemma tendsto_cdf_nhds_within_Iio [topological_space Œ≤] [conditionally_complete_linear_order Œ≤]
  [order_topology Œ≤] (x : Œ≤) :
  tendsto (cdf X Œº) (ùìù[<] x) (ùìù $ Sup (cdf X Œº '' Iio x)) :=
monotone.tendsto_nhds_within_Iio (monotone_cdf X Œº) x

lemma tendsto_nhds_within_iff {Œ± Œπ} [topological_space Œ±] {l : filter Œπ}
  (x : Œπ ‚Üí Œ±) (s : set Œ±) (a : Œ±) :
  tendsto x l (ùìù[s] a) ‚Üî tendsto x l (ùìù a) ‚àß ‚àÄ·∂† n in l, x n ‚àà s :=
‚ü®Œª h, ‚ü®tendsto_nhds_of_tendsto_nhds_within h, eventually_mem_of_tendsto_nhds_within h‚ü©,
  Œª h, tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ h.1 h.2‚ü©

lemma tendsto_nhds_within_iff_seq_tendsto [topological_space Œ±]
  {f : Œ± ‚Üí Œ≤} {x : Œ±} {l : filter Œ≤} {s : set Œ±} [(ùìù[s] x).is_countably_generated] (hx : x ‚àà s) :
  tendsto f (ùìù[s] x) l
    ‚Üî (‚àÄ xs : ‚Ñï ‚Üí Œ±, (‚àÄ n, xs n ‚àà s) ‚Üí tendsto xs at_top (ùìù x) ‚Üí tendsto (f ‚àò xs) at_top l) :=
begin
  rw tendsto_iff_seq_tendsto,
  simp_rw tendsto_nhds_within_iff,
  refine ‚ü®Œª h xs hxs_ge h_tendsto, h xs ‚ü®h_tendsto, eventually_of_forall hxs_ge‚ü©,
    Œª h xs h_tendsto, _‚ü©,
  classical,
  let ys : ‚Ñï ‚Üí Œ± := Œª n, if xs n ‚àà s then xs n else x,
  have hys_eq_xs : ys =·∂†[at_top] xs,
  { filter_upwards [h_tendsto.2] with n hxsn_mem,
    simp_rw [ys, if_pos hxsn_mem], },
  refine (tendsto_congr' _).mp (h ys _ _),
  { filter_upwards [hys_eq_xs] with n hn,
    rw [function.comp_apply, hn], },
  { intros n,
    simp_rw ys,
    split_ifs with h' h',
    exacts [h', hx], },
  { rw tendsto_congr' hys_eq_xs,
    exact h_tendsto.1, },
end

lemma tendsto_nhds_iff_monotone_tendsto [topological_space Œ±] [linear_order Œ±] [order_topology Œ±]
  {f : Œ± ‚Üí Œ≤} {x : Œ±} {l : filter Œ≤} [(ùìù x).is_countably_generated] :
  tendsto f (ùìù x) l
    ‚Üî ((‚àÄ xs : ‚Ñï ‚Üí Œ±, antitone xs ‚Üí tendsto xs at_top (ùìù x) ‚Üí tendsto (f ‚àò xs) at_top l)
      ‚àß (‚àÄ xs : ‚Ñï ‚Üí Œ±, monotone xs ‚Üí tendsto xs at_top (ùìù x) ‚Üí tendsto (f ‚àò xs) at_top l)) :=
begin
  refine ‚ü®Œª h, _, Œª h, _‚ü©,
  { rw tendsto_iff_seq_tendsto at h,
    exact ‚ü®Œª xs _ h_tendsto, h xs h_tendsto, Œª xs _ h_tendsto, h xs h_tendsto‚ü©, },
  refine tendsto_of_subseq_tendsto (Œª xs hxs_tendsto, _),
  sorry,
end

lemma tendsto_nhds_Ici_iff_seq_tendsto [topological_space Œ±] [linear_order Œ±] [order_topology Œ±]
  {f : Œ± ‚Üí Œ≤} {x : Œ±} {l : filter Œ≤}
  [(ùìù[‚â•] x).is_countably_generated] :
  tendsto f (ùìù[‚â•] x) l
    ‚Üî (‚àÄ xs : ‚Ñï ‚Üí Œ±, (‚àÄ n, x ‚â§ xs n) ‚Üí antitone xs ‚Üí tendsto xs at_top (ùìù x)
      ‚Üí tendsto (f ‚àò xs) at_top l) :=
begin
  refine ‚ü®Œª h, _, Œª h, _‚ü©,
  { rw tendsto_nhds_within_iff_seq_tendsto at h,
    swap, { exact le_rfl, },
    exact Œª xs h_mem h_anti h_tendsto, h xs h_mem h_tendsto, },
  refine tendsto_of_subseq_tendsto (Œª xs hxs_tendsto, _),
  rw tendsto_nhds_within_iff at hxs_tendsto,
  cases hxs_tendsto with hxs_tendsto hxs_mem,
  obtain ‚ü®ns, hxns_anti, hxns_tendsto‚ü© :
    ‚àÉ ns : ‚Ñï ‚Üí ‚Ñï, antitone (xs ‚àò ns) ‚àß tendsto (xs ‚àò ns) at_top (ùìù x),
  { sorry, },
  exact ‚ü®ns, h (xs ‚àò ns) sorry hxns_anti hxns_tendsto‚ü©,
end

lemma cdf_continuous_within_at_Ici [topological_space Œ≤] [conditionally_complete_linear_order Œ≤]
  [order_topology Œ≤] {mŒ≤ : measurable_space Œ≤} [opens_measurable_space Œ≤] [is_finite_measure Œº]
  (x : Œ≤) [(ùìù[‚â•] x).is_countably_generated] (hX : measurable X) :
  continuous_within_at (cdf X Œº) (Ici x) x :=
begin
  refine tendsto_nhds_Ici_iff_seq_tendsto.mpr (Œª xs h_ge h_anti h_tendsto, _),
  simp_rw cdf,
  have h_eq_infi : X ‚Åª¬π' Iic x = ‚ãÇ n, X ‚Åª¬π' Iic (xs n),
  { ext1 y,
    simp only [mem_preimage, mem_Iic, mem_Inter],
    refine ‚ü®Œª h_le i, h_le.trans (h_ge i), Œª h, _‚ü©,
    rw ‚Üê le_cinfi_iff at h,
    { refine h.trans_eq _,
      refine cinfi_eq_of_forall_ge_of_forall_gt_exists_lt h_ge (Œª y hx_lt_y, _),
      exact eventually.exists (eventually_lt_of_tendsto_lt hx_lt_y h_tendsto), },
    { refine ‚ü®x, Œª y hy, _‚ü©,
      obtain ‚ü®n, rfl‚ü© := hy,
      exact h_ge n, }, },
  rw h_eq_infi,
  have h_anti_set : antitone (Œª n, X ‚Åª¬π' Iic (xs n)),
  { intros i j hij a ha,
    simp only [mem_preimage, mem_Iic] at ha ‚ä¢,
    refine ha.trans (h_anti hij), },
  exact tendsto_measure_Inter (Œª n, hX measurable_set_Iic) h_anti_set ‚ü®0, measure_ne_top _ _‚ü©,
end

lemma strict_anti_subseq_of_tendsto_at_bot {Œ≤ : Type*} [linear_order Œ≤] [no_min_order Œ≤]
  {u : ‚Ñï ‚Üí Œ≤} (hu : tendsto u at_top at_bot) :
  ‚àÉ œÜ : ‚Ñï ‚Üí ‚Ñï, strict_mono œÜ ‚àß strict_anti (u ‚àò œÜ) :=
let ‚ü®œÜ, h, h'‚ü© := extraction_of_frequently_at_top (frequently_low_scores hu) in
‚ü®œÜ, h, Œª n m hnm, h' m _ (h hnm)‚ü©

lemma tendsto_at_bot_iff_seq_tendsto [linear_order Œ±] [no_min_order Œ±]
  [(at_bot : filter Œ±).is_countably_generated] {f : Œ± ‚Üí Œ≤} {l : filter Œ≤} :
  tendsto f at_bot l
    ‚Üî ‚àÄ x : ‚Ñï ‚Üí Œ±, strict_anti x ‚Üí tendsto x at_top at_bot ‚Üí tendsto (f ‚àò x) at_top l :=
begin
  refine ‚ü®Œª h x h_anti hx, h.comp hx, Œª H, _‚ü©,
  refine tendsto_of_subseq_tendsto (Œª x hx_tendsto, _),
  obtain ‚ü®ns, hxns_anti, hxns_tendsto‚ü© :
    ‚àÉ ns : ‚Ñï ‚Üí ‚Ñï, strict_anti (x ‚àò ns) ‚àß tendsto (x ‚àò ns) at_top at_bot,
  { obtain ‚ü®ns, hns_strict_mono, hns_comp_anti‚ü© := strict_anti_subseq_of_tendsto_at_bot hx_tendsto,
    exact ‚ü®ns, hns_comp_anti, hx_tendsto.comp (strict_mono.tendsto_at_top hns_strict_mono)‚ü©, },
  exact ‚ü®ns, H (x ‚àò ns) hxns_anti hxns_tendsto‚ü©,
end

lemma tendsto_cdf_at_bot [topological_space Œ≤] [conditionally_complete_linear_order Œ≤]
  [order_topology Œ≤] {mŒ≤ : measurable_space Œ≤} [opens_measurable_space Œ≤] [is_finite_measure Œº]
  (hX : measurable X) [(at_bot : filter Œ≤).is_countably_generated] [no_min_order Œ≤] :
  tendsto (cdf X Œº) at_bot (ùìù 0) :=
begin
  rw tendsto_at_bot_iff_seq_tendsto,
  intros x hx_anti hx_tendsto,
  have h_anti : antitone (Œª n, X ‚Åª¬π' Iic (x n)),
  { change antitone ((Œª y, X ‚Åª¬π' Iic y) ‚àò x),
    refine monotone.comp_antitone _ hx_anti.antitone,
    intros i j hij b,
    simp only [mem_preimage, mem_Iic],
    exact Œª h, h.trans hij, },
  have h_tendsto : tendsto (cdf X Œº ‚àò x) at_top (ùìù (Œº (‚ãÇ n, X ‚Åª¬π' Iic (x n)))),
    from tendsto_measure_Inter (Œª n, hX measurable_set_Iic) h_anti ‚ü®0, measure_ne_top _ _‚ü©,
  convert h_tendsto,
  rw ‚Üê @measure_empty _ _ Œº,
  congr,
  ext1 a,
  simp only [mem_empty_iff_false, mem_Inter, mem_preimage, mem_Iic, false_iff, not_forall, not_le],
  obtain ‚ü®n, -, hn‚ü© := exists_lt_of_tendsto_at_bot hx_tendsto 0 (X a),
  exact ‚ü®n, hn‚ü©,
end


end cdf
