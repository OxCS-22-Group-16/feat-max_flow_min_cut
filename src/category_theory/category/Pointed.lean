/-
Copyright (c) 2022 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import category_theory.monoidal.types

/-!
# The category of pointed types

This defines `Pointed`, the category of pointed types.

## TODO

* Monoidal structure
* Upgrade `Type_to_Pointed` to an equivalence
-/

open category_theory

universes u
variables {Œ± Œ≤ : Type*}

/-- The category of pointed types. -/
structure Pointed : Type.{u + 1} :=
(X : Type.{u})
(point : X)

namespace Pointed

instance : has_coe_to_sort Pointed Type* := ‚ü®X‚ü©

attribute [protected] Pointed.X

/-- Turns a point into a pointed type. -/
def of {X : Type*} (point : X) : Pointed := ‚ü®X, point‚ü©

@[simp] lemma coe_of {X : Type*} (point : X) : ‚Ü•(of point) = X := rfl

alias of ‚Üê _root_.prod.Pointed

instance : inhabited Pointed := ‚ü®of ((), ())‚ü©

/-- Morphisms in `Pointed`. -/
@[ext] protected structure hom (X Y : Pointed.{u}) : Type u :=
(to_fun : X ‚Üí Y)
(map_point : to_fun X.point = Y.point)

instance fun_like (X Y : Pointed.{u}) : fun_like (Pointed.hom X Y) X (Œª _, Y) :=
{ coe := Œª f, f.to_fun,
  coe_injective' := Œª f g h, by { cases f, cases g, congr' } }

namespace hom

/-- The identity morphism of `X : Pointed`. -/
@[simps] def id (X : Pointed) : hom X X := ‚ü®id, rfl‚ü©

instance (X : Pointed) : inhabited (hom X X) := ‚ü®id X‚ü©

/-- Composition of morphisms of `Pointed`. -/
@[simps] def comp {X Y Z : Pointed.{u}} (f : hom X Y) (g : hom Y Z) : hom X Z :=
‚ü®g.to_fun ‚àò f.to_fun, by rw [function.comp_apply, f.map_point, g.map_point]‚ü©

end hom

instance large_category : large_category Pointed :=
{ hom := hom,
  id := hom.id,
  comp := @hom.comp,
  id_comp' := Œª _ _ _, hom.ext _ _ rfl,
  comp_id' := Œª _ _ _, hom.ext _ _ rfl,
  assoc' := Œª _ _ _ _ _ _ _, hom.ext _ _ rfl }

instance concrete_category : concrete_category Pointed :=
{ forget := { obj := Pointed.X, map := @hom.to_fun },
  forget_faithful := ‚ü®@hom.ext‚ü© }

/-- Constructs a isomorphism between pointed types from an equivalence that preserves the point
between them. -/
@[simps] def iso.mk {Œ± Œ≤ : Pointed} (e : Œ± ‚âÉ Œ≤) (he : e Œ±.point = Œ≤.point) : Œ± ‚âÖ Œ≤ :=
{ hom := ‚ü®e, he‚ü©,
  inv := ‚ü®e.symm, e.symm_apply_eq.2 he.symm‚ü©,
  hom_inv_id' := Pointed.hom.ext _ _ e.symm_comp_self,
  inv_hom_id' := Pointed.hom.ext _ _ e.self_comp_symm }

instance monoidal_category : monoidal_category Pointed.{u} :=
{ tensor_obj := Œª X Y, ‚ü®X √ó Y, (X.point, Y.point)‚ü©,
  tensor_hom := Œª W X Y Z f g, ‚ü®prod.map f.to_fun g.to_fun, prod.ext f.map_point g.map_point‚ü©,
  tensor_unit := ‚ü®punit, punit.star‚ü©,
  associator := Œª X Y Z, iso.mk (equiv.prod_assoc _ _ _) rfl,
  left_unitor := Œª X, iso.mk (equiv.punit_prod _) rfl,
  right_unitor := Œª X, iso.mk (equiv.prod_punit _) rfl }

instance : symmetric_category Pointed.{u} := { braiding := Œª X Y, iso.mk (equiv.prod_comm _ _) rfl }

@[simp] lemma coe_tensor (X Y : Pointed.{u}) : ‚Ü•(X ‚äó Y) = (X √ó Y : Type u) := rfl
@[simp] lemma point_tensor (X Y : Pointed) : (X ‚äó Y).point = (X.point, Y.point) := rfl

@[simp] lemma coe_unit : ‚Ü•(ùüô_ Pointed) = punit := rfl
@[simp] lemma point_unit : (ùüô_ Pointed).point = () := rfl

namespace monoidal_category
variables {W X Y Z : Pointed.{u}}

@[simp] lemma tensor_apply (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (p : W ‚äó Y) : (f ‚äó g) p = (f p.1, g p.2) :=
rfl

@[simp] lemma left_unitor_hom_apply {x : X} {p : punit} :
  ((Œª_ X).hom : (ùüô_ (Pointed.{u})) ‚äó X ‚Üí X) (p, x) = x := rfl
@[simp] lemma left_unitor_inv_apply {x : X} :
  ((Œª_ X).inv : X ‚ü∂ (ùüô_ (Pointed.{u})) ‚äó X) x = (punit.star, x) := rfl

@[simp] lemma right_unitor_hom_apply {x : X} {p : punit} :
  ((œÅ_ X).hom : X ‚äó (ùüô_ (Pointed.{u})) ‚Üí X) (x, p) = x := rfl
@[simp] lemma right_unitor_inv_apply {x : X} :
  ((œÅ_ X).inv : X ‚ü∂ X ‚äó (ùüô_ (Pointed.{u}))) x = (x, punit.star) := rfl

@[simp] lemma associator_hom_apply {x : X} {y : Y} {z : Z} :
  ((Œ±_ X Y Z).hom : (X ‚äó Y) ‚äó Z ‚Üí X ‚äó (Y ‚äó Z)) ((x, y), z) = (x, (y, z)) := rfl
@[simp] lemma associator_inv_apply {x : X} {y : Y} {z : Z} :
  ((Œ±_ X Y Z).inv : X ‚äó (Y ‚äó Z) ‚Üí (X ‚äó Y) ‚äó Z) (x, (y, z)) = ((x, y), z) := rfl

@[simp] lemma braiding_hom_apply {x : X √ó Y} : ((Œ≤_ X Y).hom : X ‚äó Y ‚Üí Y ‚äó X) x = x.swap := rfl
@[simp] lemma braiding_inv_apply {x : Y √ó X} : ((Œ≤_ X Y).inv : Y ‚äó X ‚Üí X ‚äó Y) x = x.swap := rfl

end monoidal_category

/-- The forgetful functor from `Pointed` to `Type u` as a monoidal functor. -/
@[simps] def braided_forget : braided_functor Pointed.{u} (Type u) :=
{ to_functor := forget Pointed,
  Œµ := id,
  Œº := Œª X Y, id,
  Œµ_is_iso := ‚ü®‚ü®id, by { unfold_projs, simp }‚ü©‚ü©,
  Œº_is_iso := Œª X Y, ‚ü®‚ü®id, by { unfold_projs, simp }‚ü©‚ü©,
  braided' := Œª X Y, by ext; rw @is_iso.inv_eq_of_hom_inv_id (Type u) _ _ _ _ _ id; refl }

end Pointed

/-- `option` as a functor from types to pointed types. This is the free functor. -/
@[simps] def Type_to_Pointed : Type.{u} ‚•§ Pointed.{u} :=
{ obj := Œª X, ‚ü®option X, none‚ü©,
  map := Œª X Y f, ‚ü®option.map f, rfl‚ü©,
  map_id' := Œª X, Pointed.hom.ext _ _ option.map_id,
  map_comp' := Œª X Y Z f g, Pointed.hom.ext _ _ (option.map_comp_map _ _).symm }

/-- `Type_to_Pointed` is the free functor. -/
def Type_to_Pointed_forget_adjunction : Type_to_Pointed ‚ä£ forget Pointed :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª X Y, { to_fun := Œª f, f.to_fun ‚àò option.some,
                        inv_fun := Œª f, ‚ü®Œª o, o.elim Y.point f, rfl‚ü©,
                        left_inv := Œª f, by { ext, cases x, exact f.map_point.symm, refl },
                        right_inv := Œª f, funext $ Œª _, rfl },
  hom_equiv_naturality_left_symm' := Œª X' X Y f g, by { ext, cases x; refl }, }
