/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli
-/
import category_theory.groupoid.vertex_group
import category_theory.groupoid
import algebra.group.defs
import algebra.hom.group
import algebra.hom.equiv
import data.set.lattice
import combinatorics.quiver.connected_component
import group_theory.subgroup.basic
/-!
# Subgroupoid

This file defines subgroupoids as `structure`s containing the subsets of arrows and their
stability under composition and inversion.
Also defined are

* containment of subgroupoids is a complete lattice;
* images and preimages of subgroupoids under a functor;
* the notion of normality of subgroupoids and its stability under intersection and preimage;
* compatibility of the above with `groupoid.vertex_group`.


## Main definitions

Given a type `C` with associated `groupoid C` instance.

* `subgroupoid C` is the type of subgroupoids of `C`
* `subgroupoid.is_normal` is the property that the subgroupoid is stable under conjugation
  by arbitrary arrows, _and_ that all identity arrows are contained in the subgroupoid.
* `subgroupoid.comap` is the "preimage" map of subgroupoids along a functor.
* `subgroupoid.map` is the "image" map of subgroupoids along a functor _injective on objects_.
* `subgroupoid.vertex_subgroup` is the subgroup of the `vertex group` at a given vertex `v`,
  assuming `v` is contained in the `subgroupoid` (meaning, by definition, that the arrow `ùüô v`
  is contained in the subgroupoid).

## Implementation details

The structure of this file is copied from/inspired by `group_theory.subgroup.basic`
and `combinatorics.simple_graph.subgraph`.

## TODO

* Equivalent inductive characterization of generated (normal) subgroupoids.
* Characterization of normal subgroupoids as kernels.

## Tags

subgroupoid

-/

open set classical function
local attribute [instance] prop_decidable

namespace category_theory

namespace groupoid

universes u v

variables {C : Type u} [groupoid C]


/--
A sugroupoid of `C` consists of a choice of arrows for each pair of vertices, closed
under composition and inverses
-/
@[ext] structure subgroupoid (C : Type u) [groupoid C] :=
(arrows : ‚àÄ (c d : C), set (c ‚ü∂ d))
(inv' : ‚àÄ {c d} {p : c ‚ü∂ d} (hp : p ‚àà arrows c d),
          groupoid.inv p ‚àà arrows d c)
(mul' : ‚àÄ {c d e} {p} (hp : p ‚àà arrows c d) {q} (hq : q ‚àà arrows d e),
          p ‚â´ q ‚àà arrows c e)

namespace subgroupoid

variable (S : subgroupoid C)

/-- The vertices of `C` on which `S` has non-trivial isotropy -/
def objs : set C := {c : C | (S.arrows c c).nonempty}

lemma id_mem_of_nonempty_isotropy (c : C) :
  c ‚àà objs S ‚Üí ùüô c ‚àà S.arrows c c :=
begin
  rintro ‚ü®Œ≥,hŒ≥‚ü©,
  convert S.mul' hŒ≥ (S.inv' hŒ≥),
  simp only [inv_eq_inv, is_iso.hom_inv_id],
end

/-- A subgroupoid seen as a quiver on vertex set `C` -/
def as_wide_quiver : quiver C := ‚ü®Œª c d, subtype $ S.arrows c d‚ü©

/-- Type synonym for the coercion of a subgroupoid as a groupoid -/
def coe (S : subgroupoid C) := subtype S.objs

instance [h : nonempty S.objs] : nonempty S.coe := h

/-- The coercion of a subgroupoid as a groupoid -/
instance coe_groupoid : groupoid S.coe :=
{ hom := Œª a b, S.arrows a.val b.val,
  id := Œª a, ‚ü®ùüô a.val, id_mem_of_nonempty_isotropy S a.val a.prop‚ü©,
  comp := Œª a b c p q, ‚ü®p.val ‚â´ q.val, S.mul' p.prop q.prop‚ü©,
  id_comp' := Œª a b ‚ü®p,hp‚ü©, by simp only [category.id_comp],
  comp_id' := Œª a b ‚ü®p,hp‚ü©, by simp only [category.comp_id],
  assoc' := Œª a b c d ‚ü®p,hp‚ü© ‚ü®q,hq‚ü© ‚ü®r,hr‚ü©, by simp only [category.assoc],
  inv := Œª a b p, ‚ü®inv p.val, S.inv' p.prop‚ü©,
  inv_comp' := Œª a b ‚ü®p,hp‚ü©, by simp only [inv_comp],
  comp_inv' := Œª a b ‚ü®p,hp‚ü©, by simp only [comp_inv] }

/-- There is an embedding of the coerced subgroupoid to its parent-/
def hom : (coe S) ‚•§ C :=
{ obj := Œª c, c.val,
  map := Œª c d f, f.val,
  map_id' := Œª c, rfl,
  map_comp' := Œª c d e f g, rfl }

lemma hom.inj_on_objects : function.injective (hom S).obj :=
by { rintros ‚ü®c,hc‚ü© ‚ü®d,hd‚ü© hcd, simp only [subtype.mk_eq_mk], exact hcd }

lemma hom.faithful :
  ‚àÄ c d, function.injective (Œª (f : c ‚ü∂ d), (hom S).map f) :=
by { rintros ‚ü®c,hc‚ü© ‚ü®d,hd‚ü© ‚ü®f,hf‚ü© ‚ü®g,hg‚ü© hfg, simp only [subtype.mk_eq_mk], exact hfg, }

/-- The subgroup of the vertex group at `c` given by the subgroupoid -/
def vertex_subgroup {c : C} (hc : c ‚àà S.objs) : subgroup (c ‚ü∂ c) :=
{ carrier  := S.arrows c c,
  mul_mem' := Œª f g hf hg, S.mul' hf hg,
  one_mem' := id_mem_of_nonempty_isotropy _ _ hc,
  inv_mem' := Œª f hf, S.inv' hf }

/-- A¬†subgroupoid seen as a set of arrows -/
def coe_set (S : subgroupoid C) : set (Œ£ (c d : C), c ‚ü∂ d) := {F | F.2.2 ‚àà S.arrows F.1 F.2.1 }

private lemma mem_coe_set_iff' (S : subgroupoid C) {c d : C} (f : c ‚ü∂ d) :
  (‚ü®c,d,f‚ü© : Œ£ (c d : C), c ‚ü∂ d) ‚àà S.coe_set ‚Üî f ‚àà S.arrows c d := by refl

instance : set_like (subgroupoid C) (Œ£ (c d : C), c ‚ü∂ d) :=
{ coe := coe_set,
  coe_injective' := Œª S T h, by
  { ext c d f, simp_rw [‚Üêmem_coe_set_iff',h], } }

@[simp] lemma mem_coe_set_iff (S : subgroupoid C) {c d : C} (f : c ‚ü∂ d) :
  (‚ü®c,d,f‚ü© : Œ£ (c d : C), c ‚ü∂ d) ‚àà S ‚Üî f ‚àà S.arrows c d := mem_coe_set_iff' S f

@[simp] lemma le_iff (S T : subgroupoid C) : (S ‚â§ T) ‚Üî (‚àÄ {c d}, (S.arrows c d) ‚äÜ (T.arrows c d)) :=
begin
  split,
  { rintro h c d f, simp only [‚Üêmem_coe_set_iff], apply h, },
  { rintro h ‚ü®c,d,f‚ü©, simp only [mem_coe_set_iff], apply h, },
end

instance : has_top (subgroupoid C) :=
‚ü® { arrows := (Œª _ _, set.univ),
    mul'   := by { rintros, trivial, },
    inv'   := by { rintros, trivial, } } ‚ü©
instance : has_bot (subgroupoid C) :=
‚ü® { arrows := (Œª _ _, ‚àÖ),
    mul'   := by { rintros, exfalso, assumption, },
    inv'   := by { rintros, exfalso, assumption, } } ‚ü©

instance : inhabited (subgroupoid C) := ‚ü®‚ä§‚ü©

instance : has_inf (subgroupoid C) :=
‚ü® Œª S T,
  { arrows := (Œª c d, (S.arrows c d) ‚à© (T.arrows c d)),
    inv'   := by { rintros, exact ‚ü®S.inv' hp.1, T.inv' hp.2‚ü©, },
    mul'   := by { rintros, exact ‚ü®S.mul' hp.1 hq.1, T.mul' hp.2 hq.2‚ü©, } } ‚ü©

instance : has_Inf (subgroupoid C) :=
‚ü® Œª s,
  { arrows := (Œª c d, set.Inter (Œª (S : s), S.val.arrows c d)),
    inv'   := by
    { rintros,
      simp only [Inter_coe_set, mem_Inter] at hp ‚ä¢,
      exact Œª S Ss, S.inv' (hp S Ss)},
    mul'   := by
    { rintros,
      simp only [Inter_coe_set, mem_Inter] at hp hq ‚ä¢,
      exact Œª S Ss, S.mul' (hp S Ss) (hq S Ss), } } ‚ü©

instance : complete_lattice (subgroupoid C) :=
{ bot          := (‚ä•),
  bot_le       := Œª S, empty_subset _,
  top          := (‚ä§),
  le_top       := Œª S, subset_univ _,
  inf          := (‚äì),
  le_inf       := Œª R S T RS RT ‚ü®c,d,f‚ü© h, ‚ü®RS h, RT h‚ü©,
  inf_le_left  := Œª R S ‚ü®c,d,f‚ü© pRS, pRS.left,
  inf_le_right := Œª R S ‚ü®c,d,f‚ü© pRS, pRS.right,
  .. complete_lattice_of_Inf (subgroupoid C)
       ( by
        { dsimp only [Inf], rintro s, constructor,
          { rintro S Ss ‚ü®c,d,f‚ü©,
            simp only [Inter_coe_set, mem_Inter, mem_coe_set_iff],
            exact Œª hp, hp S Ss, },
          { rintro T Tl ‚ü®c,d,f‚ü© fT,
            simp only [Inter_coe_set, mem_Inter, mem_coe_set_iff],
            exact Œª S Ss, (Tl Ss) fT, }}) }

lemma le_objs {S T : subgroupoid C} (h : S ‚â§ T) : S.objs ‚äÜ T.objs :=
Œª s ‚ü®Œ≥, hŒ≥‚ü©, ‚ü®Œ≥, by { rw ‚Üêmem_coe_set_iff at hŒ≥ ‚ä¢, exact h hŒ≥, }‚ü©

/-- The functor associated to the embedding of subgroupoids -/
def inclusion {S T : subgroupoid C} (h : S ‚â§ T) : S.coe ‚•§ T.coe :=
{ obj := Œª s, ‚ü®s.val, le_objs h s.prop‚ü©,
  map := Œª s t f, ‚ü®f.val, by { rw ‚Üêmem_coe_set_iff, apply h, rw mem_coe_set_iff, exact f.prop, } ‚ü©,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

lemma inclusion_inj_on_objects {S T : subgroupoid C} (h : S ‚â§ T) :
  function.injective (inclusion h).obj :=
begin
  rintros ‚ü®s,hs‚ü© ‚ü®t,ht‚ü© he,
  simp only [inclusion, subtype.mk_eq_mk] at he ‚ä¢,
  exact he,
end

lemma inclusion_faithful {S T : subgroupoid C} (h : S ‚â§ T) (s t : S.coe):
  function.injective (Œª (f : s ‚ü∂ t), (inclusion h).map f) :=
begin
  dsimp only [inclusion],
  rintros ‚ü®f,hf‚ü© ‚ü®g,hg‚ü© he,
  simp only [subtype.mk_eq_mk] at he ‚ä¢,
  exact he,
end

lemma inclusion_refl {S : subgroupoid C} : inclusion (le_refl S) = ùü≠ S.coe :=
begin
  dsimp only [inclusion],
  fapply functor.ext,
  { rintros,
    simp only [subtype.val_eq_coe, subtype.coe_eta, functor.id_obj], },
  { rintros ‚ü®s,hs‚ü© ‚ü®t,ht‚ü© ‚ü®f,hf‚ü©,
    simp only [eq_to_hom_refl, functor.id_map, category.comp_id, category.id_comp,
               subtype.mk_eq_mk], }
end

lemma inclusion_trans {R S T : subgroupoid C} (k : R ‚â§ S) (h : S ‚â§ T) :
  inclusion (k.trans h) = (inclusion k) ‚ãô (inclusion h) :=
begin
  dsimp only [inclusion],
  fapply functor.ext,
  { rintros, simp only [functor.comp_obj], },
  { rintros ‚ü®s,hs‚ü© ‚ü®t,ht‚ü© ‚ü®f,hf‚ü©,
    simp only [eq_to_hom_refl, functor.comp_map, category.comp_id, category.id_comp,
    subtype.mk_eq_mk], }
end

lemma inclusion_comp_embedding {S T : subgroupoid C} (h : S ‚â§ T) :
  (inclusion h) ‚ãô T.hom = S.hom :=
begin
  dsimp only [inclusion, hom],
  fapply functor.ext,
  { rintros, simp only [functor.comp_obj, subtype.val_eq_coe], },
  { rintros ‚ü®s,hs‚ü© ‚ü®t,ht‚ü© ‚ü®f,hf‚ü©,
    simp only [functor.comp_map, subtype.coe_mk, eq_to_hom_refl, category.comp_id,
    category.id_comp], }
end

/-- The family of arrows of the discrete groupoid -/
inductive discrete.arrows : Œ† (c d : C), (c ‚ü∂ d) ‚Üí Prop
| id (c : C) : discrete.arrows c c (ùüô c)

/-- The only arrows of the discrete groupoid are the identity arrows-/
def discrete : subgroupoid C :=
{ arrows := discrete.arrows,
  inv' := by
  { rintros _ _ _ hp, induction hp, simp only [inv_eq_inv, is_iso.inv_id], constructor, },
  mul' := by
  { rintros _ _ _ _ hp _ hq, induction hp, induction hq, rw category.comp_id, constructor,} }

lemma mem_discrete_iff {c d : C} (f : c ‚ü∂ d):
  (f ‚àà (discrete).arrows c d) ‚Üî (‚àÉ (h : c = d), f = eq_to_hom h) :=
begin
  split,
  { intro hf, induction hf, simp only [eq_self_iff_true, exists_true_left, eq_to_hom_refl], },
  { rintro ‚ü®h,he‚ü©, subst_vars, constructor, }
end

/-- A¬†subgroupoid is normal if it is ‚Äúwide‚Äù (meaning that its carrier set is all of `C`)
    and satisfies the expected stability under conjugacy -/
structure is_normal : Prop :=
(wide : ‚àÄ c, (ùüô c) ‚àà (S.arrows c c))
(conj : ‚àÄ {c d} (p : c ‚ü∂ d) {Œ≥ : c ‚ü∂ c} (hs : Œ≥ ‚àà S.arrows c c),
              ((inv p) ‚â´ Œ≥ ‚â´ p) ‚àà (S.arrows d d))

lemma is_normal.conj' {S : subgroupoid C} (Sn : is_normal S) :
  ‚àÄ {c d} (p : d ‚ü∂ c) {Œ≥ : c ‚ü∂ c} (hs : Œ≥ ‚àà S.arrows c c), (p ‚â´ Œ≥ ‚â´ (inv p)) ‚àà (S.arrows d d) :=
Œª c d p Œ≥ hs, by { convert Sn.conj (inv p) hs, simp, }

lemma is_normal.conjugation_bij (Sn : is_normal S) {c d} (p : c ‚ü∂ d) :
  set.bij_on (Œª Œ≥ : c ‚ü∂ c, (inv p) ‚â´ Œ≥ ‚â´ p) (S.arrows c c) (S.arrows d d) :=
begin
  split,
  { rintro Œ≥ Œ≥S, apply Sn.conj, exact Œ≥S },
  split,
  { rintro Œ≥‚ÇÅ Œ≥‚ÇÅS Œ≥‚ÇÇ Œ≥‚ÇÇS h,
    let := p ‚â´=(h =‚â´ (inv p)),
    simp only [inv_eq_inv, category.assoc, is_iso.hom_inv_id, category.comp_id,
               is_iso.hom_inv_id_assoc] at this ‚ä¢,
    exact this, }, -- what's the quickest way here?
  { rintro Œ¥ Œ¥S, use (p ‚â´ Œ¥ ‚â´ (inv p)), split,
    { have : p = inv (inv p), by {simp only [inv_eq_inv, is_iso.inv_inv]},
      nth_rewrite 0 this,
      apply Sn.conj, exact Œ¥S, },
    { simp only [category.assoc, inv_comp, category.comp_id],
      simp only [‚Üêcategory.assoc, inv_comp, category.id_comp], }}
end

lemma top_is_normal : is_normal (‚ä§ : subgroupoid C) :=
{ wide := (Œª c, trivial),
  conj := (Œª a b c d e, trivial) }

lemma Inf_is_normal (s : set $ subgroupoid C) (sn : ‚àÄ S ‚àà s, is_normal S) : is_normal (Inf s) :=
{ wide := by
  { rintro c _ ‚ü®‚ü®S,Ss‚ü©,rfl‚ü©,
    exact (sn S Ss).wide c, },
  conj := by
  { rintros c d p Œ≥ hŒ≥ _ ‚ü®‚ü®S,Ss‚ü©,rfl‚ü©,
    refine (sn S Ss).conj p _,
    apply hŒ≥,
    use ‚ü®S,Ss‚ü©, } }

lemma is_normal.vertex_subgroup (Sn : is_normal S) (c : C) (cS : c ‚àà S.objs) :
  (S.vertex_subgroup cS).normal :=
begin
  constructor,
  rintros x hx y,
  simp only [vertex_group_mul, vertex_group.inv_eq_inv, category.assoc],
  have : y = inv (inv y), by { simp only [inv_eq_inv, is_iso.inv_inv], },
  nth_rewrite 0 this,
  simp only [‚Üêinv_eq_inv],
  apply Sn.conj, exact hx,
end

section generated_subgroupoid

-- TODO:¬†proof that generated is just "words in X" and generated_normal is similarly
variable (X : ‚àÄ c d : C, set (c ‚ü∂ d))

/-- The subgropoid generated by the set of arrows `X` -/
def generated : subgroupoid C :=
Inf {S : subgroupoid C | ‚àÄ c d, X c d ‚äÜ S.arrows c d}

/-- The normal sugroupoid generated by the set of arrows `X` -/
def generated_normal : subgroupoid C :=
Inf {S : subgroupoid C | (‚àÄ c d, X c d ‚äÜ S.arrows c d) ‚àß S.is_normal }

lemma generated_normal_is_normal : (generated_normal X).is_normal :=
Inf_is_normal _ (Œª S h, h.right)

end generated_subgroupoid

section hom

variables {D : Type*} [groupoid D] (œÜ : C ‚•§ D)

/--
A functor between groupoid defines a map of subgroupoids in the reverse direction
by taking preimages.
 -/
def comap (S : subgroupoid D) : subgroupoid C :=
{ arrows := Œª c d, {f : c ‚ü∂ d | œÜ.map f ‚àà S.arrows (œÜ.obj c) (œÜ.obj d)},
  inv'   := by
  { rintros,
    simp only [inv_eq_inv, mem_set_of_eq, functor.map_inv],
    simp only [‚Üêinv_eq_inv],
    simp only [mem_set_of_eq] at hp,
    apply S.inv', assumption, },
  mul'   := by
  { rintros,
    simp only [mem_set_of_eq, functor.map_comp],
    apply S.mul';
    assumption, } }


lemma comap_mono (S T : subgroupoid D) :
  S ‚â§ T ‚Üí comap œÜ S ‚â§ comap œÜ T :=
Œª ST ‚ü®c,d,p‚ü©, by { simp only [mem_coe_set_iff, le_iff] at ST ‚ä¢, exact Œª h, ST h, }

lemma is_normal_comap {S : subgroupoid D} (Sn : is_normal S) : is_normal (comap œÜ S) :=
{ wide := by
  { rintro c,
    dsimp only [comap],
    simp only [mem_set_of_eq, functor.map_id],
    apply Sn.wide, },
  conj := by
  { rintros c d f Œ≥ hŒ≥,
    dsimp only [comap],
    simp only [mem_set_of_eq, functor.map_comp, functor.map_inv, inv_eq_inv],
    rw [‚Üêinv_eq_inv],
    apply Sn.conj, exact hŒ≥, } }

/-- The kernel of a functor between subgroupoid is the preimage. -/
def ker : subgroupoid C := comap œÜ (discrete)

lemma mem_ker_iff {c d : C} (f : c ‚ü∂ d) :
  f ‚àà (ker œÜ).arrows c d ‚Üî ‚àÉ (h : œÜ.obj c = œÜ.obj d), œÜ.map f = eq_to_hom h :=
mem_discrete_iff (œÜ.map f)

/-- The family of arrows of the image of a subgroupoid under a functor injective on objects -/
inductive map.arrows (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) :
  Œ† (c d : D), (c ‚ü∂ d) ‚Üí Prop
| im {c d : C} (f : c ‚ü∂ d) (hf : f ‚àà S.arrows c d) : map.arrows (œÜ.obj c) (œÜ.obj d) (œÜ.map f)

lemma map.mem_arrows_iff (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) {c d : D} (f : c ‚ü∂ d):
  map.arrows œÜ hœÜ S c d f ‚Üî
  ‚àÉ (a b : C) (g : a ‚ü∂ b) (ha : œÜ.obj a = c) (hb : œÜ.obj b = d) (hg : g ‚àà S.arrows a b),
    f = (eq_to_hom ha.symm) ‚â´ œÜ.map g ‚â´ (eq_to_hom hb) :=
begin
  split,
  { rintro ‚ü®a,b,g,hg‚ü©,
    use [a,b,g,rfl,rfl,hg],
    simp only [eq_to_hom_refl, category.comp_id, category.id_comp], },
  { rintro ‚ü®a,b,g,ha,hb,hg,he‚ü©, subst_vars,
    simp only [eq_to_hom_refl, category.comp_id, category.id_comp],
    constructor, exact hg, },
end

/-- The "forward" image of a subgroupoid under a functor injective on objects -/
def map (hœÜ : function.injective œÜ.obj) (S : subgroupoid C) : subgroupoid D :=
{ arrows := map.arrows œÜ hœÜ S,
  inv'   := by
  { rintro _ _ _ hp, induction hp,
    rw [inv_eq_inv,‚Üêfunctor.map_inv], constructor,
    rw ‚Üêinv_eq_inv, apply S.inv', assumption, },
  mul'   := by -- Is there no way to prove this ‚Üì directly without the help of `map.mem_arrows_iff`?
  { rintro _ _ _ _ hp _ hq,
    obtain ‚ü®f‚ÇÄ,f‚ÇÅ,f,hf‚ÇÄ,hf‚ÇÅ,hf,fp‚ü© := (map.mem_arrows_iff œÜ hœÜ S p).mp hp,
    obtain ‚ü®g‚ÇÄ,g‚ÇÅ,g,hg‚ÇÄ,hg‚ÇÅ,hg,gq‚ü© := (map.mem_arrows_iff œÜ hœÜ S q).mp hq,
    simp only [has_mem.mem, map.mem_arrows_iff],
    have : f‚ÇÅ = g‚ÇÄ, by {apply hœÜ, exact hf‚ÇÅ.trans hg‚ÇÄ.symm, },
    induction this,
    refine ‚ü®f‚ÇÄ,g‚ÇÅ,f ‚â´ g,hf‚ÇÄ,hg‚ÇÅ,S.mul' hf hg,_‚ü©,
    subst_vars,
    simp only [eq_to_hom_refl, category.id_comp, category.assoc, functor.map_comp], } }

lemma map_mono (hœÜ : function.injective œÜ.obj) (S T : subgroupoid C) :
  S ‚â§ T ‚Üí map œÜ hœÜ S ‚â§ map œÜ hœÜ T :=
begin
  rintros ST ‚ü®c,d,f‚ü©,
  simp only [mem_coe_set_iff, le_iff] at ST ‚ä¢,
  rintro ‚ü®_,_,_,h‚ü©,
  constructor,
  exact ST h,
end

/-- The image of a functor injective on objects -/
def im (hœÜ : function.injective œÜ.obj) := map œÜ hœÜ (‚ä§)

lemma mem_im_iff (hœÜ : function.injective œÜ.obj) {c d : D} (f : c ‚ü∂ d) :
  f ‚àà (im œÜ hœÜ).arrows c d ‚Üî
  ‚àÉ (a b : C) (g : a ‚ü∂ b) (ha : œÜ.obj a = c) (hb : œÜ.obj b = d),
    f = (eq_to_hom ha.symm) ‚â´ œÜ.map g ‚â´ (eq_to_hom hb) :=
begin
  convert map.mem_arrows_iff œÜ hœÜ ‚ä§ f,
  dsimp [‚ä§,has_top.top],
  simp only [mem_univ, exists_true_left],
end

end hom

end subgroupoid

end groupoid

end category_theory
