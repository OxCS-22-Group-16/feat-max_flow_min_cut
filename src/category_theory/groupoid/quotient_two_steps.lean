import category_theory.groupoid
import category_theory.groupoid.basic
import category_theory.groupoid.subgroupoid


open set classical function
local attribute [instance] prop_decidable


namespace category_theory

open subgroupoid
open groupoid

universes u v

variables {C : Type u} [groupoid C] (S : subgroupoid C)

namespace quotient_groupoid

section isotropy
/-!
We first define what's here called ‚Äúisotropy quotient‚Äù:
Given a normal subgroupoid `S`, this quotient is collapses all loops of `S`, i.e.
all vertex groups.
After quotienting by these vertex groups, the image of `S` in the quotient `is_graph_like`
which is easy to quotient out again.
-/

section cgr


variables  (Sw : S.is_wide) {c d : C} (f g h : c ‚ü∂ d)

def cgr (c) (d) (f) (g) := ‚àÉ (Œ≥ ‚àà S.arrows c c) (Œ¥ ‚àà S.arrows d d), g = Œ≥ ‚â´ f ‚â´ Œ¥

lemma cgr.refl (f : c ‚ü∂ d) : cgr S c d f f :=  ‚ü®(ùüô c), Sw.wide c, (ùüô d), Sw.wide d, by simp ‚ü©
lemma cgr.symm {f g : c ‚ü∂ d} : cgr S c d f g ‚Üí cgr S c d g f :=
Œª ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©, ‚ü®inv Œ≥, S.inv hŒ≥, inv Œ¥, S.inv hŒ¥, by { rw e, simp, } ‚ü©
lemma cgr.tran {f g h : c ‚ü∂ d} : cgr S c d f g ‚Üí cgr S c d g h ‚Üí cgr S c d f h :=
Œª ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü© ‚ü®Œ¥',hŒ¥',Œµ,hŒµ,e'‚ü©,
‚ü®Œ¥' ‚â´ Œ≥, S.mul hŒ¥' hŒ≥, Œ¥ ‚â´ Œµ, S.mul hŒ¥ hŒµ, by {rw [e',e], simp, }‚ü©

def cgr.setoid : setoid (c ‚ü∂ d) :=
{ r := cgr S c d , iseqv := ‚ü®Œª f, cgr.refl S Sw f, Œª f g, cgr.symm S, Œª f g h, cgr.tran S‚ü© }



end cgr

def isotropy.quotient (S : subgroupoid C) (Sn : S.is_normal) := C

namespace isotropy

variable (Sn : S.is_normal)

instance : groupoid (isotropy.quotient S Sn) :=
{ hom := Œª c d, quot (cgr S c d),
  id := Œª c, quot.mk _ (ùüô c),
  comp := Œª a b c f g,
    quot.lift_on‚ÇÇ f g
      ( Œª f g, quot.mk (cgr S a c) (f ‚â´ g) )
      ( Œª f g‚ÇÅ g‚ÇÇ ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©,
        quot.sound ‚ü®(f ‚â´ Œ≥ ‚â´ inv f), Sn.conj' f hŒ≥, Œ¥, hŒ¥, by { rw e, simp only [inv_eq_inv, category.assoc, is_iso.inv_hom_id_assoc], } ‚ü© )
      ( Œª f‚ÇÅ f‚ÇÇ g ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©,
        quot.sound ‚ü®Œ≥, hŒ≥, (inv g ‚â´ Œ¥ ‚â´ g), Sn.conj g hŒ¥, by { rw e, simp only [category.assoc, inv_eq_inv, is_iso.hom_inv_id_assoc], } ‚ü© ),
  comp_id' := Œª a b, by
    { refine quot.ind (Œª f, _),
      simp only [quot.lift_on‚ÇÇ_mk, category.comp_id], },
  id_comp' := Œª a b, by
    { refine quot.ind (Œª f, _),
      simp only [quot.lift_on‚ÇÇ_mk, category.id_comp], },
  assoc' :=  Œª a b c d f g h, by
    { refine quot.induction_on‚ÇÉ f g h (Œª f g h, _),
      simp only [quot.lift_on‚ÇÇ_mk, category.assoc],  },
  inv := Œª a b f,
    quot.lift_on f
      ( Œª f, quot.mk (cgr S b a) (inv f) )
      ( Œª f‚ÇÅ f‚ÇÇ ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©, quot.sound ‚ü®inv Œ¥, S.inv hŒ¥, inv Œ≥, S.inv hŒ≥, by { rw e, simp, } ‚ü© ),
  comp_inv' := Œª a b f, by
    { refine quot.induction_on f (Œª f, _),
      simp only [quot.lift_on‚ÇÇ_mk, inv_eq_inv, is_iso.hom_inv_id], },
  inv_comp' := Œª a b f, by
    { refine quot.induction_on f (Œª f, _),
      simp only [quot.lift_on‚ÇÇ_mk, inv_eq_inv, is_iso.inv_hom_id], }, }

def of : C ‚•§ (quotient S Sn) :=
{ obj := Œª c, c,
  map := Œª c d f, quot.mk _ f,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, rfl, }

lemma of_inj_on_objects : function.injective (of S Sn).obj := by { intros a b e, assumption }

lemma of_onto : im (of S Sn) (of_inj_on_objects S Sn) = (‚ä§ : subgroupoid $ quotient S Sn) :=
le_antisymm (le_top) $ Œª ‚ü®c,d,f‚ü© _, quot.induction_on f (Œª f, by { constructor, constructor, })


/-- The image of `S` via the quotient is graph-like (since every loop is killed, essentially) -/
lemma map_is_graph_like : (map (of S Sn) (of_inj_on_objects S Sn) S).is_graph_like :=
begin
  rw subgroupoid.is_graph_like_iff,
  rintro c d,
  constructor,
  rintro ‚ü®_,hf‚ü© ‚ü®_,hg‚ü©,
  cases hf,
  cases hg,
  simp only [subtype.mk_eq_mk],
  apply quot.sound,
  refine ‚ü®ùüô _, Sn.wide _, inv hf_f ‚â´ hg_f, S.mul (S.inv _) _, _‚ü©,
  assumption,
  assumption,
  simp only [inv_eq_inv, is_iso.hom_inv_id_assoc, category.id_comp],
end

section ump
/-!
The universal mapping property of the quotient by the isotropy part of a normal subgroupoid.
-/

variables  {D : Type*} [groupoid D]
  (œÜ : C ‚•§ D)
  (hœÜ : S.disconnect ‚â§ ker œÜ)

include hœÜ

/--
Given a morphism `œÜ : C ‚•§ D` containing the isotropy part of `S` in its kernel, get a
morphism from the isotropy quotient.
-/
def lift : (quotient S Sn) ‚•§ D :=
{ obj := Œª c, œÜ.obj c,
  map := Œª c d f,
    quot.lift_on f
      ( Œª f, œÜ.map f )
      ( Œª f‚ÇÅ f‚ÇÇ ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©, by
        { rw subgroupoid.le_iff at hœÜ,
          let Œ≥' : Œ≥ ‚àà S.disconnect.arrows c c := by {constructor, exact hŒ≥, },
          let hœÜŒ≥ := hœÜ Œ≥',
          let Œ¥' : Œ¥ ‚àà S.disconnect.arrows d d := by {constructor, exact hŒ¥, },
          let hœÜŒ¥ := hœÜ Œ¥',
          simp only [mem_ker_iff, eq_self_iff_true,
                     exists_true_left] at hœÜŒ≥ hœÜŒ¥,
          simp only [e, functor.map_comp, hœÜŒ≥, hœÜŒ¥, category.comp_id, category.id_comp,
                     eq_to_hom_refl], } ),
  map_id' := Œª c, by
  { rw ‚Üêfunctor.map_id œÜ c, refl, },
  map_comp' := Œª a b c f g, by
  { apply quot.induction_on‚ÇÇ f g, rintros, rw ‚Üêfunctor.map_comp œÜ, refl, } }

lemma lift_spec : (of S Sn) ‚ãô (lift S Sn œÜ hœÜ) = œÜ :=
begin
  apply functor.ext,
  { rintros, dsimp only [of, lift],
    simp only [functor.comp_map, eq_to_hom_refl, category.comp_id, category.id_comp], },
  { rintros, dsimp only [of, lift],
    simp only [functor.comp_obj], },
end

lemma lift_unique (Œ¶ : (quotient S Sn) ‚•§ D) (hŒ¶ : (of S Sn) ‚ãô Œ¶ = œÜ) :
  Œ¶ = (lift S Sn œÜ hœÜ) :=
begin
  subst_vars,
  apply functor.ext,
  { rintros, dsimp [of, lift],
    apply quot.induction_on f,
    rintro f,
    simp only [quot.lift_on_mk, functor.comp_map, category.comp_id, category.id_comp], },
  { rintros, dsimp only [of, lift], refl, }
end

end ump

/-- The kernel of the morphism `of S Sn : C ‚•§ (quotient S Sn)` is exactly `S.disconnect`. -/
lemma ker_eq : ker (of S Sn) = S.disconnect :=
begin
  ext c d f,
  split,
  { rintro hf,
    rw mem_ker_iff at hf,
    obtain ‚ü®h,e‚ü© := hf,
    rw mem_disconnect_iff,
    dsimp [of] at h e, subst h,
    simp only [eq_self_iff_true, true_and],
    have := @quotient.exact (c ‚ü∂ c) (cgr.setoid S ‚ü®Sn.wide‚ü©) _ _ e,
    rcases cgr.symm S this with ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,rfl‚ü©,
    apply S.mul hŒ≥ (S.mul (id_mem_of_tgt S hŒ¥) hŒ¥), },
  { rintro ‚ü®_,f,hf‚ü©,
    rw mem_ker_iff,
    refine ‚ü®rfl,_‚ü©,
    show quot.mk _ f = quot.mk _ (ùüô _),
    apply quot.sound,
    refine ‚ü®inv f, S.inv hf, ùüô _, id_mem_of_tgt S hf,_‚ü©,
    simp only [inv_eq_inv, category.comp_id, is_iso.inv_hom_id], }
end


end isotropy

end isotropy

namespace graph_like
/-!
Quotient of a groupoid by a normal, graph-like subgroupoid.
By graph-likeness, the quotient be represented by the full subgroupoid induced by taking any
set of representatives of the vertices, which makes dealing with quotients easier.
-/

variables (Sw : S.is_wide)  (Sg : S.is_graph_like)


abbreviation r := Œª c d, nonempty (S.arrows c d)

lemma r.refl (c : C) : r S c c := ‚ü®‚ü®ùüô c, Sw.wide c‚ü©‚ü©
lemma r.symm {c d : C} : r S c d ‚Üí r S d c := Œª ‚ü®‚ü®f,fS‚ü©‚ü©, ‚ü®‚ü®inv f, S.inv fS‚ü©‚ü©
lemma r.tran {c d e : C} : r S c d ‚Üí r S d e ‚Üí r S c e := Œª ‚ü®‚ü®f,fS‚ü©‚ü© ‚ü®‚ü®g,gS‚ü©‚ü©, ‚ü®‚ü®f‚â´g, S.mul fS gS‚ü©‚ü©

def R : setoid C :=
{ r := r S ,  iseqv := ‚ü®Œª _, r.refl S Sw _, Œª _ _, r.symm S, Œª _ _ _, r.tran S‚ü© }

instance : setoid C := R S Sw

def reps : set C := set.range (@quotient.out C (R S Sw))

noncomputable def to_reps : C ‚Üí reps S Sw :=
Œª c,
‚ü® @_root_.quotient.out C (R S Sw) (@_root_.quotient.mk C (R S Sw) c),
  ‚ü® @_root_.quotient.mk C (R S Sw) c, rfl ‚ü© ‚ü©

def of_reps : reps S Sw ‚Üí C := Œª c, c.val

lemma of_to_reps_congr (c : C) : (R S Sw).r (of_reps S Sw (to_reps S Sw c)) c :=
begin
  letI := R S Sw,
  change (of_reps S Sw (to_reps S Sw c)) ‚âà c,
  apply quotient.exact,
  dsimp [of_reps, to_reps],
  rw quotient.out_eq,
end

noncomputable def to_reps_arrow (c : C) : c ‚ü∂ of_reps S Sw (to_reps S Sw c) :=
(r.symm S (of_to_reps_congr S Sw c)).some.val

lemma to_reps_arrow_mem (c : C) :
  (to_reps_arrow S Sw c) ‚àà (S.arrows c (of_reps S Sw (to_reps S Sw c))) :=
(r.symm S (of_to_reps_congr S Sw c)).some.prop


include Sg Sw
lemma to_reps_arrow_unique {c : C}
  {Œ≥ : c ‚ü∂ of_reps S Sw (to_reps S Sw c)}
  (hŒ≥ : Œ≥ ‚àà S.arrows c (of_reps S Sw (to_reps S Sw c))) :
  Œ≥ = to_reps_arrow S Sw c :=
begin
  rw subgroupoid.is_graph_like_iff at Sg,
  rw is_wide_objs S Sw at Sg, simp at Sg,
  apply Sg, exact hŒ≥, apply to_reps_arrow_mem,
end
omit Sg Sw

lemma to_of_reps_eq (cc : reps S Sw) : (to_reps S Sw $ of_reps S Sw cc) = cc :=
begin
  dsimp [of_reps, to_reps],
  rcases cc with ‚ü®_,‚ü®x,rfl‚ü©‚ü©,
  simp only [subtype.coe_mk, quotient.out_eq, subtype.mk_eq_mk],
end

def quotient := (subgroupoid.full $ reps S Sw).objs

instance : groupoid (quotient S Sw) := (subgroupoid.full $ reps S Sw).coe

noncomputable def of : C ‚•§ quotient S Sw :=
{ obj := Œª c,
  ‚ü® to_reps S Sw c,
    by { dsimp [quotient], rw full_objs, simp only [subtype.coe_prop], } ‚ü©,
  map := Œª c d f,
    let
      Œ≥ := (of_to_reps_congr S Sw c).some.val,
      Œ¥ := inv (of_to_reps_congr S Sw d).some.val
    in
      ‚ü®Œ≥ ‚â´ f ‚â´ Œ¥, by { constructor; simp, } ‚ü©,
  map_id' := Œª _, by
    { simp only [subtype.val_eq_coe, inv_eq_inv, category.id_comp, is_iso.hom_inv_id],
      refl, },
  map_comp' := Œª x y z f g, by
    { ext, simp only [inv_eq_inv, category.assoc, subtype.coe_mk,
                      coe_to_category_comp_coe, is_iso.inv_hom_id_assoc], } }

lemma ker_of : ker (of S Sw) = S :=
begin
  sorry
  /-dsimp only [of],
  ext c d f,
  split,
  { rw mem_ker_iff,

    rintro ‚ü®h,he‚ü©,
    simp only [inv_eq_inv, subtype.mk_eq_mk, to_reps] at h he,
    simp at h,
    rcases h with ‚ü®hcd,hh‚ü©,
    sorry,
     },
  { rintro, rw mem_ker_iff, simp, }-/
end

def fo : (quotient S Sw) ‚•§ C := subgroupoid.hom _

lemma of_fo_obj (c: quotient S Sw) : (of S Sw).obj ((fo S Sw).obj c) = c :=
begin
  cases c,
  cases c_property,
  rcases c_property_h,
  rcases c_property_h_hc with ‚ü®_,rfl‚ü©,
  dsimp [of, fo, subgroupoid.hom, subgroupoid.full, to_reps],
  simp only [quotient.out_eq, subtype.mk_eq_mk],
end


lemma of_fo_map {c d : quotient S Sw} (f : c ‚ü∂ d) :
  (of S Sw).map ((fo S Sw).map f)
= (eq_to_hom $ of_fo_obj S Sw c) ‚â´ f ‚â´ (eq_to_hom $ (of_fo_obj S Sw d).symm) :=
begin
  sorry,
  /-
  cases c,
  cases c_property,
  rcases c_property_h,
  rcases c_property_h_hc with ‚ü®_,rfl‚ü©,
  cases d,
  cases d_property,
  rcases d_property_h,
  rcases d_property_h_hc with ‚ü®_,rfl‚ü©,
  dsimp [of, fo, subgroupoid.hom, subgroupoid.full, to_reps],
  simp,-/
end

section ump

variables {D : Type*} [groupoid D] (œÜ : C ‚•§ D) (hœÜ : S ‚â§ ker œÜ)

def lift : quotient S Sw ‚•§ D := (fo S Sw) ‚ãô œÜ

include hœÜ
lemma lift_spec : (of S Sw) ‚ãô (lift S Sw œÜ) = œÜ :=
begin
  dsimp only [lift, of, fo, subgroupoid.full, subgroupoid.hom],
  rw le_iff at hœÜ,
  fapply functor.ext,
  { rintro c,
    obtain ‚ü®Œ≥,Œ≥S‚ü© := (of_to_reps_congr S Sw c).some,
    let := hœÜ Œ≥S, rw mem_ker_iff at this,
    exact this.some, },
  { rintro c d f,
    simp only [subtype.val_eq_coe, inv_eq_inv, functor.comp_map,
               functor.map_comp, functor.map_inv],
    obtain ‚ü®Œ≥,hŒ≥‚ü© := (of_to_reps_congr S Sw c).some,
    obtain ‚ü®Œ¥,hŒ¥‚ü© := (of_to_reps_congr S Sw d).some,
    let hŒ≥' := hœÜ hŒ≥,
    let hŒ¥' := hœÜ hŒ¥,
    rw mem_ker_iff at hŒ≥' hŒ¥',
    obtain ‚ü®eŒ≥,hŒ≥''‚ü© := hŒ≥',
    obtain ‚ü®eŒ¥,hŒ¥''‚ü© := hŒ¥',
    simp only [subtype.coe_mk,hŒ¥'',hŒ≥'',inv_eq_to_hom], },
end

omit hœÜ
lemma _root_.category_theory.functor.map_eq_to_hom
  (C D : Type*) [category C] [category D] (F : C ‚•§ D) (c c' : C) (h : c = c') :
  F.map (eq_to_hom h) = eq_to_hom (congr_arg F.obj h) :=
by { cases h, simp only [eq_to_hom_refl, functor.map_id], }

include hœÜ
lemma lift_unique (Œ¶ : quotient S Sw ‚•§ D) (hŒ¶ : (of S Sw) ‚ãô Œ¶ = œÜ) :
  Œ¶ = (lift S Sw œÜ) :=
begin
  letI := R S Sw,
  subst_vars,
  dsimp [lift],
  rw le_iff at hœÜ,
  fapply functor.ext,
  { simp only [functor.comp_obj, set_coe.forall],
    rintro x h,
    rw of_fo_obj, },
  { simp only [set_coe.forall, functor.comp_map],
    rintro x h y k f,
    rw of_fo_map,
    simp only [functor.map_eq_to_hom, functor.map_comp, category.assoc, eq_to_hom_trans,
               eq_to_hom_refl, category.comp_id, eq_to_hom_trans_assoc, category.id_comp], },
end


end ump

end graph_like

section quotient
/-- The _actual_ quotient by `S`. -/

variable (Sn : S.is_normal)

def _root_.category_theory.groupoid.quotient :=
  graph_like.quotient
    (map (isotropy.of S Sn) (isotropy.of_inj_on_objects S Sn) S)
    (subgroupoid.is_normal_map
      S
      (isotropy.of S Sn)
      (isotropy.of_inj_on_objects S Sn)
      (isotropy.of_onto S Sn)
      Sn).to_is_wide

instance quotient_groupoid : groupoid (groupoid.quotient S Sn) :=
  graph_like.quotient.category_theory.groupoid
    (map /-(isotropy.of S Sn)-/ _ (isotropy.of_inj_on_objects S Sn) S)
    (is_normal_map
      /-S-/ _
      /-(isotropy.of S Sn)-/ _
      (isotropy.of_inj_on_objects S Sn)
      (isotropy.of_onto S Sn)
      Sn).to_is_wide

noncomputable def of : C ‚•§ groupoid.quotient S Sn := (isotropy.of _ _) ‚ãô (graph_like.of _ _)

section ump

variables {D : Type*} [groupoid D] (œÜ : C ‚•§ D) (hœÜ : S ‚â§ ker œÜ)

include hœÜ
def lift : groupoid.quotient S Sn ‚•§ D :=
begin
  apply graph_like.lift,
  fapply isotropy.lift,
  exact œÜ,
  rintro c Œ≥ Œ≥S, exact hœÜ Œ≥S,
end

lemma lift_spec : (of S Sn) ‚ãô (lift S Sn œÜ hœÜ) = œÜ :=
begin
  change isotropy.of S Sn ‚ãô (graph_like.of (map (isotropy.of S Sn) _ S) _) ‚ãô
    graph_like.lift (map (isotropy.of S Sn) _ S) _ (isotropy.lift S Sn œÜ _) = œÜ,
  rw graph_like.lift_spec,
  apply isotropy.lift_spec,
  { rintros a b f ‚ü®_,_,g,gS‚ü©,
    exact hœÜ gS, },
end


def lift_unique (Œ¶ : groupoid.quotient S Sn ‚•§ D) (hŒ¶ : (of S Sn) ‚ãô Œ¶ = œÜ) :
  Œ¶ = (lift S Sn œÜ hœÜ) :=
begin
  apply graph_like.lift_unique,
  { rintros a b f ‚ü®_,_,g,gS‚ü©,
    exact hœÜ gS, },
  apply isotropy.lift_unique,
  exact hŒ¶,
end

end ump

end quotient

end quotient_groupoid

end category_theory
