import category_theory.groupoid.vertex_group
import category_theory.groupoid.subgroupoid
import category_theory.groupoid
import category_theory.groupoid.basic


open set classical function
local attribute [instance] prop_decidable


namespace category_theory

universes u v

namespace groupoid

variables {C : Type u} [groupoid C] (S : subgroupoid C) (Sn : S.is_normal)

namespace subgroupoid

section isotropy_quotient

section congr

variables {c d : C} (f g h : c ‚ü∂ d)

def congr := ‚àÉ (Œ≥ ‚àà S.arrws c c) (Œ¥ ‚àà S.arrws d d), g = Œ≥ ‚â´ f ‚â´ Œ¥
def cgr (c) (d) (f) (g) := ‚àÉ (Œ≥ ‚àà S.arrws c c) (Œ¥ ‚àà S.arrws d d), g = Œ≥ ‚â´ f ‚â´ Œ¥


lemma congr.refl (f : c ‚ü∂ d) : congr S f f :=  ‚ü®(ùüô c), Sn.wide c, (ùüô d), Sn.wide d, by simp ‚ü©
lemma congr.symm {f g : c ‚ü∂ d} : congr S f g ‚Üí congr S g f :=
Œª ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©, ‚ü®inv Œ≥, S.inv' hŒ≥, inv Œ¥, S.inv' hŒ¥, by { rw e, simp, } ‚ü©
lemma congr.tran {f g h : c ‚ü∂ d} : congr S f g ‚Üí congr S g h ‚Üí congr S f h :=
Œª ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü© ‚ü®Œ¥',hŒ¥',Œµ,hŒµ,e'‚ü©,
‚ü®Œ¥' ‚â´ Œ≥, S.mul' hŒ¥' hŒ≥, Œ¥ ‚â´ Œµ, S.mul' hŒ¥ hŒµ, by {rw [e',e], simp, }‚ü©

def R (c d) : setoid (c ‚ü∂ d) :=
{ r := congr S ,  iseqv := ‚ü®Œª _, congr.refl S Sn _, Œª _ _, congr.symm S, Œª _ _ _, congr.tran S‚ü© }

end congr

def isotropy_quotient (S : subgroupoid C) (Sn : S.is_normal) := C

@[instance,simps]
def category_struct_isotropy_quotient : category_struct (isotropy_quotient S Sn) :=
{ hom := Œª c d, quot (cgr S c d),
  id := Œª c, quot.mk _ (ùüô c),
  comp := Œª a b c f g,
    quot.lift_on‚ÇÇ f g
      ( Œª f g, quot.mk (cgr S a c) (f ‚â´ g) )
      ( Œª f g‚ÇÅ g‚ÇÇ ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©,
        quot.sound ‚ü®(f ‚â´ Œ≥ ‚â´ inv f), Sn.conj' f Œ≥ hŒ≥, Œ¥, hŒ¥, by { rw e, simp, } ‚ü© )
      ( Œª f‚ÇÅ f‚ÇÇ g ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©,
        quot.sound ‚ü®Œ≥, hŒ≥, (inv g ‚â´ Œ¥ ‚â´ g), Sn.conj g Œ¥ hŒ¥, by { rw e, simp, } ‚ü© ) }

instance groupoid_isotropy_quotient : groupoid (isotropy_quotient S Sn) :=
{ to_category_struct := category_struct_isotropy_quotient S Sn,
  comp_id' := Œª a b, by
    { refine quot.ind (Œª f, _),
      rw [category_struct_isotropy_quotient_id, category_struct_isotropy_quotient_comp,
      quot.lift_on‚ÇÇ_mk, category.comp_id], },
  id_comp' := Œª a b, by
    { refine quot.ind (Œª f, _),
      rw [category_struct_isotropy_quotient_id, category_struct_isotropy_quotient_comp,
      quot.lift_on‚ÇÇ_mk, category.id_comp], },
  assoc' :=  Œª a b c d f g h, by
    { refine quot.induction_on‚ÇÉ f g h (Œª f g h, _),
      simp [category_struct_isotropy_quotient_comp, quot.lift_on‚ÇÇ_mk, category.assoc],  },
  inv := Œª a b f,
    quot.lift_on f
      ( Œª f, quot.mk (cgr S b a) (inv f) )
      ( Œª f‚ÇÅ f‚ÇÇ ‚ü®Œ≥,hŒ≥,Œ¥,hŒ¥,e‚ü©, quot.sound ‚ü®inv Œ¥, S.inv' hŒ¥, inv Œ≥, S.inv' hŒ≥, by { rw e, simp, } ‚ü© ),
  comp_inv' := Œª a b f, by
    { refine quot.induction_on f (Œª f, _),
      simp, },
  inv_comp' := Œª a b f, by
    { refine quot.induction_on f (Œª f, _),
      simp, }, }

def of : C ‚•§ (isotropy_quotient S Sn) :=
{ obj := Œª c, c,
  map := Œª c d f, quot.mk _ f,
  map_id' := Œª c, by simp,
  map_comp' := Œª a b c f g, by simp }

lemma of_injective : function.injective (of S Sn).obj := by { intros a b e, assumption }

lift 


end isotropy_quotient




namespace is_graph_like
/-!
Quotient of a groupoid by a normal, graph-like subgroupoid.
By graph-likeness, the quotient be represented by the full subgroupoid induced by taking any
set of representatives of the vertices, which makes dealing with quotients easier.
-/

variable (Sg : is_graph_like (S.coe))

abbreviation r := Œª c d, nonempty (S.arrws c d)

lemma r.refl (c : C) : r S c c := ‚ü®‚ü®ùüô c, Sn.wide c‚ü©‚ü©
lemma r.symm {c d : C} : r S c d ‚Üí r S d c := Œª ‚ü®‚ü®f,fS‚ü©‚ü©, ‚ü®‚ü®inv f, S.inv' fS‚ü©‚ü©
lemma r.tran {c d e : C} : r S c d ‚Üí r S d e ‚Üí r S c e := Œª ‚ü®‚ü®f,fS‚ü©‚ü© ‚ü®‚ü®g,gS‚ü©‚ü©, ‚ü®‚ü®f‚â´g, S.mul' fS gS‚ü©‚ü©

 def R : setoid C :=
{ r := r S ,  iseqv := ‚ü®Œª _, r.refl S Sn _, Œª _ _, r.symm S, Œª _ _ _, r.tran S‚ü© }

instance : setoid C := R S Sn

def C_by_r := _root_.quotient (R S Sn)

def r_reps : set C := set.range (@quotient.out C (R S Sn))

def quotient := (full_on $ r_reps S Sn).coe

instance : groupoid (quotient S Sn) := (full_on $ r_reps S Sn).coe_groupoid

abbreviation qmk := @_root_.quotient.mk _ (R S Sn)
noncomputable abbreviation qout := @quotient.out _ (R S Sn)
abbreviation qouteq := @quotient.out_eq _ (R S Sn)
abbreviation qex := @quotient.exact _ (R S Sn)

@[simp] lemma noname (c : C) : qout S Sn (qmk S Sn c) ‚àà r_reps S Sn := ‚ü®qmk S Sn c, rfl‚ü©

lemma qoutmk (c : C) : (R S Sn).r (qout S Sn (qmk S Sn c)) c :=
begin
  apply qex,
  simp only [quotient.out_eq],
end

noncomputable def of : C ‚•§ quotient S Sn :=
{ obj := Œª c,
  ‚ü® qout S Sn (qmk S Sn c),
    by { refine ‚ü®ùüô (qout S Sn $ qmk S Sn c),_‚ü©, constructor; simp, } ‚ü©,
  map := Œª c d f,
    let
      Œ≥ := (qex S Sn (qouteq S Sn (qmk S Sn c))).some.val,
      Œ¥ := inv (qex S Sn (qouteq S Sn (qmk S Sn d))).some.val
    in
      ‚ü®Œ≥ ‚â´ f ‚â´ Œ¥, by { constructor; simp, } ‚ü©,
  map_id' := Œª _, by
    { simp only [subtype.val_eq_coe, inv_eq_inv, category.id_comp, is_iso.hom_inv_id],
      refl, },
  map_comp' := Œª _ _ _ _ _, by
    { ext,
      simp only [inv_eq_inv, category.assoc, subtype.coe_mk, coe_groupoid_to_category_comp_coe,
                 is_iso.inv_hom_id_assoc], } }

def fo : (quotient S Sn) ‚•§ C := coe_embedding _


lemma fo_of : (fo S Sn) ‚ãô (of S Sn) = ùü≠ _ :=
begin
  dsimp only [of,fo,coe_embedding,full_on],
  simp only [inv_eq_inv],
  fapply functor.ext,
  { rintro ‚ü®c,hc‚ü©,
    simp only [functor.comp_obj, functor.id_obj, subtype.mk_eq_mk],
    cases hc, cases hc_h, cases hc_h_hc, subst_vars,
    simp only [quotient.out_inj], apply quotient.out_eq, },
  { rintros ‚ü®c,hc‚ü© ‚ü®d,hd‚ü© ‚ü®f,hf‚ü©,
    simp only [functor.comp_map, functor.id_map],
    cases hc, cases hc_h, cases hc_h_hc,
    cases hd, cases hd_h, cases hd_h_hd,
    cases hf, cases hf_hc, cases  hf_hd,
    subst_vars, ext, simp,
    sorry,
   }
end


section ump

variables {D : Type*} [groupoid D] (œÜ : C ‚•§ D) (hœÜ : S ‚â§ ker œÜ)

def lift : quotient S Sn ‚•§ D := (fo S Sn) ‚ãô œÜ

include hœÜ
lemma lift_spec : (of S Sn) ‚ãô (lift S Sn œÜ) = œÜ :=
begin
  dsimp [lift, of, fo, full_on, coe_embedding], simp,
  apply functor.hext,
  { rintro c, simp, }
end

lemma fo_of : (fo S Sn) ‚ãô (of S Sn) = ùü≠ _ :=
begin

end

def lift_spec_unique (Œ¶ : quotient S Sn ‚•§ D) (hŒ¶ : (of S Sn) ‚ãô Œ¶ = œÜ) : Œ¶ = (lift S Sn œÜ) :=
begin
  subst hŒ¶, sorry,
end

end ump


end is_graph_like
end subgroupoid

end groupoid

end category_theory
