/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli
-/
import category_theory.category.basic
import category_theory.functor.basic
import category_theory.groupoid
import category_theory.groupoid.basic
--import category_theory.groupoid.vertex_group



/-!
# Actions of groupoids

-/

namespace category_theory

namespace groupoid

universes u v u' v' u'' v''

/--
Following Brown, but instead of a map `w : X ‚Üí V` we take `p : V ‚Üí set X`
plus the fact that it partitions `X`
-/
class groupoid_action (V : Type*) [groupoid V] (X : Type*) :=
(p : V ‚Üí set X)
(p_part : ‚àÄ x, ‚àÉ! v, x ‚àà p v) -- needed?
(mul : Œ† {s t : V} (f : s ‚ü∂ t), p s ‚Üí p t)
(mul_id' : Œ† (v  : V), mul (ùüô v) = id)
(mul_comp' : Œ† {r s t : V} (f : r ‚ü∂ s) (g : s ‚ü∂ t), (mul g) ‚àò (mul f) = mul (f ‚â´ g))

namespace action

notation x ` ‚Ä¢‚â´ ` f:73 := groupoid_action.mul f x

variables  {V : Type*} [groupoid V] {X : Type*} [g : groupoid_action V X]

def is_transitive :=
‚àÄ (x y : X),
  ‚àÉ (s t : V) (xs : x ‚àà g.p s) (yt : y ‚àà g.p t) (f : s ‚ü∂ t),
    ‚ü®x,xs‚ü© ‚Ä¢‚â´ f = ‚ü®y,yt‚ü©

noncomputable def obj (g : groupoid_action V X) (x : X) : V := (g.p_part x).exists.some

def obj_p (g : groupoid_action V X) (x : X) : x ‚àà g.p (obj g x) := (g.p_part x).exists.some_spec

noncomputable def mul' (x : X) {t : V} (f : obj g x ‚ü∂ t) : X :=
(‚ü®x,obj_p g x‚ü© ‚Ä¢‚â´ f).val


notation x ` ¬∑‚â´ ` f:100 := mul' x f

@[simp]
lemma mul_eq_mul' (x : X) {t : V} (f : obj g x ‚ü∂ t) : x ¬∑‚â´ f = (‚ü®x,obj_p g x‚ü© ‚Ä¢‚â´ f).val := rfl

/-
def stabilizer (v : V) (x : g.p v) : subgroup (v ‚ü∂ v) :=
{ carrier := {f | x ‚Ä¢‚â´ f = x},
  one_mem' := congr_fun (groupoid_action.mul_id' v) x,
  mul_mem' := Œª f f' hf hf', by
  { rw [set.mem_set_of_eq] at hf hf' ‚ä¢,
    rw [vertex_group_mul, ‚Üêcongr_fun (groupoid_action.mul_comp' f f') x,
        function.comp_app,hf,hf'], },
  inv_mem' := Œª f hf, by
  { rw [set.mem_set_of_eq] at hf ‚ä¢,
    nth_rewrite 0 ‚Üêhf,
    convert ‚Üêcongr_fun (groupoid_action.mul_comp' f (inv f)) x,
    rw [inv_eq_inv, is_iso.hom_inv_id],
    exact congr_fun (groupoid_action.mul_id' v) x, } }-/

set_option profiler true

noncomputable instance semidirect_product : groupoid X :=
{ hom := Œª x y, { f : obj g x ‚ü∂ obj g y | x ¬∑‚â´ f = y},
  id := Œª x,
  ‚ü® ùüô $ obj g x,
    by
    { dsimp only [mul'],
      rw [set.mem_set_of_eq, groupoid_action.mul_id'],
      refl, } ‚ü©,
  comp := Œª x y z f h,
  ‚ü® f.val ‚â´ h.val,
    by
    { dsimp only [mul'],
      rw [set.mem_set_of_eq,‚Üêgroupoid_action.mul_comp', function.comp_app],
      rw [subtype.val_eq_coe, subtype.val_eq_coe, subtype.val_eq_coe],
      rw [subtype.coe_eq_of_eq_mk f.prop, subtype.coe_eq_of_eq_mk h.prop],
      refl, } ‚ü©,
  id_comp' := Œª _ _ _, by simp_rw [subtype.val_eq_coe, category.id_comp, subtype.coe_eta],
  comp_id' := Œª _ _ _, by simp_rw [subtype.val_eq_coe, category.comp_id, subtype.coe_eta],
  assoc' := Œª _ _ _ _ _ _ _, by simp_rw [category.assoc],
  inv := Œª x y f,
  ‚ü® inv f,
    by
    { sorry, /-simp only [set.mem_set_of_eq, subtype.val_eq_coe, inv_eq_inv, mul_eq_mul'],
      have : x = ((‚ü®x, obj_p g x‚ü© ‚Ä¢‚â´ f.val) ‚Ä¢‚â´ (inv f.val)) := sorry,
      nth_rewrite_rhs 0 this,
      let := subtype.coe_eq_of_eq_mk f.prop,
      nth_rewrite_lhs 0 ‚Üêthis,
      simp only [subtype.val_eq_coe, inv_eq_inv],-/
    } ‚ü©,
  inv_comp' := Œª _ _ _, by sorry, --simp_rw [subtype.val_eq_coe, inv_eq_inv, is_iso.inv_hom_id],
  comp_inv' := Œª _ _ _, by sorry--simp_rw [subtype.val_eq_coe, inv_eq_inv, is_iso.hom_inv_id]
}


end action

end groupoid

end category_theory
