import .vertex_group
import .subgroupoid
import category_theory.groupoid
import algebra.group.defs
import algebra.hom.group
import algebra.hom.equiv
import data.set.lattice
import combinatorics.quiver.connected_component

open set classical function
local attribute [instance] prop_decidable


namespace category_theory

universes u v

variables {C : Type u} [groupoid C] (S : groupoid.subgroupoid C) (Sn : S.is_normal)

namespace groupoid

section quotient

namespace subgroupoid

lemma is_normal.arrws_nonempty_refl {S : subgroupoid C} (Sn : S.is_normal) (c : C) :
  (S.arrws c c).nonempty :=
‚ü®ùüô c, Sn.wide c‚ü©

lemma is_normal.arrws_nonempty_symm {S : subgroupoid C} (Sn : S.is_normal)
  {c d : C} : (S.arrws c d).nonempty ‚Üí (S.arrws d c).nonempty :=
by { rintro ‚ü®f, hf‚ü©, exact ‚ü®groupoid.inv f, S.inv' hf‚ü© }

lemma is_normal.arrws_nonempty_trans {S : subgroupoid C} (Sn : S.is_normal)
  {c d e : C} : (S.arrws c d).nonempty ‚Üí (S.arrws d e).nonempty ‚Üí (S.arrws c e).nonempty :=
by { rintro ‚ü®f, hf‚ü© ‚ü®g, hg‚ü©, exact ‚ü®f ‚â´ g, S.mul' hf hg‚ü© }

def is_normal.arrws_nonempty_setoid {S : subgroupoid C} (Sn : S.is_normal) : setoid C :=
{ r := Œª c d, (S.arrws c d).nonempty,
  iseqv := ‚ü®Sn.arrws_nonempty_refl,
            Œª c d, Sn.arrws_nonempty_symm,
            Œª c d e, Sn.arrws_nonempty_trans‚ü© }

end subgroupoid

open subgroupoid

-- The vertices of the quotient of G by S
@[reducible] def quot_v := quotient Sn.arrws_nonempty_setoid

instance : setoid C := Sn.arrws_nonempty_setoid -- I¬†want to be able to drop all the `letI` but can't figure out how

def quot_v_mk (c : C) : quot_v S Sn := quotient.mk' c

def subgroupoid.conj {a b c d : C} (f : a ‚ü∂ b) (g : c ‚ü∂ d) : Prop :=
‚àÉ (Œ± ‚àà S.arrws a c) (Œ≤ ‚àà S.arrws d b), f = Œ± ‚â´ g ‚â´ Œ≤

attribute [reassoc] inv_comp comp_inv -- groupoid

lemma conj.refl {a b : C} (f : a ‚ü∂ b) : S.conj f f := ‚ü®_, Sn.wide _, _, Sn.wide _, by simp‚ü©

lemma conj.symm {a b c d : C} (f : a ‚ü∂ b) (g : c ‚ü∂ d) : S.conj f g ‚Üí S.conj g f :=
Œª ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü©, ‚ü®_, S.inv' hŒ±, _, S.inv' hŒ≤, by simp [he]‚ü©

lemma conj_comm {a b c d : C} (f : a ‚ü∂ b) (g : c ‚ü∂ d) : S.conj f g ‚Üî S.conj g f :=
‚ü®conj.symm S f g, conj.symm S g f‚ü©

lemma conj.trans {a b c d e f : C} (g : a ‚ü∂ b) (h : c ‚ü∂ d) (i : e ‚ü∂ f) :
  S.conj g h ‚Üí S.conj h i ‚Üí S.conj g i :=
Œª ‚ü®Œ±‚ÇÅ, hŒ±‚ÇÅ, Œ≤‚ÇÅ, hŒ≤‚ÇÅ, he‚ÇÅ‚ü© ‚ü®Œ±‚ÇÇ, hŒ±‚ÇÇ, Œ≤‚ÇÇ, hŒ≤‚ÇÇ, he‚ÇÇ‚ü©,
  ‚ü®_, S.mul' hŒ±‚ÇÅ hŒ±‚ÇÇ, _, S.mul' hŒ≤‚ÇÇ hŒ≤‚ÇÅ, by simp [he‚ÇÅ, he‚ÇÇ]‚ü©

def conj_setoid (a b : quot_v S Sn) :
  setoid (Œ£ (c : {c // quot.mk _ c = a}) (d : {d // quot.mk _ d = b}), c.1 ‚ü∂ d.1) :=
{ r := Œª f g, S.conj f.2.2 g.2.2,
  iseqv := ‚ü®Œª _, conj.refl _ Sn _, Œª _ _, conj.symm _ _ _, Œª _ _ _, conj.trans _ _ _ _‚ü© }

lemma conj_comp {a b c d e : C} (f : a ‚ü∂ b) (g : c ‚ü∂ d) {h : d ‚ü∂ e} (hS : h ‚àà S.arrws d e) :
  S.conj f (g ‚â´ h) ‚Üî S.conj f g :=
‚ü®Œª ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü©, ‚ü®Œ±, hŒ±, h ‚â´ Œ≤, S.mul' hS hŒ≤, by simp [he]‚ü©,
 Œª ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü©, ‚ü®Œ±, hŒ±, inv h ‚â´ Œ≤, S.mul' (S.inv' hS) hŒ≤, by simp [he]‚ü©‚ü©

lemma conj_comp' {a b c d e : C} (f : a ‚ü∂ b) (g : c ‚ü∂ d) {h : e ‚ü∂ c} (hS : h ‚àà S.arrws e c) :
  S.conj f (h ‚â´ g) ‚Üî S.conj f g :=
‚ü®Œª ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü©, ‚ü®Œ± ‚â´ h, S.mul' hŒ± hS, Œ≤, hŒ≤, by simp [he]‚ü©,
 Œª ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü©, ‚ü®Œ± ‚â´ inv h, S.mul' hŒ± (S.inv' hS), Œ≤, hŒ≤, by simp [he]‚ü©‚ü©

lemma conj_inv {a b c d: C} (f : a ‚ü∂ b) (g : c ‚ü∂ d) :
  S.conj f g ‚Üí S.conj (inv f) (inv g) :=
Œª ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü©,
  ‚ü®inv Œ≤, S.inv' hŒ≤, inv Œ±, S.inv' hŒ±, by {simp only [inv_eq_inv,‚Üêis_iso.inv_comp],congr,simp [he]}‚ü©

lemma conj_congr_left {a b c d : C} (f‚ÇÅ : a ‚ü∂ c) (f‚ÇÇ : b ‚ü∂ c) (g : c ‚ü∂ d) (h : S.conj f‚ÇÅ f‚ÇÇ) :
  S.conj (f‚ÇÅ ‚â´ g) (f‚ÇÇ ‚â´ g) :=
let ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü© := h in ‚ü®Œ±, hŒ±, (inv g) ‚â´  Œ≤ ‚â´ g, Sn.conj g Œ≤ hŒ≤, by simp [he]‚ü©

lemma conj_congr_right {a b c d : C} (f : a ‚ü∂ b) (g‚ÇÅ : b ‚ü∂ c) (g‚ÇÇ : b ‚ü∂ d) (h : S.conj g‚ÇÅ g‚ÇÇ) :
  S.conj (f ‚â´ g‚ÇÅ) (f ‚â´ g‚ÇÇ) :=
let ‚ü®Œ±, hŒ±, Œ≤, hŒ≤, he‚ü© := h in ‚ü®_, Sn.conj (groupoid.inv f) _ hŒ±, Œ≤, hŒ≤, by simp [he]‚ü©

@[instance]
def quotient_quiver : quiver (quot_v S Sn) :=
{ hom := Œª a b, quotient (conj_setoid S Sn a b) }

noncomputable def quot_id (c : quot_v S Sn) : c ‚ü∂ c :=
quot.mk _ ‚ü®‚ü®quot.out c, quot.out_eq c‚ü©, ‚ü®quot.out c, quot.out_eq c‚ü©, ùüô (quot.out c)‚ü©

noncomputable def quot_comp {c d e : quot_v S Sn} : (c ‚ü∂ d) ‚Üí (d ‚ü∂ e) ‚Üí (c ‚ü∂ e) :=
begin
  let sm := @nonempty.some_mem,
  refine quot.lift‚ÇÇ (Œª f g, quot.mk _ _) (Œª f g‚ÇÅ g‚ÇÇ h, _) (Œª f‚ÇÅ f‚ÇÇ g h, _),
  { letI := Sn.arrws_nonempty_setoid,
    exact ‚ü®_, _, f.2.2 ‚â´ (quotient.exact $ f.2.1.2.trans g.1.2.symm).some ‚â´ g.2.2‚ü© },
  all_goals { apply quot.sound, dsimp only [conj_setoid] },
  { apply conj_congr_right S Sn,
    rw [conj_comp' S _ _ (sm _), conj_comm, conj_comp' S _ _ (sm _), conj_comm],
    exact h },
  { simp only [‚Üê category.assoc],
    apply conj_congr_left S Sn,
    rw [conj_comp S _ _ (sm _), conj_comm, conj_comp S _ _ (sm _), conj_comm],
    exact h },
end

def quot_inv {c d : quot_v S Sn} : (c ‚ü∂ d) ‚Üí (d ‚ü∂ c) :=
begin
  refine quot.lift (Œª f, quot.mk _ _) (Œª f‚ÇÅ f‚ÇÇ h, _),
  { exact ‚ü®f.2.1, f.1, inv f.2.2‚ü© },
  { apply quot.sound,
    dsimp only [conj_setoid], apply conj_inv, exact h, },
end

@[instance]
noncomputable def quotient_category_struct : category_struct (quot_v S Sn) :=
{ to_quiver := quotient_quiver S Sn
, id := quot_id S Sn
, comp := Œª _ _ _, quot_comp S Sn }

@[instance]
noncomputable def quotient_category : category (quot_v S Sn) :=
{ to_category_struct := quotient_category_struct S Sn
, comp_id' := by
  { letI := Sn.arrws_nonempty_setoid,
    rintros,
    refine quot.induction_on f (Œª a, quot.sound _),
    dsimp only [conj_setoid], simp only [category.comp_id],
    rw [conj_comm, conj_comp S _ _ (quotient.exact $ a.2.1.2.trans (quot.out_eq Y).symm).some_mem],
    apply conj.refl S Sn, }
, id_comp' := by
  { letI := Sn.arrws_nonempty_setoid,
    rintros,
    refine quot.induction_on f (Œª a, quot.sound _),
    dsimp only [conj_setoid], simp only [category.id_comp],
    rw [conj_comm, conj_comp' S _ _ (quotient.exact $ (quot.out_eq X).trans a.1.2.symm).some_mem],
    apply conj.refl S Sn, }
, assoc' := by
  { letI := Sn.arrws_nonempty_setoid,
    rintros,
    refine quot.induction_on‚ÇÉ f g h (Œª f g h, quot.sound _),
    dsimp only [conj_setoid], simp only [category.assoc],
    apply conj.refl S Sn, }
 }

noncomputable instance groupoid : groupoid (quot_v S Sn) :=
{ to_category := quotient_category S Sn
, inv := Œª _ _, quot_inv S Sn
, inv_comp' := by
  { letI := Sn.arrws_nonempty_setoid,
    rintros,
    refine quot.induction_on f (Œª f, quot.sound _),
    dsimp only [conj_setoid],
    rcases f with ‚ü®‚ü®a,rfl‚ü©,‚ü®b,rfl‚ü©,f‚ü©,
    simp only [inv_eq_inv],
    have s : (S.arrws a a).nonempty := subgroupoid.is_normal.arrws_nonempty_refl Sn a,
    let G := (quotient.exact $ quot.out_eq (quot.mk setoid.r b)),
    refine ‚ü®_, S.inv' G.some_mem, _, S.mul' G.some_mem (Sn.conj f s.some s.some_mem), _‚ü©,
    simp only [inv_eq_inv, category.id_comp, is_iso.inv_hom_id_assoc],
    rw ‚Üêinv_eq_inv, refl, }
, comp_inv' := by
  { letI := Sn.arrws_nonempty_setoid,
    rintros,
    refine quot.induction_on f (Œª f, quot.sound _),
    dsimp only [conj_setoid],
    rcases f with ‚ü®‚ü®a,rfl‚ü©,‚ü®b,rfl‚ü©,f‚ü©,
    have s : (S.arrws b b).nonempty := subgroupoid.is_normal.arrws_nonempty_refl Sn b,
    let G := (quotient.exact $ quot.out_eq (quot.mk setoid.r a)),
    refine ‚ü®_, S.inv' G.some_mem, _, S.mul' G.some_mem (Sn.conj' f s.some s.some_mem), _‚ü©,
    simp only [inv_eq_inv, category.id_comp, is_iso.inv_hom_id_assoc],
    rw ‚Üêinv_eq_inv, refl,
  } }

end quotient

section ump

open subgroupoid

def of : C ‚•§ quot_v S Sn :=
{ obj := Œª v, quot_v_mk S Sn v,
  map := Œª a b f, quot.mk _ ‚ü®‚ü®a,rfl‚ü©,‚ü®b,rfl‚ü©,f‚ü©,
  map_id' := Œª a, by
  { letI := Sn.arrws_nonempty_setoid,
    apply quot.sound,
    let h := quotient.exact (quot.out_eq (quot_v_mk S Sn a)),
    refine ‚ü®inv h.some, S.inv' h.some_mem, h.some, h.some_mem, _‚ü©,
    simp only [inv_eq_inv, category.id_comp, is_iso.inv_hom_id],
  },
  map_comp' := Œª a b c f g, by
  { letI := Sn.arrws_nonempty_setoid,
    apply quotient.sound,
    have h : (S.arrws b b).nonempty := subgroupoid.is_normal.arrws_nonempty_refl Sn b,
    symmetry,
    refine ‚ü®f ‚â´ h.some ‚â´ inv f, Sn.conj' f h.some h.some_mem, ùüô c, Sn.wide c, _‚ü©,
    simp only [inv_eq_inv, category.assoc, category.comp_id, is_iso.inv_hom_id_assoc],
    refl, } }

def lift {D : Type v} [groupoid D] {S} {Sn} (œÜ : C ‚•§ D) (hœÜ : S ‚â§ ker œÜ) : (quot_v S Sn) ‚•§ D :=
{ obj := quot.lift œÜ.obj (Œª c d r, by
  { letI := Sn.arrws_nonempty_setoid,
    let h := hœÜ (r : c ‚âà d).some_spec,
    rw mem_ker_iff at h,
    exact h.some, })
, map := Œª c d, by
  { letI := Sn.arrws_nonempty_setoid,
    refine quot.lift (Œª f, _) (Œª f‚ÇÅ f‚ÇÇ h, _),
    { rcases f with ‚ü®‚ü®a,ac‚ü©,‚ü®b,bd‚ü©,f‚ü©,
      rw [‚Üêac,‚Üêbd],
      exact (œÜ.map f),},
    { rcases f‚ÇÅ with ‚ü®‚ü®a‚ÇÅ,ac‚ÇÅ‚ü©,‚ü®b‚ÇÅ,bd‚ÇÅ‚ü©,f‚ÇÅ‚ü©,
      rcases f‚ÇÇ with ‚ü®‚ü®a‚ÇÇ,ac‚ÇÇ‚ü©,‚ü®b‚ÇÇ,bd‚ÇÇ‚ü©,f‚ÇÇ‚ü©,
      rcases h with ‚ü®Œ±,Œ±S,Œ≤,Œ≤S,he‚ü©,
      simp only at he,
      subst_vars,
      rw he, simp,
      let := hœÜ Œ±S, rw mem_ker_iff at this, rw this.some_spec,
      let := hœÜ Œ≤S, rw mem_ker_iff at this, rw this.some_spec,
      simp,

       }

  }
, map_id' := sorry
, map_comp' := sorry }

lemma lift_spec {D : Type v} [groupoid D] {S} {Sn} (œÜ : C ‚•§ D) -- strange: can't write `lift œÜ hœÜ`
  (hœÜ : S ‚â§ ker œÜ) : (of S Sn) ‚ãô (lift œÜ sorry) = œÜ := sorry

lemma lift_spec_unique {D : Type v} [groupoid D] {S} {Sn} (œÜ : C ‚•§ D) (hœÜ : S ‚â§ ker œÜ)
  (Œ¶ : (quot_v S Sn) ‚•§ D) (hŒ¶ : (of S Sn) ‚ãô Œ¶ = œÜ) : Œ¶ = (lift œÜ sorry) := sorry

end ump

end groupoid

end category_theory
