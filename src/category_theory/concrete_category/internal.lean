import category_theory.concrete_category.operations
import category_theory.internal_operation

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable theory

namespace category_theory

open category opposite limits

@[simp] lemma nat_trans.hcomp_id {C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ) (G : C‚ÇÇ ‚•§ C‚ÇÉ) : (ùüô F) ‚ó´ (ùüô G) = ùüô (F ‚ãô G) := by tidy

namespace concrete_category

variables (A : Type u‚ÇÇ) [category.{v‚ÇÇ} A] [concrete_category.{v‚ÇÅ} A]
  (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C]

/-- The category of internal `A`-objects in the category `C`. -/
structure internal :=
(obj : C)
(presheaf : C·µí·µñ ‚•§ A)
(iso : yoneda.obj obj ‚âÖ presheaf ‚ãô forget A)

instance : category (internal A C) := induced_category.category (Œª X, X.presheaf)

namespace internal

@[simps]
def presheaf_functor : internal A C ‚•§ (C·µí·µñ ‚•§ A) := induced_functor _

@[simps]
def type_presheaf_functor : internal A C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ) :=
presheaf_functor A C ‚ãô (whiskering_right C·µí·µñ A (Type v‚ÇÅ)).obj (forget A)

def obj_functor : internal A C ‚•§ C :=
{ obj := Œª X, X.obj,
  map := Œª X Y f, yoneda.preimage ((X.iso.hom ‚â´ (f ‚ó´ (ùüô (forget A))) ‚â´ Y.iso.inv)),
  map_id' := Œª X, yoneda.map_injective begin
    erw [functor.image_preimage, nat_trans.hcomp_id, id_comp, X.iso.hom_inv_id,
      yoneda.map_id],
  end,
  map_comp' := Œª X Y Z f g, yoneda.map_injective begin
    simp only [functor.image_preimage, yoneda.map_comp, assoc, Y.iso.inv_hom_id_assoc],
    ext x : 2,
    simp only [nat_trans.comp_app, nat_trans.hcomp_id_app],
    erw [nat_trans.comp_app, functor.map_comp, assoc],
  end }

variables {A C} {Y Y' : C} (R : internal A C)

def presheaf_type := (type_presheaf_functor A C).obj R

lemma iso_hom_naturality (x : Y ‚ü∂ R.obj) (f : Y' ‚ü∂ Y) :
  R.iso.hom.app (op Y') (f ‚â´ x) = R.presheaf_type.map f.op (R.iso.hom.app (op Y) x) :=
congr_fun (R.iso.hom.naturality f.op) x

lemma iso_inv_naturality (x : R.presheaf_type.obj (op Y)) (f : Y' ‚ü∂ Y) :
  R.iso.inv.app (op Y') (R.presheaf_type.map f.op x) = f ‚â´ R.iso.inv.app (op Y) x :=
congr_fun (R.iso.inv.naturality f.op) x

end internal

variables {A C}

open operations

namespace operation‚ÇÄ

variables (oper oper' : operation‚ÇÄ A) (R : internal A C)

def on_internal_presheaf (Y : C) : R.presheaf_type.obj (op Y) :=
oper.app (R.presheaf.obj (op Y)) punit.star

lemma on_internal_presheaf_naturality {Y Y' : C} (f : Y' ‚ü∂ Y) :
  oper.on_internal_presheaf R Y' = R.presheaf_type.map f.op (oper.on_internal_presheaf R Y) :=
congr_fun (oper.naturality (R.presheaf.map f.op)) punit.star

@[simp]
def to_internal_yoneda_operation‚ÇÄ_app (Y : C) : Y ‚ü∂ R.obj :=
R.iso.inv.app (op Y) (oper.on_internal_presheaf R Y)

lemma to_internal_yoneda_operation‚ÇÄ_app_naturality {Y Y' : C} (f : Y' ‚ü∂ Y) :
f ‚â´ oper.to_internal_yoneda_operation‚ÇÄ_app R Y = oper.to_internal_yoneda_operation‚ÇÄ_app R Y' :=
begin
  dsimp only [to_internal_yoneda_operation‚ÇÄ_app],
  rw [‚Üê R.iso_inv_naturality, oper.on_internal_presheaf_naturality R f],
end

@[simps]
def to_internal_yoneda_operation‚ÇÄ : internal_yoneda_operation‚ÇÄ R.obj :=
{ app := Œª X s, oper.to_internal_yoneda_operation‚ÇÄ_app R X.unop,
  naturality' := Œª X Y f, begin
    ext x,
    dsimp at x,
    have eq : x = punit.star := subsingleton.elim _ _,
    subst eq,
    exact (oper.to_internal_yoneda_operation‚ÇÄ_app_naturality R f.unop).symm,
  end }

end operation‚ÇÄ

namespace operation‚ÇÅ

variables (oper oper' : operation‚ÇÅ A) {R : internal A C}

variables {Y Y' : C}

@[protected]
def on_internal_presheaf
  (x : R.presheaf_type.obj (op Y)) : R.presheaf_type.obj (op Y) :=
oper.app (R.presheaf.obj (op Y)) x

lemma on_internal_presheaf_naturality (x : R.presheaf_type.obj (op Y)) (f : Y' ‚ü∂ Y) :
    oper.on_internal_presheaf (R.presheaf_type.map f.op x)  =
  R.presheaf_type.map f.op (oper.on_internal_presheaf x) :=
congr_fun (oper.naturality (R.presheaf.map f.op)) x

@[simp]
def to_internal_yoneda_operation‚ÇÅ_app (x : Y ‚ü∂ R.obj) : Y ‚ü∂ R.obj :=
R.iso.inv.app _ (oper.on_internal_presheaf (R.iso.hom.app (op Y) x))

lemma to_internal_yoneda_operation‚ÇÅ_app_naturality (x : Y ‚ü∂ R.obj) (f : Y' ‚ü∂ Y) :
  f ‚â´ oper.to_internal_yoneda_operation‚ÇÅ_app x = oper.to_internal_yoneda_operation‚ÇÅ_app (f ‚â´ x) :=
begin
  dsimp only [to_internal_yoneda_operation‚ÇÅ_app],
  simp only [R.iso_hom_naturality, on_internal_presheaf_naturality, R.iso_inv_naturality],
end

variable (R)

@[simps]
def to_internal_yoneda_operation‚ÇÅ : internal_yoneda_operation‚ÇÅ R.obj :=
{ app := Œª X x, oper.to_internal_yoneda_operation‚ÇÅ_app x,
  naturality' := Œª X Y f, begin
    ext x,
    symmetry,
    apply to_internal_yoneda_operation‚ÇÅ_app_naturality,
  end, }

end operation‚ÇÅ

namespace operation‚ÇÇ

variables (oper : operation‚ÇÇ A) {R : internal A C}

variables {Y Y' : C}

@[protected]
def on_internal_presheaf
  (x y : R.presheaf_type.obj (op Y)) : R.presheaf_type.obj (op Y) :=
oper.app (R.presheaf.obj (op Y)) ‚ü®x,y‚ü©

lemma on_internal_presheaf_naturality (x y : R.presheaf_type.obj (op Y)) (f : Y' ‚ü∂ Y) :
    oper.on_internal_presheaf (R.presheaf_type.map f.op x) (R.presheaf_type.map f.op y) =
  R.presheaf_type.map f.op (oper.on_internal_presheaf x y) :=
congr_fun (oper.naturality (R.presheaf.map f.op)) ‚ü®x,y‚ü©

@[simp]
def to_internal_yoneda_operation‚ÇÇ_app (x y : Y ‚ü∂ R.obj) : Y ‚ü∂ R.obj :=
R.iso.inv.app _ (oper.on_internal_presheaf (R.iso.hom.app (op Y) x) (R.iso.hom.app (op Y) y))

lemma to_internal_yoneda_operation‚ÇÇ_app_naturality (x y : Y ‚ü∂ R.obj) (f : Y' ‚ü∂ Y) :
  f ‚â´ oper.to_internal_yoneda_operation‚ÇÇ_app x y = oper.to_internal_yoneda_operation‚ÇÇ_app (f ‚â´ x) (f ‚â´ y) :=
begin
  dsimp only [to_internal_yoneda_operation‚ÇÇ_app],
  simp only [R.iso_hom_naturality, on_internal_presheaf_naturality, R.iso_inv_naturality],
end

variable (R)

@[simps]
def to_internal_yoneda_operation‚ÇÇ :
  concat‚ÇÇ (yoneda.obj R.obj) (yoneda.obj R.obj) ‚ü∂ yoneda.obj R.obj :=
{ app := Œª X x, oper.to_internal_yoneda_operation‚ÇÇ_app x.1 x.2,
  naturality' := Œª X Y f, begin
    ext x,
    symmetry,
    apply to_internal_yoneda_operation‚ÇÇ_app_naturality,
  end, }

lemma to_internal_yoneda_operation‚ÇÇ_comm (oper_comm : oper.comm) :
  (oper.to_internal_yoneda_operation‚ÇÇ R) =
    lift‚ÇÇ pr‚ÇÇ pr‚ÇÅ ‚â´ (oper.to_internal_yoneda_operation‚ÇÇ R) :=
begin
  dsimp at oper_comm,
  conv_lhs { rw oper_comm, },
  refl,
end

lemma to_internal_yoneda_operation‚ÇÇ_add_zero (zero : operation‚ÇÄ A)
  (zero_oper : oper.add_zero zero) :
  lift‚ÇÇ (to_functor_const_punit ‚â´ zero.to_internal_yoneda_operation‚ÇÄ R) (ùüô _) ‚â´
    oper.to_internal_yoneda_operation‚ÇÇ R = ùüô _ :=
begin
  convert _root_.congr_arg (Œª (m : operation‚ÇÅ A), m.to_internal_yoneda_operation‚ÇÅ R) zero_oper,
  { ext X x,
    dsimp at x ‚ä¢,
    simp only [functor_to_types.inv_hom_id_app_apply],
    congr },
  { ext X x,
    dsimp [operation‚ÇÅ.on_internal_presheaf] at x ‚ä¢,
    simp, },
end

lemma to_internal_yoneda_operation‚ÇÇ_add_left_neg (zero : operation‚ÇÄ A) (neg : operation‚ÇÅ A)
  (oper_left_neg : oper.add_left_neg zero neg) :
  lift‚ÇÇ (neg.to_internal_yoneda_operation‚ÇÅ R) (ùüô _) ‚â´ oper.to_internal_yoneda_operation‚ÇÇ R =
    to_functor_const_punit ‚â´ zero.to_internal_yoneda_operation‚ÇÄ R :=
begin
  convert _root_.congr_arg (Œª (m : operation‚ÇÅ A), m.to_internal_yoneda_operation‚ÇÅ R) oper_left_neg,
  ext X x,
  dsimp [operation‚ÇÅ.on_internal_presheaf, operation‚ÇÄ.on_internal_presheaf,
    operation‚ÇÇ.on_internal_presheaf],
  simp only [functor_to_types.inv_hom_id_app_apply],
end

end operation‚ÇÇ

namespace operation‚ÇÉ

variables (oper : operation‚ÇÉ A) {R : internal A C} {Y Y' : C}

@[protected]
def on_internal_presheaf
  (x y z : R.presheaf_type.obj (op Y)) : R.presheaf_type.obj (op Y) :=
oper.app (R.presheaf.obj (op Y)) ‚ü®x, y, z‚ü©

lemma on_internal_presheaf_naturality (x y z : R.presheaf_type.obj (op Y)) (f : Y' ‚ü∂ Y) :
    oper.on_internal_presheaf (R.presheaf_type.map f.op x) (R.presheaf_type.map f.op y)
      (R.presheaf_type.map f.op z) =
  R.presheaf_type.map f.op (oper.on_internal_presheaf x y z) :=
congr_fun (oper.naturality (R.presheaf.map f.op)) ‚ü®x, y, z‚ü©

@[simp]
def to_internal_yoneda_operation‚ÇÉ_app (x y z : Y ‚ü∂ R.obj) : Y ‚ü∂ R.obj :=
R.iso.inv.app _ (oper.on_internal_presheaf (R.iso.hom.app (op Y) x) (R.iso.hom.app (op Y) y)
  (R.iso.hom.app (op Y) z))

lemma to_internal_yoneda_operation‚ÇÉ_app_naturality (x y z : Y ‚ü∂ R.obj) (f : Y' ‚ü∂ Y) :
  f ‚â´ oper.to_internal_yoneda_operation‚ÇÉ_app x y z = oper.to_internal_yoneda_operation‚ÇÉ_app (f ‚â´ x) (f ‚â´ y) (f ‚â´ z) :=
begin
  dsimp only [to_internal_yoneda_operation‚ÇÉ_app],
  simp only [R.iso_hom_naturality, on_internal_presheaf_naturality, R.iso_inv_naturality],
end

variable (R)

@[simps]
def to_internal_yoneda_operation‚ÇÉ :
  concat‚ÇÉ (yoneda.obj R.obj) (yoneda.obj R.obj) (yoneda.obj R.obj) ‚ü∂ yoneda.obj R.obj :=
{ app := Œª X x, oper.to_internal_yoneda_operation‚ÇÉ_app x.1 x.2.1 x.2.2,
  naturality' := Œª X Y f, begin
    ext x,
    symmetry,
    apply to_internal_yoneda_operation‚ÇÉ_app_naturality,
  end, }

end operation‚ÇÉ

namespace operation‚ÇÇ

variables (oper : operation‚ÇÇ A) (R : internal A C)

lemma to_internal_yoneda_operation‚ÇÇ_assoc (oper_assoc : oper.assoc) :
  lift‚ÇÇ (pr‚ÇÅ‚ÇÇ_‚ÇÉ ‚â´ oper.to_internal_yoneda_operation‚ÇÇ R) pr‚ÇÉ_‚ÇÉ ‚â´ oper.to_internal_yoneda_operation‚ÇÇ R =
    lift‚ÇÇ pr‚ÇÅ_‚ÇÉ (pr‚ÇÇ‚ÇÉ_‚ÇÉ ‚â´ oper.to_internal_yoneda_operation‚ÇÇ R) ‚â´ (oper.to_internal_yoneda_operation‚ÇÇ R) :=
begin
  convert _root_.congr_arg (Œª (m : operation‚ÇÉ A), m.to_internal_yoneda_operation‚ÇÉ R) oper_assoc;
  { ext X x,
    dsimp,
    simp only [functor_to_types.inv_hom_id_app_apply],
    congr, },
end

end operation‚ÇÇ

end concrete_category

end category_theory
