import category_theory.category.Cat
import category_theory.bicategory.locally_discrete
import category_theory.bicategory.functor_bicategory

universes v' u' v u

namespace category_theory

variables {C : Type u} [category.{v} C]

section
variable (F : oplax_functor (locally_discrete C) Cat.{v' u'})

namespace oplax_functor

variables ‚¶ÉX Y Z W : C‚¶Ñ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ W) (E : F.obj X)

@[simp, reassoc]
lemma id_comp_components :
  (F.map_comp (ùüô X) f).app E ‚â´ (F.map f).map ((F.map_id X).app E) = eq_to_hom (by simpa) :=
by { convert nat_trans.congr_app (F.id_comp f) E, simpa }

@[simp, reassoc]
lemma comp_id_components :
  (F.map_comp f (ùüô Y)).app E ‚â´ (F.map_id Y).app ((F.map f).obj E) = eq_to_hom (by simpa) :=
by { convert nat_trans.congr_app (F.comp_id f) E, simpa }

@[simp, reassoc]
lemma assoc_components : (F.map_comp (f ‚â´ g) h).app E ‚â´ (F.map h).map ((F.map_comp f g).app E) =
  eq_to_hom (by simp) ‚â´ (F.map_comp f (g ‚â´ h)).app E ‚â´ (F.map_comp g h).app ((F.map f).obj E) :=
by { convert nat_trans.congr_app (F.assoc f g h) E using 1, simpa }

end oplax_functor

end

variable (F : prefunctor C Cat)

/-- The type of dependent functors from a category `C` to a family of categories indexed
  by `C` specified by a `oplax_functor` from `locally_discrete C` to `Cat`. For `C` an opposite
  category, this is the type of dependent presheaves. -/
structure dfunctor :=
(obj (X : C) : F.obj X)
(map {X Y : C} (f : X ‚ü∂ Y) : (F.map f).obj (obj X) ‚ü∂ obj Y)

variable {F}
@[ext]
structure dnat_trans (G‚ÇÅ G‚ÇÇ : dfunctor F) :=
(app (X : C) : G‚ÇÅ.obj X ‚ü∂ G‚ÇÇ.obj X)
(naturality' : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), G‚ÇÅ.map f ‚â´ app Y = (F.map f).map (app X) ‚â´ G‚ÇÇ.map f
  . obviously)

namespace dnat_trans

/-- `nat_trans.id F` is the identity natural transformation on a functor `F`. -/
def id (G : dfunctor F) : dnat_trans G G :=
{ app := Œª X, ùüô (G.obj X) }

section
variables {G‚ÇÅ G‚ÇÇ G‚ÇÉ : dfunctor F}

@[simps]
def vcomp (Œ± : dnat_trans G‚ÇÅ G‚ÇÇ) (Œ≤ : dnat_trans G‚ÇÇ G‚ÇÉ) : dnat_trans G‚ÇÅ G‚ÇÉ :=
{ app := Œª X, Œ±.app X ‚â´ Œ≤.app X,
  naturality' := Œª X Y f, by
  { rw [‚Üêcategory.assoc, Œ±.naturality', category.assoc, Œ≤.naturality'], simp } }

instance : category (dfunctor F) :=
{ hom := dnat_trans,
  id := id,
  comp := Œª _ _ _, vcomp,
  id_comp' := Œª X Y f, by { ext, apply category.id_comp },
  comp_id' := Œª X Y f, by { ext, apply category.comp_id },
  assoc' := Œª X Y Z W f g h, by { ext, apply category.assoc } }
end

section
variables {D : Type*} [category D] (G‚ÇÅ G‚ÇÇ : prefunctor C D)
@[ext]
structure pre_nat_trans :=
(app (X : C) : G‚ÇÅ.obj X ‚ü∂ G‚ÇÇ.obj X)
(naturality' : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), G‚ÇÅ.map f ‚â´ app Y = app X ‚â´ G‚ÇÇ.map f . obviously)

instance : category (prefunctor C D) :=
{ hom := pre_nat_trans,
  id := Œª X, { app := Œª _, ùüô _ },
  comp := Œª _ _ _ Œ± Œ≤, { app := Œª X, Œ±.app X ‚â´ Œ≤.app X,
    naturality' := Œª _ _ _, by
      { rw [‚Üêcategory.assoc, Œ±.naturality', category.assoc, Œ≤.naturality'], simp } },
  id_comp' := Œª X Y f, by { ext, apply category.id_comp },
  comp_id' := Œª X Y f, by { ext, apply category.comp_id },
  assoc' := Œª X Y Z W f g h, by { ext, apply category.assoc } }

end

def dfunctor_oplax_functor : prefunctor C Cat ‚•§ Cat :=
{ obj := Œª F, ‚ü®dfunctor F‚ü©,
  map := Œª F‚ÇÅ F‚ÇÇ Œ±,
  { obj := Œª G,
    { obj := Œª X, (Œ±.app X).obj (G.obj X),
      map := Œª X Y f, eq_to_hom
        (by { change _ = (F‚ÇÅ.map f ‚â´ Œ±.app Y).obj _, rw Œ±.naturality', refl }) ‚â´
        (Œ±.app Y).map (G.map f) },
    map := Œª G‚ÇÅ G‚ÇÇ Œ≤, by { dsimp,  } },
}

end dnat_trans

/- TODO: define category structure
   Show category of O-modules is isomorphic to such a category
   (need to use composition of oplax functors).
   Notion of sheaves when `C·µí·µñ` has a grothendieck topology
   Construct oplax functor from `F : oplax_functor C Cat` to `dfunctor F`.
   Show the grothendieck construction associated to this oplax functor is isomorphic
   to the category of functors from `C` to grothendieck applied to `ùü≠ _ : Cat ‚•§ Cat`...!
-/

end category_theory
