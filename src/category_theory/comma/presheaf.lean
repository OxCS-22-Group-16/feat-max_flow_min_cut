/-
Copyright (c) 2022 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import category_theory.over

/-!
# Structured arrow and presheaves commute
-/

universes v u w v‚ÇÇ u‚ÇÇ

open opposite

namespace category_theory
variables {C : Type u} [category.{v} C] (A : C·µí·µñ ‚•§ Type (max u v w))

section
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] (F : C ‚•§ D) (X : D) (f f' f'' : costructured_arrow F X)

@[simp]
lemma hom_mk_id : costructured_arrow.hom_mk (ùüô f.left) (by simp) = ùüô _ :=
rfl

@[simp]
lemma hom_mk_comp {g : f.left ‚ü∂ f'.left} {g' : f'.left ‚ü∂ f''.left} {h h' h''} :
  costructured_arrow.hom_mk (g ‚â´ g') h'' =
    costructured_arrow.hom_mk g h ‚â´ costructured_arrow.hom_mk g' h' :=
by tidy

end

-- def CA := costructured_arrow (yoneda ‚ãô (whiskering_right _ _ _).obj ulift_functor.{max u v w}) A
-- def CDA := over A
-- def CAD := costructured_arrow yoneda A ‚•§ Type v

-- def q : costructured_arrow yoneda A ‚•§ over A :=
-- costructured_arrow.pre yoneda (ùü≠ _) A

section

abbreviation yoneda' : C ‚•§ C·µí·µñ ‚•§ Type (max u v w) :=
yoneda ‚ãô (whiskering_right _ _ _).obj ulift_functor.{max u v w}

@[simps]
def yoneda'_equiv {X : C} {F : C·µí·µñ ‚•§ Type (max u v w)} : (yoneda'.obj X ‚ü∂ F) ‚âÉ F.obj (op X) :=
{ to_fun := Œª f, f.app (op X) (ulift.up (ùüô _)),
  inv_fun := Œª x,
  { app := Œª Y f, F.map f.down.op x,
    naturality' := Œª Y Z f, by { ext y, cases y, dsimp, simp } },
  left_inv :=
  begin
    intro f,
    ext Y g,
    dsimp,
    have := f.naturality g.down.op,
    dsimp at this,
    have hx := congr_fun this (ulift.up (ùüô _)),
    dsimp at hx,
    convert hx.symm,
    ext, simp,
  end,
  right_inv :=
  begin
    tidy,
  end }



end

@[simps]
def as_presheaf_obj (f : over A) : (costructured_arrow (yoneda') A)·µí·µñ ‚•§ Type (max u v w) :=
{ obj := Œª g, (costructured_arrow.pre (yoneda') (ùü≠ _) A).obj g.unop ‚ü∂ f,
  map := Œª X Y f g, (costructured_arrow.pre yoneda' (ùü≠ _) A).map f.unop ‚â´ g,
  map_id' := Œª X, by { ext, simp only [unop_id, functor.map_id, category.id_comp, types_id_apply] },
  map_comp' := Œª X Y Z f g,
    by { ext,
    simp only [unop_comp, functor.map_comp, over.comp_left, functor_to_types.comp, types_comp_apply], } }

@[simps]
def as_presheaf : over A ‚•§ (costructured_arrow yoneda' A)·µí·µñ ‚•§ Type (max u v w) :=
{ obj := as_presheaf_obj A,
  map := Œª X Y f,
  { app := Œª Z g, g ‚â´ f,
    naturality' := Œª U V g, by { ext, simp only [types_comp_apply, as_presheaf_obj_map, over.comp_left, functor_to_types.comp], } },
  map_id' := Œª X, by { ext, simp only [types_id_apply, category.comp_id, nat_trans.id_app]},
  map_comp' := Œª X Y Z f g, by { ext, simp } }

@[simps]
def from_presheaf_obj_obj (F : (costructured_arrow yoneda' A)·µí·µñ ‚•§ Type (max u v w)) :
  C·µí·µñ ‚•§ Type (max u v w) :=
{ obj := Œª X, Œ£ (s : A.obj (op (unop X))), F.obj (op (costructured_arrow.mk (yoneda'_equiv.symm s))),
  map := Œª X Y f g,
  begin
    refine ‚ü®A.map f g.1, _‚ü©,
    refine F.map (quiver.hom.op _) g.2,
    refine costructured_arrow.hom_mk f.unop _,
    sorry,
    -- cases g,
    -- ext Z h,
    -- cases h,
    -- dsimp, simp only [functor_to_types.map_comp_apply]
  end,
  map_id' := Œª X,
  begin
    ext1 y,
    cases y,
    have : y_fst = A.map (ùüô X) y_fst,
    { tidy, },
    rw ‚Üêthis,
    erw hom_mk_id,
    simp,
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext1 y,
    cases y,
    dsimp,
    rw A.map_comp,
    simp,
    dsimp,
    rw [‚Üê functor_to_types.map_comp_apply F],
    congr,
  end}


@[simps]
def from_presheaf_obj_map (F : (costructured_arrow yoneda' A)·µí·µñ ‚•§ Type (max u v w)) :
  from_presheaf_obj_obj A F ‚ü∂ A :=
{ app := Œª X f, f.fst,
  naturality' := Œª X Y f, rfl }

@[simps]
def from_presheaf_obj (F : (costructured_arrow yoneda' A)·µí·µñ ‚•§ Type (max u v w)) : over A :=
over.mk (from_presheaf_obj_map A F)

@[simps]
def from_presheaf : ((costructured_arrow yoneda' A)·µí·µñ ‚•§ Type (max u v w)) ‚•§ over A :=
{ obj := from_presheaf_obj A,
  map := Œª X Y f, costructured_arrow.hom_mk
  { app := Œª Z g, ‚ü®g.1, f.app _ g.2‚ü©,
    naturality' := Œª U V g,
    begin
      ext1,
      cases x,
      simp only [types_comp_apply, from_presheaf_obj_left_map_snd],
      dsimp [from_presheaf_obj, from_presheaf_obj_obj],
      simp only [eq_self_iff_true, heq_iff_eq, true_and],
      exact congr_fun (f.naturality _) _,
    end }
    rfl,
  map_id' := Œª X, by { dsimp, simp only [sigma.eta], refl },
  map_comp' := Œª X Y Z f g, rfl }

def eqv : over A ‚âå (costructured_arrow yoneda' A)·µí·µñ ‚•§ Type (max u v w) :=
equivalence.mk (as_presheaf A) (from_presheaf A)
  (nat_iso.of_components (Œª X, over.iso_mk (nat_iso.of_components (Œª Y, equiv.to_iso
  { to_fun := Œª x,
    begin
      dsimp at x ‚ä¢,
      refine ‚ü®X.hom.app Y x, over.hom_mk _ _‚ü©,
      { change X.left.obj (op (unop Y)) at x,
        exact yoneda'_equiv.symm x, },
      { dsimp,
        ext Z y,
        dsimp at y ‚ä¢,
        exact congr_fun (X.hom.naturality y.down.op) _ }
    end,
    inv_fun := Œª x,
    begin
      dsimp at x ‚ä¢,
      change (X.left.obj (op (unop Y))),
      exact yoneda'_equiv x.snd.left,
    end,
    left_inv := Œª x, by { dsimp, simp only [functor_to_types.m1ap_id_apply] },
    right_inv := Œª x, by { dsimp,
      cases x,1111
      dsimp,
      sorry,

     }  }
  )
  begin
    intros, dsimp,

  end
  )
  _)
  _)
  _

end category_theory
